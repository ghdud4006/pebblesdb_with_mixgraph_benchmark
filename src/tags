!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACKNOWLEDGED	db/version_set.h	/^	ACKNOWLEDGED$/;"	e	enum:leveldb::SeekReturnStatus
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/young\/ExperDB\/SUPE\/pebblesdb\/src\/missing aclocal-1.15$/;"	m
ACLOCAL_AMFLAGS	Makefile	/^ACLOCAL_AMFLAGS = -I m4 ${ACLOCAL_FLAGS}$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ADD_LEVEL0_FILES_TO_EDIT	util/timer.h	/^	ADD_LEVEL0_FILES_TO_EDIT,$/;"	e	enum:leveldb::TimerStep
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CFLAGS	Makefile	/^AM_CFLAGS = -DLEVELDB_PLATFORM_POSIX $(SNAPPY_FLAGS) ${EXTRA_CFLAGS} $(WANAL_CFLAGS)$/;"	m
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = -I${abs_top_srcdir}\/include$/;"	m
AM_CXXFLAGS	Makefile	/^AM_CXXFLAGS = -DLEVELDB_PLATFORM_POSIX $(SNAPPY_FLAGS) ${EXTRA_CFLAGS} $(WANAL_CXXFLAGS) -Wno-variadic-macros -std=c++11$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_MAKEFLAGS	Makefile	/^AM_MAKEFLAGS = --no-print-directory$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = cscope$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AR	Makefile	/^AR = ar$/;"	m
ARCH_CPU_ARM_FAMILY	port/atomic_pointer.h	241;"	d
ARCH_CPU_ARM_FAMILY	port/atomic_pointer.h	47;"	d
ARCH_CPU_PPC_FAMILY	port/atomic_pointer.h	242;"	d
ARCH_CPU_PPC_FAMILY	port/atomic_pointer.h	49;"	d
ARCH_CPU_X86_FAMILY	port/atomic_pointer.h	240;"	d
ARCH_CPU_X86_FAMILY	port/atomic_pointer.h	43;"	d
ARCH_CPU_X86_FAMILY	port/atomic_pointer.h	45;"	d
ASSERT_EQ	util/testharness.h	107;"	d
ASSERT_GE	util/testharness.h	109;"	d
ASSERT_GT	util/testharness.h	110;"	d
ASSERT_LE	util/testharness.h	111;"	d
ASSERT_LT	util/testharness.h	112;"	d
ASSERT_NE	util/testharness.h	108;"	d
ASSERT_OK	util/testharness.h	106;"	d
ASSERT_TRUE	util/testharness.h	105;"	d
ASSIGNED	db/version_set.h	/^	ASSIGNED,$/;"	e	enum:leveldb::ThreadStatus
ATOMICOPS_COMPILER_BARRIER	util/atomic.h	63;"	d
ATOMICOPS_COMPILER_BARRIER	util/atomic.h	65;"	d
ATOMICOPS_COMPILER_BARRIER	util/atomic.h	667;"	d
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/young\/ExperDB\/SUPE\/pebblesdb\/src\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/young\/ExperDB\/SUPE\/pebblesdb\/src\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/young\/ExperDB\/SUPE\/pebblesdb\/src\/missing automake-1.15$/;"	m
AWK	Makefile	/^AWK = mawk$/;"	m
Abandon	table/table_builder.cc	/^void TableBuilder::Abandon() {$/;"	f	class:leveldb::TableBuilder
Acquire	util/env_posix.cc	/^  bool Acquire() {$/;"	f	class:leveldb::__anon13::MmapLimiter
AcquireLoad	db/db_bench.cc	/^  void AcquireLoad(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Acquire_Load	port/atomic_pointer.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Add	db/db_impl.h	/^    void Add(const CompactionStats& c) {$/;"	f	struct:leveldb::DBImpl::CompactionStats
Add	db/memtable.cc	/^void MemTable::Add(SequenceNumber s, ValueType type,$/;"	f	class:leveldb::MemTable
Add	db/version_set_test.cc	/^  void Add(const char* smallest, const char* largest,$/;"	f	class:leveldb::FindFileTest
Add	table/block_builder.cc	/^void BlockBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::BlockBuilder
Add	table/table_builder.cc	/^void TableBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::TableBuilder
Add	table/table_test.cc	/^  void Add(const std::string& key, const Slice& value) {$/;"	f	class:leveldb::Constructor
Add	table/table_test.cc	/^  void Add(const std::string& key, const std::string& value) {$/;"	f	class:leveldb::Harness
Add	util/bloom_test.cc	/^  void Add(const Slice& s) {$/;"	f	class:leveldb::BloomTest
Add	util/histogram.cc	/^void Histogram::Add(double value) {$/;"	f	class:leveldb::Histogram
AddBytes	db/db_bench.cc	/^  void AddBytes(int64_t n) {$/;"	f	class:leveldb::__anon19::Stats
AddCompleteGuard	db/version_edit.h	/^  void AddCompleteGuard(int level, const InternalKey& guard_key) {$/;"	f	class:leveldb::VersionEdit
AddCompleteGuard	db/version_set.cc	/^  void AddCompleteGuard(Version* v, unsigned level, GuardMetaData* g) {$/;"	f	class:leveldb::VersionSet::Builder
AddCompleteGuardFromExisting	db/version_edit.h	/^  void AddCompleteGuardFromExisting(int level, GuardMetaData* g) {$/;"	f	class:leveldb::VersionEdit
AddCompleteGuardsToEdit	db/version_set.h	/^  void AddCompleteGuardsToEdit(VersionEdit* edit) {$/;"	f	class:leveldb::Version
AddDeltaGuardsToEdit	db/version_set.cc	/^void Version::AddDeltaGuardsToEdit(VersionEdit* edit, std::set<int> level_to_load_complete_guards) {$/;"	f	class:leveldb::Version
AddFile	db/version_edit.h	/^  void AddFile(int level, uint64_t num_entries, uint64_t file,$/;"	f	class:leveldb::VersionEdit
AddFileLevelBloomFilterInfo	db/version_set.cc	/^void VersionSet::AddFileLevelBloomFilterInfo(uint64_t file_number, std::string* filter_string) {$/;"	f	class:leveldb::VersionSet
AddFileToSentinel	db/version_edit.h	/^  void AddFileToSentinel(FileMetaData* f, int level) {$/;"	f	class:leveldb::VersionEdit
AddFilterString	db/builder.cc	/^void AddFilterString(FileLevelFilterBuilder* file_level_filter_builder, int n,$/;"	f	namespace:leveldb
AddGuard	db/version_edit.h	/^void AddGuard(int level, const InternalKey& guard_key, uint64_t read_count, uint64_t read_last_accessed_time, uint64_t write_count) {$/;"	f	class:leveldb::VersionEdit
AddGuard	db/version_set.h	/^  void AddGuard(GuardMetaData* g, int level) {$/;"	f	class:leveldb::Version
AddGuardFromExisting	db/version_edit.h	/^  void AddGuardFromExisting(int level, GuardMetaData* g) {$/;"	f	class:leveldb::VersionEdit
AddGuardWithFiles	db/version_edit.h	/^  void AddGuardWithFiles(int level, uint64_t number_segments,$/;"	f	class:leveldb::VersionEdit
AddGuardsToEdit	db/version_set.h	/^  void AddGuardsToEdit(VersionEdit* edit, std::set<int> level_to_load_complete_guards) {$/;"	f	class:leveldb::Version
AddInputDeletions	db/version_set.cc	/^void Compaction::AddInputDeletions(VersionEdit* ed) {$/;"	f	class:leveldb::Compaction
AddIterators	db/version_set.cc	/^void Version::AddIterators(const ReadOptions& options,$/;"	f	class:leveldb::Version
AddKey	table/filter_block.cc	/^void FileLevelFilterBuilder::AddKey(const Slice& key) {$/;"	f	class:leveldb::FileLevelFilterBuilder
AddKey	table/filter_block.cc	/^void FilterBlockBuilder::AddKey(const Slice& key) {$/;"	f	class:leveldb::FilterBlockBuilder
AddLiveFiles	db/version_set.cc	/^void VersionSet::AddLiveFiles(std::set<uint64_t>* live) {$/;"	f	class:leveldb::VersionSet
AddMessage	db/db_bench.cc	/^  void AddMessage(Slice msg) {$/;"	f	class:leveldb::__anon19::Stats
AddRecord	db/log_writer.cc	/^Status Writer::AddRecord(const Slice& slice) {$/;"	f	class:leveldb::log::Writer
AddSentinelFile	db/version_edit.h	/^  void AddSentinelFile(int level, int allowed_seeks, uint64_t file_size, GuardMetaData* g, InternalKey largest, InternalKey smallest, uint64_t number, int refs) {$/;"	f	class:leveldb::VersionEdit
AddSentinelFileNo	db/version_edit.h	/^  void AddSentinelFileNo(int level, uint64_t number) {$/;"	f	class:leveldb::VersionEdit
AddSomeIterators	db/version_set.cc	/^void Version::AddSomeIterators(const ReadOptions& options, uint64_t num,$/;"	f	class:leveldb::Version
AddSomeIteratorsGuards	db/version_set.cc	/^void Version::AddSomeIteratorsGuards(const ReadOptions& options, uint64_t num,$/;"	f	class:leveldb::Version
AddToCompleteGuards	db/version_set.h	/^  void AddToCompleteGuards(GuardMetaData* g, int level) {$/;"	f	class:leveldb::Version
AddToNewGuards	db/version_set.h	/^  void AddToNewGuards(GuardMetaData* g, int level) {$/;"	f	class:leveldb::Version
AfterFile	db/version_set.cc	/^static bool AfterFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
AfterGuard	db/version_set.cc	/^static bool AfterGuard(const Comparator* ucmp,$/;"	f	namespace:leveldb
AllEntriesFor	db/db_test.cc	/^  std::string AllEntriesFor(const Slice& user_key) {$/;"	f	class:leveldb::DBTest
Allocate	util/arena.cc	/^char* Arena::Allocate(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateAligned	util/arena.cc	/^char* Arena::AllocateAligned(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFinalize	util/arena.cc	/^char* Arena::AllocateFinalize(Block* b, size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateKey	db/db_bench.cc	/^  Slice AllocateKey(std::unique_ptr<const char[]>* key_guard) {$/;"	f	class:leveldb::Benchmark	file:
AllocateLarge	util/arena.cc	/^char* Arena::AllocateLarge(size_t bytes) {$/;"	f	class:leveldb::Arena
AllowGarbageCollectBeforeTimestamp	db/db_impl.cc	/^void DBImpl::AllowGarbageCollectBeforeTimestamp(const std::string& timestamp) {$/;"	f	class:leveldb::DBImpl
AllowGarbageCollectBeforeTimestamp	db/db_test.cc	/^  virtual void AllowGarbageCollectBeforeTimestamp(const std::string& timestamp) {$/;"	f	class:leveldb::ModelDB
Append	db/log_test.cc	/^    virtual Status Append(const Slice& slice) {$/;"	f	class:leveldb::log::LogTest::StringDest
Append	db/write_batch.cc	/^void WriteBatchInternal::Append(WriteBatch* dst, const WriteBatch* src) {$/;"	f	class:leveldb::WriteBatchInternal
Append	helpers/memenv/memenv.cc	/^  Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon9::FileState
Append	helpers/memenv/memenv.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon9::WritableFileImpl
Append	table/table_test.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::StringSink
Append	util/env_posix.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon13::PosixMmapFile
Append	util/env_posix.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon13::PosixWritableFile
AppendDoubleTo	util/logging.cc	/^void AppendDoubleTo(std::string* str, double num) {$/;"	f	namespace:leveldb
AppendEscapedStringTo	util/logging.cc	/^void AppendEscapedStringTo(std::string* str, const Slice& value) {$/;"	f	namespace:leveldb
AppendInternalKey	db/dbformat.cc	/^void AppendInternalKey(std::string* result, const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
AppendNumberTo	util/logging.cc	/^void AppendNumberTo(std::string* str, uint64_t num) {$/;"	f	namespace:leveldb
AppendTimerInfo	util/timer.h	/^	void AppendTimerInfo(Timer* timer) {$/;"	f	class:leveldb::Timer
AppendVersion	db/version_set.cc	/^void VersionSet::AppendVersion(Version* v) {$/;"	f	class:leveldb::VersionSet
AppendWithSpace	db/db_bench.cc	/^static void AppendWithSpace(std::string* str, Slice msg) {$/;"	f	namespace:leveldb::__anon19
Apply	db/version_set.cc	/^  void Apply(VersionEdit* edit) {$/;"	f	class:leveldb::VersionSet::Builder
ApproximateMemoryUsage	db/memtable.cc	/^size_t MemTable::ApproximateMemoryUsage() { return arena_.MemoryUsage(); }$/;"	f	class:leveldb::MemTable
ApproximateOffsetOf	db/version_set.cc	/^uint64_t VersionSet::ApproximateOffsetOf(Version* v, const InternalKey& ikey) {$/;"	f	class:leveldb::VersionSet
ApproximateOffsetOf	table/table.cc	/^uint64_t Table::ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::Table
ApproximateOffsetOf	table/table_test.cc	/^  uint64_t ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::TableConstructor
ArchiveFile	db/repair.cc	/^  void ArchiveFile(const std::string& fname) {$/;"	f	class:leveldb::__anon27::Repairer	file:
Arena	util/arena.cc	/^Arena::Arena()$/;"	f	class:leveldb::Arena
Arena	util/arena.h	/^class Arena {$/;"	c	namespace:leveldb
ArenaTest	util/arena_test.cc	/^class ArenaTest { };$/;"	c	namespace:leveldb	file:
AssertHeld	port/port_posix.h	/^  void AssertHeld() { }$/;"	f	class:leveldb::port::Mutex
AtomicCounter	db/db_test.cc	/^  AtomicCounter() : count_(0) { }$/;"	f	class:leveldb::__anon22::AtomicCounter
AtomicCounter	db/db_test.cc	/^class AtomicCounter {$/;"	c	namespace:leveldb::__anon22	file:
AtomicPointer	port/atomic_pointer.h	/^  AtomicPointer() : rep_(NULL) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/atomic_pointer.h	/^  explicit AtomicPointer(void* p) : rep_(p) {}$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/atomic_pointer.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	port/port_example.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/port_example.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AutoCompactTest	db/autocompact_test.cc	/^  AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
AutoCompactTest	db/autocompact_test.cc	/^class AutoCompactTest {$/;"	c	namespace:leveldb	file:
Average	util/histogram.cc	/^double Histogram::Average() const {$/;"	f	class:leveldb::Histogram
BEGIN	util/timer.h	/^	BEGIN,$/;"	e	enum:leveldb::TimerStep
BGC_ADD_COMPLETE_GUARDS_TO_EDIT	util/timer.h	/^	BGC_ADD_COMPLETE_GUARDS_TO_EDIT,$/;"	e	enum:leveldb::TimerStep
BGC_ADD_GUARDS_TO_EDIT	util/timer.h	/^	BGC_ADD_GUARDS_TO_EDIT,$/;"	e	enum:leveldb::TimerStep
BGC_CLEANUP_COMPACTION	util/timer.h	/^	BGC_CLEANUP_COMPACTION,$/;"	e	enum:leveldb::TimerStep
BGC_COLLECT_STATS	util/timer.h	/^	BGC_COLLECT_STATS,$/;"	e	enum:leveldb::TimerStep
BGC_DO_COMPACTION_WORK_GUARDS	util/timer.h	/^	BGC_DO_COMPACTION_WORK_GUARDS,$/;"	e	enum:leveldb::TimerStep
BGC_FINISH_COMPACTION_OUTPUT_FILE	util/timer.h	/^	BGC_FINISH_COMPACTION_OUTPUT_FILE,$/;"	e	enum:leveldb::TimerStep
BGC_GET_LOCK_BEFORE_INSTALL	util/timer.h	/^	BGC_GET_LOCK_BEFORE_INSTALL,$/;"	e	enum:leveldb::TimerStep
BGC_INSTALL_COMPACTION_RESULTS	util/timer.h	/^	BGC_INSTALL_COMPACTION_RESULTS,$/;"	e	enum:leveldb::TimerStep
BGC_ITERATE_KEYS_AND_SPLIT	util/timer.h	/^	BGC_ITERATE_KEYS_AND_SPLIT,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_ADD_RECORD_TO_DESC_LOG	util/timer.h	/^	BGC_LAA_ADD_RECORD_TO_DESC_LOG,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_APPEND_VERSION	util/timer.h	/^	BGC_LAA_APPEND_VERSION,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_APPLY_EDIT_TO_BUILDER	util/timer.h	/^	BGC_LAA_APPLY_EDIT_TO_BUILDER,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_COMPLETE_WRITE_SNAPSHOT	util/timer.h	/^	BGC_LAA_COMPLETE_WRITE_SNAPSHOT,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_CREATE_MANIFEST_LOG_WRITER	util/timer.h	/^	BGC_LAA_CREATE_MANIFEST_LOG_WRITER,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_ENCODE_EDIT	util/timer.h	/^	BGC_LAA_ENCODE_EDIT,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_FINALIZE	util/timer.h	/^	BGC_LAA_FINALIZE,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_GET_DELTA_COMPLETE_GUARDS	util/timer.h	/^	BGC_LAA_GET_DELTA_COMPLETE_GUARDS,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_GET_LOCK_AFTER_MANIFEST_SYNC	util/timer.h	/^	BGC_LAA_GET_LOCK_AFTER_MANIFEST_SYNC,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_SAVETO	util/timer.h	/^	BGC_LAA_SAVETO,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_SYNC_COMPLETE_GUARDS	util/timer.h	/^	BGC_LAA_SYNC_COMPLETE_GUARDS,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_SYNC_MANIFEST_LOG_WRITE	util/timer.h	/^	BGC_LAA_SYNC_MANIFEST_LOG_WRITE,$/;"	e	enum:leveldb::TimerStep
BGC_LAA_WAIT_FOR_LIVE_BACKUP	util/timer.h	/^	BGC_LAA_WAIT_FOR_LIVE_BACKUP,$/;"	e	enum:leveldb::TimerStep
BGC_MAKE_INPUT_ITERATOR	util/timer.h	/^	BGC_MAKE_INPUT_ITERATOR,$/;"	e	enum:leveldb::TimerStep
BGC_OPEN_COMPACTION_OUTPUT_FILE	util/timer.h	/^	BGC_OPEN_COMPACTION_OUTPUT_FILE,$/;"	e	enum:leveldb::TimerStep
BGC_PICK_COMPACTION	util/timer.h	/^	BGC_PICK_COMPACTION,$/;"	e	enum:leveldb::TimerStep
BGC_PICK_COMPACTION_LEVEL	util/timer.h	/^	BGC_PICK_COMPACTION_LEVEL,$/;"	e	enum:leveldb::TimerStep
BGC_SAVETO_ADD_COMPLETE_GUARDS	util/timer.h	/^	BGC_SAVETO_ADD_COMPLETE_GUARDS,$/;"	e	enum:leveldb::TimerStep
BGC_SAVETO_ADD_COMPLETE_GUARDS_TO_GUARDSET	util/timer.h	/^	BGC_SAVETO_ADD_COMPLETE_GUARDS_TO_GUARDSET,$/;"	e	enum:leveldb::TimerStep
BGC_SAVETO_ADD_FILES	util/timer.h	/^	BGC_SAVETO_ADD_FILES,$/;"	e	enum:leveldb::TimerStep
BGC_SAVETO_ADD_GUARDS	util/timer.h	/^	BGC_SAVETO_ADD_GUARDS,$/;"	e	enum:leveldb::TimerStep
BGC_SAVETO_POPULATE_FILES	util/timer.h	/^	BGC_SAVETO_POPULATE_FILES,$/;"	e	enum:leveldb::TimerStep
BGItem	util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	s	class:leveldb::__anon13::PosixEnv	file:
BGQueue	util/env_posix.cc	/^  typedef std::deque<BGItem> BGQueue;$/;"	t	class:leveldb::__anon13::PosixEnv	file:
BGThread	util/env_posix.cc	/^void PosixEnv::BGThread() {$/;"	f	class:leveldb::__anon13::PosixEnv
BGThreadWrapper	util/env_posix.cc	/^  static void* BGThreadWrapper(void* arg) {$/;"	f	class:leveldb::__anon13::PosixEnv	file:
BIG_CONSTANT	db/murmurhash3.cc	26;"	d	file:
BIG_CONSTANT	db/murmurhash3.cc	47;"	d	file:
BILLION	benchmark.cc	165;"	d	file:
BINARY_OP	util/testharness.h	77;"	d
BINARY_OP	util/testharness.h	93;"	d
BLOCK_SIZE	util/arena.cc	11;"	d	file:
BLOCK_TEST	table/table_test.cc	/^  BLOCK_TEST,$/;"	e	enum:leveldb::TestType	file:
BM_LogAndApply	db/db_test.cc	/^void BM_LogAndApply(int iters, int num_base_files) {$/;"	f	namespace:leveldb
BUILD_LEVEL0_TABLES	util/timer.h	/^	BUILD_LEVEL0_TABLES,$/;"	e	enum:leveldb::TimerStep
BUSY	db/version_set.h	/^	BUSY,$/;"	e	enum:leveldb::ThreadStatus
BackgroundCompactionGuards	db/db_impl.cc	/^Status DBImpl::BackgroundCompactionGuards(FileLevelFilterBuilder* file_level_filter_builder) {$/;"	f	class:leveldb::DBImpl
BeforeFile	db/version_set.cc	/^static bool BeforeFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
BeforeGuard	db/version_set.cc	/^static bool BeforeGuard(const Comparator* ucmp,$/;"	f	namespace:leveldb
Benchmark	db/db_bench.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	db/db_bench.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	doc/bench/db_bench_sqlite3.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	doc/bench/db_bench_sqlite3.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	doc/bench/db_bench_tree_db.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	doc/bench/db_bench_tree_db.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Between	db/db_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
Between	table/table_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
BigString	db/log_test.cc	/^static std::string BigString(const std::string& partial_string, size_t n) {$/;"	f	namespace:leveldb::log
Block	table/block.cc	/^Block::Block(const BlockContents& contents)$/;"	f	class:leveldb::Block
Block	table/block.h	/^class Block {$/;"	c	namespace:leveldb
Block	util/arena.cc	/^  Block()$/;"	f	struct:leveldb::Arena::Block
Block	util/arena.cc	/^struct Arena::Block {$/;"	s	class:leveldb::Arena	file:
BlockBuilder	table/block_builder.cc	/^BlockBuilder::BlockBuilder(const Options* options)$/;"	f	class:leveldb::BlockBuilder
BlockBuilder	table/block_builder.h	/^class BlockBuilder {$/;"	c	namespace:leveldb
BlockConstructor	table/table_test.cc	/^  explicit BlockConstructor(const Comparator* cmp)$/;"	f	class:leveldb::BlockConstructor
BlockConstructor	table/table_test.cc	/^class BlockConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
BlockContents	table/format.h	/^  BlockContents() : data(), cachable(), heap_allocated() {}$/;"	f	struct:leveldb::BlockContents
BlockContents	table/format.h	/^struct BlockContents {$/;"	s	namespace:leveldb
BlockFunction	table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunction)(void*, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon4	file:
BlockFunctionGuards	table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunctionGuards)(void*, const void*, void*, unsigned, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon4	file:
BlockHandle	table/format.h	/^class BlockHandle {$/;"	c	namespace:leveldb
BlockHandle	table/format.h	/^inline BlockHandle::BlockHandle()$/;"	f	class:leveldb::BlockHandle
BlockReader	table/table.cc	/^Iterator* Table::BlockReader(void* arg,$/;"	f	class:leveldb::Table
BloomFilterPolicy	util/bloom.cc	/^  explicit BloomFilterPolicy(int bits_per_key)$/;"	f	class:leveldb::__anon15::BloomFilterPolicy
BloomFilterPolicy	util/bloom.cc	/^class BloomFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb::__anon15	file:
BloomHash	util/bloom.cc	/^static uint32_t BloomHash(const Slice& key) {$/;"	f	namespace:leveldb::__anon15
BloomTest	util/bloom_test.cc	/^  BloomTest() : policy_(NewBloomFilterPolicy(10)) { }$/;"	f	class:leveldb::BloomTest
BloomTest	util/bloom_test.cc	/^class BloomTest {$/;"	c	namespace:leveldb	file:
Build	db/corruption_test.cc	/^    Build(int n)$/;"	f	class:leveldb::CorruptionTest
Build	util/bloom_test.cc	/^  void Build() {$/;"	f	class:leveldb::BloomTest
BuildLevel0Tables	db/builder.cc	/^Status BuildLevel0Tables(const std::string& dbname,$/;"	f	namespace:leveldb
BuildTable	db/builder.cc	/^Status BuildTable(const std::string& dbname,$/;"	f	namespace:leveldb
Builder	db/version_set.cc	/^  Builder(VersionSet* vset, Version* base)$/;"	f	class:leveldb::VersionSet::Builder
Builder	db/version_set.cc	/^class VersionSet::Builder {$/;"	c	class:leveldb::VersionSet	file:
Bump	db/version_set.cc	/^  void Bump() {$/;"	f	class:leveldb::Version::LevelFileNumIterator	file:
Bump	db/version_set.cc	/^  void Bump() {$/;"	f	class:leveldb::Version::LevelGuardNumIterator	file:
BumpReverse	db/version_set.cc	/^  void BumpReverse() {$/;"	f	class:leveldb::Version::LevelGuardNumIterator	file:
BySmallestGuard	db/version_set.cc	/^  struct BySmallestGuard {$/;"	s	class:leveldb::VersionSet::Builder	file:
BySmallestGuard	db/version_set.cc	/^struct BySmallestGuard {$/;"	s	namespace:leveldb	file:
BySmallestInternalKey	db/version_set.cc	/^  struct BySmallestInternalKey {$/;"	s	class:leveldb::VersionSet::Builder	file:
BySmallestKey	db/version_set.cc	/^  struct BySmallestKey {$/;"	s	class:leveldb::VersionSet::Builder	file:
BySmallestPair	db/version_edit.h	/^  struct BySmallestPair {$/;"	s	class:leveldb::VersionEdit
ByteSize	db/write_batch_internal.h	/^  static size_t ByteSize(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
BytewiseComparator	util/comparator.cc	/^const Comparator* BytewiseComparator() {$/;"	f	namespace:leveldb
BytewiseComparatorImpl	util/comparator.cc	/^  BytewiseComparatorImpl() { }$/;"	f	class:leveldb::__anon11::BytewiseComparatorImpl
BytewiseComparatorImpl	util/comparator.cc	/^class BytewiseComparatorImpl : public Comparator {$/;"	c	namespace:leveldb::__anon11	file:
CC	Makefile	/^CC = gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CMT_ADD_COMPLETE_GUARDS_TO_EDIT	util/timer.h	/^	CMT_ADD_COMPLETE_GUARDS_TO_EDIT,$/;"	e	enum:leveldb::TimerStep
CMT_ADD_GUARDS_TO_EDIT	util/timer.h	/^	CMT_ADD_GUARDS_TO_EDIT,$/;"	e	enum:leveldb::TimerStep
CMT_DELETE_OBSOLETE_FILES	util/timer.h	/^	CMT_DELETE_OBSOLETE_FILES,$/;"	e	enum:leveldb::TimerStep
CMT_ERASE_PENDING_OUTPUTS	util/timer.h	/^	CMT_ERASE_PENDING_OUTPUTS,$/;"	e	enum:leveldb::TimerStep
CMT_LOG_AND_APPLY	util/timer.h	/^	CMT_LOG_AND_APPLY,$/;"	e	enum:leveldb::TimerStep
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPLETED	db/version_set.h	/^	COMPLETED$/;"	e	enum:leveldb::ThreadStatus
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES = libpebblesdb.pc$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = config.h$/;"	m
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CRC	util/crc32c_test.cc	/^class CRC { };$/;"	c	namespace:leveldb::crc32c	file:
CRC_FFs	util/crc32c.cc	17;"	d	file:
CSCOPE	Makefile	/^CSCOPE = cscope$/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CXX	Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
Cache	include/pebblesdb/cache.h	/^  Cache() : rep_() { }$/;"	f	class:leveldb::Cache
Cache	include/pebblesdb/cache.h	/^class Cache {$/;"	c	namespace:leveldb
CacheTest	util/cache_test.cc	/^  CacheTest() : cache_(NewLRUCache(kCacheSize)) {$/;"	f	class:leveldb::CacheTest
CacheTest	util/cache_test.cc	/^class CacheTest {$/;"	c	namespace:leveldb	file:
CasNext	db/skiplist.h	/^  bool CasNext(unsigned n, Node* old_node, Node* new_node) {$/;"	f	struct:leveldb::SkipList::Node
Change	db/skiplist_test.cc	/^  void Change(ReaderState s) {$/;"	f	class:leveldb::TestState
ChangeOptions	db/db_test.cc	/^  bool ChangeOptions() {$/;"	f	class:leveldb::DBTest
ChangeOptions	table/table_builder.cc	/^Status TableBuilder::ChangeOptions(const Options& options) {$/;"	f	class:leveldb::TableBuilder
Check	db/corruption_test.cc	/^    Check(int min_expected, int max_expected)$/;"	f	class:leveldb::CorruptionTest
CheckCondition	db/c_test.c	35;"	d	file:
CheckDel	db/c_test.c	/^static void CheckDel(void* ptr, const char* k, size_t klen) {$/;"	f	file:
CheckEqual	db/c_test.c	/^static void CheckEqual(const char* expected, const char* v, size_t n) {$/;"	f	file:
CheckGet	db/c_test.c	/^static void CheckGet($/;"	f	file:
CheckInitialOffsetRecord	db/log_test.cc	/^  void CheckInitialOffsetRecord(uint64_t initial_offset,$/;"	f	class:leveldb::log::LogTest
CheckIter	db/c_test.c	/^static void CheckIter(leveldb_iterator_t* iter,$/;"	f	file:
CheckNoError	db/c_test.c	29;"	d	file:
CheckOffsetPastEndReturnsNoRecords	db/log_test.cc	/^  void CheckOffsetPastEndReturnsNoRecords(uint64_t offset_past_end) {$/;"	f	class:leveldb::log::LogTest
CheckPut	db/c_test.c	/^static void CheckPut(void* ptr,$/;"	f	file:
Cleanup	include/pebblesdb/iterator.h	/^  struct Cleanup {$/;"	s	class:leveldb::Iterator
CleanupCompaction	db/db_impl.cc	/^void DBImpl::CleanupCompaction(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
CleanupFunction	include/pebblesdb/iterator.h	/^  typedef void (*CleanupFunction)(void* arg1, void* arg2);$/;"	t	class:leveldb::Iterator
CleanupIteratorState	db/db_impl.cc	/^static void CleanupIteratorState(void* arg1, void* \/*arg2*\/) {$/;"	f	namespace:leveldb::__anon21
Clear	db/dbformat.h	/^  void Clear() { rep_.clear(); }$/;"	f	class:leveldb::InternalKey
Clear	db/version_edit.cc	/^void VersionEdit::Clear() {$/;"	f	class:leveldb::VersionEdit
Clear	db/write_batch.cc	/^void WriteBatch::Clear() {$/;"	f	class:leveldb::WriteBatch
Clear	table/filter_block.cc	/^void FileLevelFilterBuilder::Clear() {$/;"	f	class:leveldb::FileLevelFilterBuilder
Clear	util/histogram.cc	/^void Histogram::Clear() {$/;"	f	class:leveldb::Histogram
ClearSavedValue	db/db_iter.cc	/^  inline void ClearSavedValue() {$/;"	f	class:leveldb::__anon20::DBIter	file:
ClearTimer	db/db_impl.cc	/^void DBImpl::ClearTimer() {$/;"	f	class:leveldb::DBImpl
ClipToRange	db/db_impl.cc	/^static void ClipToRange(T* ptr, V minvalue, V maxvalue) {$/;"	f	namespace:leveldb
Close	db/db_test.cc	/^  void Close() {$/;"	f	class:leveldb::DBTest
Close	db/log_test.cc	/^    virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Close	helpers/memenv/memenv.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon9::WritableFileImpl
Close	table/table_test.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Close	util/env_posix.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon13::PosixMmapFile
Close	util/env_posix.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon13::PosixWritableFile
CmpByRange	db/version_set.cc	/^  CmpByRange(const InternalKeyComparator* cmp) : cmp_(cmp) {}$/;"	f	struct:leveldb::CmpByRange
CmpByRange	db/version_set.cc	/^struct CmpByRange {$/;"	s	namespace:leveldb	file:
CmpCompare	db/c_test.c	/^static int CmpCompare(void* arg, const char* a, size_t alen,$/;"	f	file:
CmpDestroy	db/c_test.c	/^static void CmpDestroy(void* arg) { }$/;"	f	file:
CmpName	db/c_test.c	/^static const char* CmpName(void* arg) {$/;"	f	file:
Code	include/pebblesdb/status.h	/^  enum Code {$/;"	g	class:leveldb::Status
Coding	util/coding_test.cc	/^class Coding { };$/;"	c	namespace:leveldb	file:
Compact	db/db_bench.cc	/^  void Compact(ThreadState* \/*thread*\/) {$/;"	f	class:leveldb::Benchmark	file:
Compact	db/db_test.cc	/^  void Compact(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
CompactAllLevels	db/db_bench.cc	/^  void CompactAllLevels(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
CompactLevelThread	db/db_impl.cc	/^void DBImpl::CompactLevelThread() {$/;"	f	class:leveldb::DBImpl
CompactLevelWrapper	db/db_impl.h	/^  static void CompactLevelWrapper(void* db)$/;"	f	class:leveldb::DBImpl
CompactMemTableThread	db/db_impl.cc	/^void DBImpl::CompactMemTableThread() {$/;"	f	class:leveldb::DBImpl
CompactMemTableWrapper	db/db_impl.h	/^  static void CompactMemTableWrapper(void* db)$/;"	f	class:leveldb::DBImpl
CompactMemtable	db/db_bench.cc	/^  void CompactMemtable(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
CompactOnce	db/db_bench.cc	/^  void CompactOnce(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
CompactRange	db/db_impl.cc	/^void DBImpl::CompactRange(const Slice* begin, const Slice* end) {$/;"	f	class:leveldb::DBImpl
CompactRange	db/db_test.cc	/^  virtual void CompactRange(const Slice* start, const Slice* end) {$/;"	f	class:leveldb::ModelDB
CompactRange	db/version_set.cc	/^Compaction* VersionSet::CompactRange($/;"	f	class:leveldb::VersionSet
Compaction	db/version_set.cc	/^Compaction::Compaction(unsigned l)$/;"	f	class:leveldb::Compaction
Compaction	db/version_set.h	/^class Compaction {$/;"	c	namespace:leveldb
CompactionBoundary	db/version_set.cc	/^  CompactionBoundary() : start(0), limit(0) {}$/;"	f	struct:leveldb::CompactionBoundary
CompactionBoundary	db/version_set.cc	/^  CompactionBoundary(size_t s, size_t l) : start(s), limit(l) {}$/;"	f	struct:leveldb::CompactionBoundary
CompactionBoundary	db/version_set.cc	/^struct CompactionBoundary {$/;"	s	namespace:leveldb	file:
CompactionState	db/db_impl.cc	/^  explicit CompactionState(Compaction* c)$/;"	f	struct:leveldb::DBImpl::CompactionState
CompactionState	db/db_impl.cc	/^struct DBImpl::CompactionState {$/;"	s	class:leveldb::DBImpl	file:
CompactionStats	db/db_impl.h	/^    CompactionStats() : micros(0), bytes_read(0), bytes_written(0) { }$/;"	f	struct:leveldb::DBImpl::CompactionStats
CompactionStats	db/db_impl.h	/^  struct CompactionStats {$/;"	s	class:leveldb::DBImpl
Comparator	db/skiplist_test.cc	/^struct Comparator {$/;"	s	namespace:leveldb	file:
Comparator	include/pebblesdb/comparator.h	/^class Comparator {$/;"	c	namespace:leveldb
Compare	db/c.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	struct:leveldb_comparator_t
Compare	db/dbformat.cc	/^int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {$/;"	f	class:leveldb::InternalKeyComparator
Compare	db/dbformat.h	/^inline int InternalKeyComparator::Compare($/;"	f	class:leveldb::InternalKeyComparator
Compare	table/block.cc	/^  inline int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::Block::Iter	file:
Compare	table/table_test.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon6::ReverseKeyComparator
Compare	util/comparator.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon11::BytewiseComparatorImpl
CompareIterators	db/db_test.cc	/^static bool CompareIterators(int step,$/;"	f	namespace:leveldb
CompareTimestamps	db/db_impl.cc	/^int DBImpl::CompareTimestamps(const std::string& lhs, const std::string& rhs) {$/;"	f	class:leveldb::DBImpl
CompareTimestamps	db/db_test.cc	/^  virtual int CompareTimestamps(const std::string&, const std::string&) {$/;"	f	class:leveldb::ModelDB
CompressibleString	util/testutil.cc	/^extern Slice CompressibleString(Random* rnd, double compressed_fraction,$/;"	f	namespace:leveldb::test
CompressionType	include/pebblesdb/options.h	/^enum CompressionType {$/;"	g	namespace:leveldb
ComputeRecordSize	db/log_writer.cc	/^uint64_t Writer::ComputeRecordSize(uint64_t start, uint64_t remain) {$/;"	f	class:leveldb::log::Writer
ConcurrentReader	db/skiplist_test.cc	/^static void ConcurrentReader(void* arg) {$/;"	f	namespace:leveldb
ConcurrentSeekTableIteratorWrapper	db/version_set.cc	/^static void ConcurrentSeekTableIteratorWrapper(void* vset) {$/;"	f	namespace:leveldb
ConcurrentSeekWrapper	db/version_set.h	/^  static void ConcurrentSeekWrapper(void* vset) {$/;"	f	class:leveldb::VersionSet
ConcurrentTest	db/skiplist_test.cc	/^  ConcurrentTest() : list_(Comparator(), Extractor(), &arena_) { }$/;"	f	class:leveldb::ConcurrentTest
ConcurrentTest	db/skiplist_test.cc	/^class ConcurrentTest {$/;"	c	namespace:leveldb	file:
ConcurrentWritableFile	include/pebblesdb/env.h	/^    ConcurrentWritableFile()$/;"	f	class:leveldb::ConcurrentWritableFile
ConcurrentWritableFile	include/pebblesdb/env.h	/^class ConcurrentWritableFile : public WritableFile$/;"	c	namespace:leveldb
CondVar	port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	port/port_posix.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	port/port_posix.h	/^  CondVar():mu_() { }$/;"	f	class:leveldb::port::CondVar
CondVar	port/port_posix.h	/^class CondVar {$/;"	c	namespace:leveldb::port
Constructor	table/table_test.cc	/^  explicit Constructor(const Comparator* cmp) : data_(STLLessThan(cmp)) { }$/;"	f	class:leveldb::Constructor
Constructor	table/table_test.cc	/^class Constructor {$/;"	c	namespace:leveldb	file:
ConsumeChar	util/logging.cc	/^bool ConsumeChar(Slice* in, char c) {$/;"	f	namespace:leveldb
ConsumeDecimalNumber	util/logging.cc	/^bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {$/;"	f	namespace:leveldb
Contains	db/skiplist.h	/^bool SkipList<Key,Comparator,Extractor>::Contains(const Key& key) const {$/;"	f	class:leveldb::SkipList
Contents	db/db_test.cc	/^  std::string Contents() {$/;"	f	class:leveldb::DBTest
Contents	db/write_batch_internal.h	/^  static Slice Contents(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ConvertLogFilesToTables	db/repair.cc	/^  void ConvertLogFilesToTables() {$/;"	f	class:leveldb::__anon27::Repairer	file:
ConvertLogToTable	db/repair.cc	/^  Status ConvertLogToTable(uint64_t log) {$/;"	f	class:leveldb::__anon27::Repairer	file:
CopyFile	include/pebblesdb/env.h	/^    CopyFile(const std::string &s, const std::string &t)$/;"	f	class:leveldb::EnvWrapper
CopyFile	util/env_posix.cc	/^  virtual Status CopyFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon13::PosixEnv
CopyState	util/status.cc	/^const char* Status::CopyState(const char* state) {$/;"	f	class:leveldb::Status
CopyString	db/c.cc	/^static char* CopyString(const std::string& str) {$/;"	f	file:
Corrupt	db/corruption_test.cc	/^    Corrupt(FileType filetype, int offset, int bytes_to_corrupt)$/;"	f	class:leveldb::CorruptionTest
Corruption	db/leveldb_main.cc	/^  virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::__anon30::CorruptionReporter
Corruption	db/log_test.cc	/^    virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::log::LogTest::ReportCollector
Corruption	include/pebblesdb/status.h	/^  static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Corruption	leveldb-verify.cc	/^  virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::__anon31::CorruptionReporter
CorruptionError	table/block.cc	/^  void CorruptionError() {$/;"	f	class:leveldb::Block::Iter	file:
CorruptionReporter	db/leveldb_main.cc	/^class CorruptionReporter : public log::Reader::Reporter {$/;"	c	namespace:leveldb::__anon30	file:
CorruptionReporter	leveldb-verify.cc	/^class CorruptionReporter : public log::Reader::Reporter {$/;"	c	namespace:leveldb::__anon31	file:
CorruptionTest	db/corruption_test.cc	/^    CorruptionTest()$/;"	f	class:leveldb::CorruptionTest
CorruptionTest	db/corruption_test.cc	/^class CorruptionTest$/;"	c	namespace:leveldb	file:
Count	db/write_batch.cc	/^int WriteBatch::Count() const {$/;"	f	class:leveldb::WriteBatch
Count	db/write_batch.cc	/^int WriteBatchInternal::Count(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
CountFiles	db/db_test.cc	/^  int CountFiles() {$/;"	f	class:leveldb::DBTest
Crc32c	db/db_bench.cc	/^  void Crc32c(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
CreateDir	helpers/memenv/memenv.cc	/^  virtual Status CreateDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon9::InMemoryEnv
CreateDir	include/pebblesdb/env.h	/^    CreateDir(const std::string &d)$/;"	f	class:leveldb::EnvWrapper
CreateDir	util/env_posix.cc	/^  virtual Status CreateDir(const std::string& name) {$/;"	f	class:leveldb::__anon13::PosixEnv
CreateFilter	db/c.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	struct:leveldb_filterpolicy_t
CreateFilter	db/dbformat.cc	/^void InternalFilterPolicy::CreateFilter(const Slice* keys, int n,$/;"	f	class:leveldb::InternalFilterPolicy
CreateFilter	table/filter_block_test.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::TestHashFilter
CreateFilter	util/bloom.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::__anon15::BloomFilterPolicy
CreateProcess	libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CrossesBoundary	db/version_set.cc	/^bool Compaction::CrossesBoundary(const ParsedInternalKey& old_key,$/;"	f	class:leveldb::Compaction
CurrentFileName	db/filename.cc	/^std::string CurrentFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
CurrentOptions	db/db_test.cc	/^  Options CurrentOptions() {$/;"	f	class:leveldb::DBTest
CurrentSizeEstimate	table/block_builder.cc	/^size_t BlockBuilder::CurrentSizeEstimate() const {$/;"	f	class:leveldb::BlockBuilder
DATA	Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DB	include/pebblesdb/db.h	/^  DB() { }$/;"	f	class:leveldb::DB
DB	include/pebblesdb/db.h	/^class DB {$/;"	c	namespace:leveldb
DBConstructor	table/table_test.cc	/^  explicit DBConstructor(const Comparator* cmp)$/;"	f	class:leveldb::DBConstructor
DBConstructor	table/table_test.cc	/^class DBConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
DBImpl	db/db_impl.cc	/^DBImpl::DBImpl(const Options& raw_options, const std::string& dbname)$/;"	f	class:leveldb::DBImpl
DBImpl	db/db_impl.h	/^class DBImpl : public DB {$/;"	c	namespace:leveldb
DBIter	db/db_iter.cc	/^  DBIter(DBImpl* db, const Comparator* cmp, Iterator* iter, SequenceNumber s,$/;"	f	class:leveldb::__anon20::DBIter
DBIter	db/db_iter.cc	/^class DBIter: public Iterator {$/;"	c	namespace:leveldb::__anon20	file:
DBState	doc/bench/db_bench_sqlite3.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBState	doc/bench/db_bench_tree_db.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBSynchronize	doc/bench/db_bench_tree_db.cc	/^static void DBSynchronize(kyotocabinet::TreeDB* db_)$/;"	f	file:
DBTest	db/db_test.cc	/^  DBTest() : option_config_(kDefault),$/;"	f	class:leveldb::DBTest
DBTest	db/db_test.cc	/^class DBTest {$/;"	c	namespace:leveldb	file:
DB_TEST	table/table_test.cc	/^  DB_TEST$/;"	e	enum:leveldb::TestType	file:
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I.$/;"	m
DEFINE_uint32	util/gflags_compat.h	17;"	d
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz $(distdir).tar.bz2$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(top_srcdir)\/configure \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(libpebblesdb_la_SOURCES) $(arena_test_SOURCES) \\$/;"	m
DIST_TARGETS	Makefile	/^DIST_TARGETS = dist-bzip2 dist-gzip$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DONE	db/skiplist_test.cc	/^    DONE$/;"	e	enum:leveldb::TestState::ReaderState	file:
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
DebugString	db/dbformat.cc	/^std::string InternalKey::DebugString() const {$/;"	f	class:leveldb::InternalKey
DebugString	db/dbformat.cc	/^std::string ParsedInternalKey::DebugString() const {$/;"	f	class:leveldb::ParsedInternalKey
DebugString	db/version_edit.cc	/^std::string VersionEdit::DebugString() const {$/;"	f	class:leveldb::VersionEdit
DebugString	db/version_set.cc	/^std::string Compaction::DebugString() {$/;"	f	class:leveldb::Compaction
DebugString	db/version_set.cc	/^std::string Version::DebugString() const {$/;"	f	class:leveldb::Version
DebugString	util/timer.h	/^	std::string DebugString() {$/;"	f	class:leveldb::Timer
DecodeEntry	table/block.cc	/^static inline const char* DecodeEntry(const char* p, const char* limit,$/;"	f	namespace:leveldb
DecodeFixed32	util/coding.h	/^inline uint32_t DecodeFixed32(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFixed64	util/coding.h	/^inline uint64_t DecodeFixed64(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFrom	db/dbformat.h	/^  void DecodeFrom(const Slice& s) { rep_.assign(s.data(), s.size()); }$/;"	f	class:leveldb::InternalKey
DecodeFrom	db/version_edit.cc	/^Status VersionEdit::DecodeFrom(const Slice& src) {$/;"	f	class:leveldb::VersionEdit
DecodeFrom	table/format.cc	/^Status BlockHandle::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::BlockHandle
DecodeFrom	table/format.cc	/^Status Footer::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::Footer
DecodeKey	util/cache_test.cc	/^static int DecodeKey(const Slice& k) {$/;"	f	namespace:leveldb
DecodeValue	util/cache_test.cc	/^static int DecodeValue(void* v) { return reinterpret_cast<uintptr_t>(v); }$/;"	f	namespace:leveldb
Default	util/env_posix.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
DelayMilliseconds	db/db_test.cc	/^void DelayMilliseconds(int millis) {$/;"	f	namespace:leveldb::__anon22
Delete	db/db_impl.cc	/^Status DB::Delete(const WriteOptions& opt, const Slice& key) {$/;"	f	class:leveldb::DB
Delete	db/db_impl.cc	/^Status DBImpl::Delete(const WriteOptions& options, const Slice& key) {$/;"	f	class:leveldb::DBImpl
Delete	db/db_test.cc	/^  Status Delete(const std::string& k) {$/;"	f	class:leveldb::DBTest
Delete	db/db_test.cc	/^  virtual Status Delete(const WriteOptions& o, const Slice& key) {$/;"	f	class:leveldb::ModelDB
Delete	db/leveldb_main.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon30::WriteBatchItemPrinter
Delete	db/snapshot.h	/^  void Delete(const SnapshotImpl* s) {$/;"	f	class:leveldb::SnapshotList
Delete	db/write_batch.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon29::GuardInserter
Delete	db/write_batch.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon29::MemTableInserter
Delete	db/write_batch.cc	/^void WriteBatch::Delete(const Slice& key) {$/;"	f	class:leveldb::WriteBatch
Delete	leveldb-verify.cc	/^  virtual void Delete(const Slice& \/*key*\/) {$/;"	f	class:leveldb::__anon31::WriteBatchItemPrinter
DeleteAnSSTFile	db/db_test.cc	/^  bool DeleteAnSSTFile() {$/;"	f	class:leveldb::DBTest
DeleteBlock	table/table.cc	/^static void DeleteBlock(void* arg, void* \/*ignored*\/) {$/;"	f	namespace:leveldb
DeleteCachedBlock	table/table.cc	/^static void DeleteCachedBlock(const Slice& \/*key*\/, void* value) {$/;"	f	namespace:leveldb
DeleteDir	helpers/memenv/memenv.cc	/^  virtual Status DeleteDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon9::InMemoryEnv
DeleteDir	include/pebblesdb/env.h	/^    DeleteDir(const std::string &d)$/;"	f	class:leveldb::EnvWrapper
DeleteDir	util/env_posix.cc	/^  virtual Status DeleteDir(const std::string& name) {$/;"	f	class:leveldb::__anon13::PosixEnv
DeleteEntry	db/table_cache.cc	/^static void DeleteEntry(const Slice& \/*key*\/, void* value) {$/;"	f	namespace:leveldb
DeleteFile	db/version_edit.h	/^  void DeleteFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteFile	helpers/memenv/memenv.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon9::InMemoryEnv
DeleteFile	include/pebblesdb/env.h	/^    DeleteFile(const std::string &f)$/;"	f	class:leveldb::EnvWrapper
DeleteFile	util/env_posix.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon13::PosixEnv
DeleteFileInternal	helpers/memenv/memenv.cc	/^  void DeleteFileInternal(const std::string& fname) {$/;"	f	class:leveldb::__anon9::InMemoryEnv
DeleteGuard	db/version_edit.h	/^  void DeleteGuard(int level, InternalKey guard) {$/;"	f	class:leveldb::VersionEdit
DeleteObsoleteFiles	db/db_impl.cc	/^void DBImpl::DeleteObsoleteFiles() {$/;"	f	class:leveldb::DBImpl
DeleteRandom	db/db_bench.cc	/^  void DeleteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeleteSentinelFile	db/version_edit.h	/^  void DeleteSentinelFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteSeq	db/db_bench.cc	/^  void DeleteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeletedFileSet	db/version_edit.h	/^  typedef std::set< std::pair<int, uint64_t> > DeletedFileSet;$/;"	t	class:leveldb::VersionEdit
DeletedGuardSet	db/version_edit.h	/^  typedef std::set< std::pair<int, InternalKey>, BySmallestPair> DeletedGuardSet;$/;"	t	class:leveldb::VersionEdit
Deleter	util/cache_test.cc	/^  static void Deleter(const Slice& key, void* v) {$/;"	f	class:leveldb::CacheTest
DescriptorFileName	db/filename.cc	/^std::string DescriptorFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
Destroy	table/filter_block.cc	/^void FileLevelFilterBuilder::Destroy() {$/;"	f	class:leveldb::FileLevelFilterBuilder
DestroyAndReopen	db/db_test.cc	/^  void DestroyAndReopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
DestroyDB	db/db_impl.cc	/^Status DestroyDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
Direction	db/db_iter.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon20::DBIter	file:
Direction	table/merger.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon5::MergingIterator	file:
DistGetKeyID	db/db_bench.cc	/^    int64_t DistGetKeyID(int64_t ini_rand, double key_dist_a,$/;"	f	class:leveldb::Benchmark::GenerateTwoTermExpKeys
DoCompactionWorkGuards	db/db_impl.cc	/^Status DBImpl::DoCompactionWorkGuards(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
DoDelete	db/db_bench.cc	/^  void DoDelete(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoReads	db/autocompact_test.cc	/^void AutoCompactTest::DoReads(int n) {$/;"	f	class:leveldb::AutoCompactTest
DoWrite	db/db_bench.cc	/^  void DoWrite(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoWriteStringToFile	util/env.cc	/^static Status DoWriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
Done	db/db_bench.cc	/^  bool Done(int64_t increment) {$/;"	f	class:leveldb::Benchmark::Duration
DroppedBytes	db/log_test.cc	/^  size_t DroppedBytes() const {$/;"	f	class:leveldb::log::LogTest
DumpDescriptor	db/leveldb_main.cc	/^bool DumpDescriptor(Env* env, const std::string& fname) {$/;"	f	namespace:leveldb::__anon30
DumpDescriptor	leveldb-verify.cc	/^bool DumpDescriptor(Env* env, const std::string& fname) {$/;"	f	namespace:leveldb::__anon31
DumpFile	db/leveldb_main.cc	/^bool DumpFile(Env* env, const std::string& fname) {$/;"	f	namespace:leveldb::__anon30
DumpFile	leveldb-verify.cc	/^bool DumpFile(Env* env, const std::string& fname) {$/;"	f	namespace:leveldb::__anon31
DumpFileCounts	db/db_test.cc	/^  void DumpFileCounts(const char* label) {$/;"	f	class:leveldb::DBTest
DumpFilter	util/bloom_test.cc	/^  void DumpFilter() {$/;"	f	class:leveldb::BloomTest
DumpLog	db/leveldb_main.cc	/^bool DumpLog(Env* env, const std::string& fname) {$/;"	f	namespace:leveldb::__anon30
DumpLog	leveldb-verify.cc	/^bool DumpLog(Env* env, const std::string& fname) {$/;"	f	namespace:leveldb::__anon31
DumpSSTableList	db/db_test.cc	/^  std::string DumpSSTableList() {$/;"	f	class:leveldb::DBTest
DumpTable	db/leveldb_main.cc	/^bool DumpTable(Env* env, const std::string& fname) {$/;"	f	namespace:leveldb::__anon30
DumpTable	leveldb-verify.cc	/^bool DumpTable(Env* env, const std::string& fname) {$/;"	f	namespace:leveldb::__anon31
Duration	db/db_bench.cc	/^  Duration(uint64_t max_seconds, int64_t max_ops, int64_t ops_per_stage = 0) {$/;"	f	class:leveldb::Benchmark::Duration
Duration	db/db_bench.cc	/^  class Duration {$/;"	c	class:leveldb::Benchmark	file:
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
END	util/timer.h	/^	END$/;"	e	enum:leveldb::TimerStep
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXCLUSIVE_LOCKS_REQUIRED	port/thread_annotations.h	12;"	d
EXCLUSIVE_LOCK_FUNCTION	port/thread_annotations.h	36;"	d
EXCLUSIVE_LOCK_FUNCTION	util/mutexlock.h	/^  explicit MutexLock(port::Mutex *mu) EXCLUSIVE_LOCK_FUNCTION(mu)$/;"	f	class:leveldb::MutexLock
EXCLUSIVE_TRYLOCK_FUNCTION	port/thread_annotations.h	44;"	d
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXISTING	doc/bench/db_bench_sqlite3.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXISTING	doc/bench/db_bench_tree_db.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXTRA_CFLAGS	Makefile	/^EXTRA_CFLAGS = -fno-builtin-memcmp -fno-builtin-memcmp$/;"	m
EXTRA_DIST	Makefile	/^EXTRA_DIST = AUTHORS doc\/benchmark.html doc\/doc.css doc\/impl.html \\$/;"	m
EXTRA_PROGRAMS	Makefile	/^EXTRA_PROGRAMS = benchmark$(EXEEXT) leveldb-dump-all$(EXEEXT) \\$/;"	m
EmitPhysicalRecordAt	db/log_writer.cc	/^Status Writer::EmitPhysicalRecordAt(RecordType t, const char* ptr, uint64_t offset, size_t n) {$/;"	f	class:leveldb::log::Writer
EmptyIterator	table/iterator.cc	/^  EmptyIterator(const Status& s) : status_(s) { }$/;"	f	class:leveldb::__anon3::EmptyIterator
EmptyIterator	table/iterator.cc	/^class EmptyIterator : public Iterator {$/;"	c	namespace:leveldb::__anon3	file:
Encode	db/dbformat.h	/^  Slice Encode() const {$/;"	f	class:leveldb::InternalKey
EncodeFixed32	util/coding.cc	/^void EncodeFixed32(char* buf, uint32_t value) {$/;"	f	namespace:leveldb
EncodeFixed64	util/coding.cc	/^void EncodeFixed64(char* buf, uint64_t value) {$/;"	f	namespace:leveldb
EncodeKey	db/memtable.cc	/^static const char* EncodeKey(std::string* scratch, const Slice& target) {$/;"	f	namespace:leveldb
EncodeKey	util/cache_test.cc	/^static std::string EncodeKey(int k) {$/;"	f	namespace:leveldb
EncodeTo	db/version_edit.cc	/^void VersionEdit::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::VersionEdit
EncodeTo	table/format.cc	/^void BlockHandle::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::BlockHandle
EncodeTo	table/format.cc	/^void Footer::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::Footer
EncodeValue	util/cache_test.cc	/^static void* EncodeValue(uintptr_t v) { return reinterpret_cast<void*>(v); }$/;"	f	namespace:leveldb
EncodeVarint32	util/coding.cc	/^char* EncodeVarint32(char* dst, uint32_t v) {$/;"	f	namespace:leveldb
EncodeVarint64	util/coding.cc	/^char* EncodeVarint64(char* dst, uint64_t v) {$/;"	f	namespace:leveldb
Env	include/pebblesdb/env.h	/^    Env()$/;"	f	class:leveldb::Env
Env	include/pebblesdb/env.h	/^class Env$/;"	c	namespace:leveldb
EnvPosixTest	util/env_test.cc	/^  EnvPosixTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvPosixTest
EnvPosixTest	util/env_test.cc	/^class EnvPosixTest {$/;"	c	namespace:leveldb	file:
EnvWrapper	include/pebblesdb/env.h	/^    explicit EnvWrapper(Env *t) : target_(t)$/;"	f	class:leveldb::EnvWrapper
EnvWrapper	include/pebblesdb/env.h	/^class EnvWrapper : public Env$/;"	c	namespace:leveldb
Equal	db/skiplist.h	/^  bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }$/;"	f	class:leveldb::SkipList
Erase	util/cache.cc	/^  virtual void Erase(const Slice& key) {$/;"	f	class:leveldb::__anon16::ShardedLRUCache
Erase	util/cache.cc	/^void LRUCache::Erase(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon16::LRUCache
Erase	util/cache_test.cc	/^  void Erase(int key) {$/;"	f	class:leveldb::CacheTest
ErrorCheck	doc/bench/db_bench_sqlite3.cc	/^static void ErrorCheck(int status) {$/;"	f	file:
ErrorEnv	util/testutil.h	/^  ErrorEnv() : EnvWrapper(Env::Default()),$/;"	f	class:leveldb::test::ErrorEnv
ErrorEnv	util/testutil.h	/^class ErrorEnv : public EnvWrapper {$/;"	c	namespace:leveldb::test
EscapeString	util/logging.cc	/^std::string EscapeString(const Slice& value) {$/;"	f	namespace:leveldb
Evict	db/table_cache.cc	/^void TableCache::Evict(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
ExecErrorCheck	doc/bench/db_bench_sqlite3.cc	/^static void ExecErrorCheck(int status, char *err_msg) {$/;"	f	file:
Extend	util/crc32c.cc	/^extern uint32_t Extend(uint32_t init_crc, const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ExtractMetaData	db/repair.cc	/^  void ExtractMetaData() {$/;"	f	class:leveldb::__anon27::Repairer	file:
ExtractUserKey	db/dbformat.h	/^inline Slice ExtractUserKey(const Slice& internal_key) {$/;"	f	namespace:leveldb
ExtractValueType	db/dbformat.h	/^inline ValueType ExtractValueType(const Slice& internal_key) {$/;"	f	namespace:leveldb
Extractor	db/skiplist_test.cc	/^struct Extractor {$/;"	s	namespace:leveldb	file:
FALLTHROUGH_INTENDED	util/hash.cc	13;"	d	file:
FGREP	Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FILE_LEVEL_FILTER	db/version_set.h	33;"	d
FLAGS_WAL_enabled	doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_WAL_enabled = true;$/;"	v	file:
FLAGS_base_key	db/db_bench.cc	/^static int FLAGS_base_key = 0;$/;"	v	file:
FLAGS_benchmark_read_rate_limit	db/db_bench.cc	/^static uint64_t FLAGS_benchmark_read_rate_limit = 0;$/;"	v	file:
FLAGS_benchmarks	db/db_bench.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_block_size	db/db_bench.cc	/^static int FLAGS_block_size = 0;$/;"	v	file:
FLAGS_bloom_bits	db/db_bench.cc	/^static int FLAGS_bloom_bits = 10;$/;"	v	file:
FLAGS_cache_size	db/db_bench.cc	/^static int FLAGS_cache_size = -1;$/;"	v	file:
FLAGS_cache_size	doc/bench/db_bench_tree_db.cc	/^static int FLAGS_cache_size = 4194304;$/;"	v	file:
FLAGS_compression	doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_compression = true;$/;"	v	file:
FLAGS_compression_ratio	db/db_bench.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	doc/bench/db_bench_sqlite3.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	doc/bench/db_bench_tree_db.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_db	db/db_bench.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_duration	db/db_bench.cc	/^static int32_t FLAGS_duration = 0;$/;"	v	file:
FLAGS_histogram	db/db_bench.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_iter_k	db/db_bench.cc	/^static double FLAGS_iter_k = 0.0;$/;"	v	file:
FLAGS_iter_sigma	db/db_bench.cc	/^static double FLAGS_iter_sigma = 0.0;$/;"	v	file:
FLAGS_iter_theta	db/db_bench.cc	/^static double FLAGS_iter_theta = 0.0;$/;"	v	file:
FLAGS_key_dist_a	db/db_bench.cc	/^static double FLAGS_key_dist_a = 0.0;$/;"	v	file:
FLAGS_key_dist_b	db/db_bench.cc	/^static double FLAGS_key_dist_b = 0.0;$/;"	v	file:
FLAGS_key_size	db/db_bench.cc	/^static int32_t FLAGS_key_size = 16;$/;"	v	file:
FLAGS_keyrange_dist_a	db/db_bench.cc	/^static double FLAGS_keyrange_dist_a = 0.0;$/;"	v	file:
FLAGS_keyrange_dist_b	db/db_bench.cc	/^static double FLAGS_keyrange_dist_b = 0.0;$/;"	v	file:
FLAGS_keyrange_dist_c	db/db_bench.cc	/^static double FLAGS_keyrange_dist_c = 0.0;$/;"	v	file:
FLAGS_keyrange_dist_d	db/db_bench.cc	/^static double FLAGS_keyrange_dist_d = 0.0;$/;"	v	file:
FLAGS_keyrange_num	db/db_bench.cc	/^static int64_t FLAGS_keyrange_num = 1;$/;"	v	file:
FLAGS_keys_per_prefix	db/db_bench.cc	/^static int64_t FLAGS_keys_per_prefix = 0;$/;"	v	file:
FLAGS_mix_accesses	db/db_bench.cc	/^static int64_t FLAGS_mix_accesses = -1;$/;"	v	file:
FLAGS_mix_ave_kv_size	db/db_bench.cc	/^static int64_t FLAGS_mix_ave_kv_size = 512;$/;"	v	file:
FLAGS_mix_get_ratio	db/db_bench.cc	/^static double FLAGS_mix_get_ratio = 1.0;$/;"	v	file:
FLAGS_mix_max_scan_len	db/db_bench.cc	/^static int64_t FLAGS_mix_max_scan_len = 10000;$/;"	v	file:
FLAGS_mix_max_value_size	db/db_bench.cc	/^static int64_t FLAGS_mix_max_value_size = 1024;$/;"	v	file:
FLAGS_mix_put_ratio	db/db_bench.cc	/^static double FLAGS_mix_put_ratio = 0.0;$/;"	v	file:
FLAGS_mix_seek_ratio	db/db_bench.cc	/^static double FLAGS_mix_seek_ratio = 0.0;$/;"	v	file:
FLAGS_num	db/db_bench.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	doc/bench/db_bench_tree_db.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num_next	db/db_bench.cc	/^static int FLAGS_num_next = 1;$/;"	v	file:
FLAGS_num_pages	doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num_pages = 4096;$/;"	v	file:
FLAGS_open_files	db/db_bench.cc	/^static int FLAGS_open_files = 0;$/;"	v	file:
FLAGS_ops_between_duration_checks	db/db_bench.cc	/^static int32_t FLAGS_ops_between_duration_checks = 1000;$/;"	v	file:
FLAGS_page_size	doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_page_size	doc/bench/db_bench_tree_db.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_prefix_size	db/db_bench.cc	/^static int32_t FLAGS_prefix_size = 0;$/;"	v	file:
FLAGS_read_threads	db/db_bench.cc	/^static int FLAGS_read_threads = 1;$/;"	v	file:
FLAGS_reads	db/db_bench.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	doc/bench/db_bench_tree_db.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_seed	db/db_bench.cc	/^static int64_t FLAGS_seed = 0;$/;"	v	file:
FLAGS_sine_mix_rate	db/db_bench.cc	/^static bool FLAGS_sine_mix_rate = false;$/;"	v	file:
FLAGS_sine_mix_rate_noise	db/db_bench.cc	/^static double FLAGS_sine_mix_rate_noise = 0.0;$/;"	v	file:
FLAGS_threads	db/db_bench.cc	/^static int FLAGS_threads = 1;$/;"	v	file:
FLAGS_transaction	doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_transaction = true;$/;"	v	file:
FLAGS_use_existing_db	db/db_bench.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_keys	db/db_bench.cc	/^static bool FLAGS_use_existing_keys = false;$/;"	v	file:
FLAGS_value_k	db/db_bench.cc	/^static double FLAGS_value_k = 0.0;$/;"	v	file:
FLAGS_value_sigma	db/db_bench.cc	/^static double FLAGS_value_sigma = 0.0;$/;"	v	file:
FLAGS_value_size	db/db_bench.cc	/^static int FLAGS_value_size = 1024;$/;"	v	file:
FLAGS_value_size	doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	doc/bench/db_bench_tree_db.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_theta	db/db_bench.cc	/^static double FLAGS_value_theta = 0.0;$/;"	v	file:
FLAGS_verify_checksum	db/db_bench.cc	/^static bool FLAGS_verify_checksum = true;$/;"	v	file:
FLAGS_write_buffer_size	db/db_bench.cc	/^static int FLAGS_write_buffer_size = 0;$/;"	v	file:
FLAGS_write_threads	db/db_bench.cc	/^static int FLAGS_write_threads = 1;$/;"	v	file:
FORCE_COMPACT_SIZE_THRESHOLD_IN_MB	db/version_set.cc	52;"	d	file:
FORCE_INLINE	db/murmurhash3.cc	32;"	d	file:
FORCE_INLINE__forceinline	db/murmurhash3.cc	19;"	d	file:
FRESH	doc/bench/db_bench_sqlite3.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRESH	doc/bench/db_bench_tree_db.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FalsePositiveRate	util/bloom_test.cc	/^  double FalsePositiveRate() {$/;"	f	class:leveldb::BloomTest
FileExists	helpers/memenv/memenv.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon9::InMemoryEnv
FileExists	include/pebblesdb/env.h	/^    FileExists(const std::string &f)$/;"	f	class:leveldb::EnvWrapper
FileExists	util/env_posix.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon13::PosixEnv
FileLevelFilterBuilder	table/filter_block.cc	/^FileLevelFilterBuilder::FileLevelFilterBuilder(const FilterPolicy* policy) {$/;"	f	class:leveldb::FileLevelFilterBuilder
FileLevelFilterBuilder	table/filter_block.h	/^class FileLevelFilterBuilder {$/;"	c	namespace:leveldb
FileLock	include/pebblesdb/env.h	/^    FileLock()$/;"	f	class:leveldb::FileLock
FileLock	include/pebblesdb/env.h	/^class FileLock$/;"	c	namespace:leveldb
FileMetaData	db/version_edit.h	/^FileMetaData() : num_entries(0), refs(0), allowed_seeks(1 << 30), number(0), file_size(0), smallest(), largest(), guard() { }$/;"	f	struct:leveldb::FileMetaData
FileMetaData	db/version_edit.h	/^struct FileMetaData {$/;"	s	namespace:leveldb
FileNameTest	db/filename_test.cc	/^class FileNameTest { };$/;"	c	namespace:leveldb	file:
FileSet	db/version_set.cc	/^  typedef std::set<FileMetaData*, BySmallestKey> FileSet;$/;"	t	class:leveldb::VersionSet::Builder	file:
FileSize	table/table_builder.cc	/^uint64_t TableBuilder::FileSize() const {$/;"	f	class:leveldb::TableBuilder
FileState	helpers/memenv/memenv.cc	/^  FileState() : refs_(0), size_(0) {}$/;"	f	class:leveldb::__anon9::FileState
FileState	helpers/memenv/memenv.cc	/^class FileState {$/;"	c	namespace:leveldb::__anon9	file:
FileSystem	helpers/memenv/memenv.cc	/^  typedef std::map<std::string, FileState*> FileSystem;$/;"	t	class:leveldb::__anon9::InMemoryEnv	file:
FileType	db/filename.h	/^enum FileType {$/;"	g	namespace:leveldb
FilesPerLevel	db/db_test.cc	/^  std::string FilesPerLevel() {$/;"	f	class:leveldb::DBTest
FillLevels	db/db_test.cc	/^  void FillLevels(const std::string& smallest, const std::string& largest) {$/;"	f	class:leveldb::DBTest
FilterBlockBuilder	table/filter_block.cc	/^FilterBlockBuilder::FilterBlockBuilder(const FilterPolicy* policy)$/;"	f	class:leveldb::FilterBlockBuilder
FilterBlockBuilder	table/filter_block.h	/^class FilterBlockBuilder {$/;"	c	namespace:leveldb
FilterBlockReader	table/filter_block.cc	/^FilterBlockReader::FilterBlockReader(const FilterPolicy* policy,$/;"	f	class:leveldb::FilterBlockReader
FilterBlockReader	table/filter_block.h	/^class FilterBlockReader {$/;"	c	namespace:leveldb
FilterBlockTest	table/filter_block_test.cc	/^class FilterBlockTest {$/;"	c	namespace:leveldb	file:
FilterCreate	db/c_test.c	/^static char* FilterCreate($/;"	f	file:
FilterDestroy	db/c_test.c	/^static void FilterDestroy(void* arg) { }$/;"	f	file:
FilterKeyMatch	db/c_test.c	/^unsigned char FilterKeyMatch($/;"	f
FilterName	db/c_test.c	/^static const char* FilterName(void* arg) {$/;"	f	file:
FilterPolicy	include/pebblesdb/filter_policy.h	/^class FilterPolicy {$/;"	c	namespace:leveldb
FilterSize	util/bloom_test.cc	/^  size_t FilterSize() const {$/;"	f	class:leveldb::BloomTest
Finalize	db/version_set.cc	/^void VersionSet::Finalize(Version* v, Version* current_) {$/;"	f	class:leveldb::VersionSet
Find	db/version_set_test.cc	/^  int Find(const char* key) {$/;"	f	class:leveldb::FindFileTest
FindFile	db/version_set.cc	/^int FindFile(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindFileTest	db/version_set_test.cc	/^  FindFileTest() : disjoint_sorted_files_(true) { }$/;"	f	class:leveldb::FindFileTest
FindFileTest	db/version_set_test.cc	/^class FindFileTest {$/;"	c	namespace:leveldb	file:
FindFiles	db/repair.cc	/^  Status FindFiles() {$/;"	f	class:leveldb::__anon27::Repairer	file:
FindGreaterOrEqual	db/skiplist.h	/^typename SkipList<Key,Comparator,Extractor>::Node* SkipList<Key,Comparator,Extractor>::FindGreaterOrEqual(const Key& key, Node** prev, Node** obs)$/;"	f	class:leveldb::SkipList
FindGuard	db/version_set.cc	/^int FindGuard(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindLargest	table/merger.cc	/^void MergingIterator::FindLargest() {$/;"	f	class:leveldb::__anon5::MergingIterator
FindLast	db/skiplist.h	/^typename SkipList<Key,Comparator,Extractor>::Node* SkipList<Key,Comparator,Extractor>::FindLast()$/;"	f	class:leveldb::SkipList
FindLessThan	db/skiplist.h	/^SkipList<Key,Comparator,Extractor>::FindLessThan(const Key& key) const {$/;"	f	class:leveldb::SkipList
FindNextUserEntry	db/db_iter.cc	/^void DBIter::FindNextUserEntry(bool skipping, std::string* skip) {$/;"	f	class:leveldb::__anon20::DBIter
FindPointer	util/cache.cc	/^  LRUHandle** FindPointer(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon16::HandleTable	file:
FindPrevUserEntry	db/db_iter.cc	/^void DBIter::FindPrevUserEntry() {$/;"	f	class:leveldb::__anon20::DBIter
FindShortSuccessor	db/c.cc	/^  virtual void FindShortSuccessor(std::string* \/*key*\/) const { }$/;"	f	struct:leveldb_comparator_t
FindShortSuccessor	db/dbformat.cc	/^void InternalKeyComparator::FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::InternalKeyComparator
FindShortSuccessor	table/table_test.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon6::ReverseKeyComparator
FindShortSuccessor	util/comparator.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon11::BytewiseComparatorImpl
FindShortestSeparator	db/c.cc	/^  virtual void FindShortestSeparator(std::string*, const Slice&) const { }$/;"	f	struct:leveldb_comparator_t
FindShortestSeparator	db/dbformat.cc	/^void InternalKeyComparator::FindShortestSeparator($/;"	f	class:leveldb::InternalKeyComparator
FindShortestSeparator	table/table_test.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon6::ReverseKeyComparator
FindShortestSeparator	util/comparator.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon11::BytewiseComparatorImpl
FindSmallest	table/merger.cc	/^void MergingIterator::FindSmallest() {$/;"	f	class:leveldb::__anon5::MergingIterator
FindTable	db/table_cache.cc	/^Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,$/;"	f	class:leveldb::TableCache
Finish	table/block_builder.cc	/^Slice BlockBuilder::Finish() {$/;"	f	class:leveldb::BlockBuilder
Finish	table/filter_block.cc	/^Slice FilterBlockBuilder::Finish() {$/;"	f	class:leveldb::FilterBlockBuilder
Finish	table/table_builder.cc	/^Status TableBuilder::Finish() {$/;"	f	class:leveldb::TableBuilder
Finish	table/table_test.cc	/^  void Finish(const Options& options,$/;"	f	class:leveldb::Constructor
FinishCompactionOutputFile	db/db_impl.cc	/^Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
FinishFileCompletion	db/builder.cc	/^void FinishFileCompletion(Status s,$/;"	f	namespace:leveldb
FinishImpl	table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::BlockConstructor
FinishImpl	table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::DBConstructor
FinishImpl	table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::MemTableConstructor
FinishImpl	table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::TableConstructor
FinishedSingleOp	db/db_bench.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::__anon19::Stats
FinishedSingleOp	doc/bench/db_bench_sqlite3.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FinishedSingleOp	doc/bench/db_bench_tree_db.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FixChecksum	db/log_test.cc	/^  void FixChecksum(int header_offset, int len) {$/;"	f	class:leveldb::log::LogTest
Flush	db/log_test.cc	/^    virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Flush	table/table_builder.cc	/^void TableBuilder::Flush() {$/;"	f	class:leveldb::TableBuilder
Flush	table/table_test.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Flush	util/env_posix.cc	/^  Status Flush() {$/;"	f	class:leveldb::__anon13::PosixMmapFile
Flush	util/env_posix.cc	/^  virtual Status Flush() {$/;"	f	class:leveldb::__anon13::PosixWritableFile
Footer	table/format.h	/^  Footer()$/;"	f	class:leveldb::Footer
Footer	table/format.h	/^class Footer {$/;"	c	namespace:leveldb
ForEachOverlapping	db/version_set.cc	/^void Version::ForEachOverlapping(Slice user_key, Slice internal_key,$/;"	f	class:leveldb::Version
ForceError	db/log_test.cc	/^  void ForceError() {$/;"	f	class:leveldb::log::LogTest
FormatTest	db/dbformat_test.cc	/^class FormatTest { };$/;"	c	namespace:leveldb	file:
Free	db/c_test.c	/^static void Free(char** ptr) {$/;"	f	file:
GET_CHECK_GUARD_FILES	util/timer.h	/^	GET_CHECK_GUARD_FILES,$/;"	e	enum:leveldb::TimerStep
GET_CHECK_SENTINEL_FILES	util/timer.h	/^	GET_CHECK_SENTINEL_FILES,$/;"	e	enum:leveldb::TimerStep
GET_CLEAR_TMP2_SET_G	util/timer.h	/^	GET_CLEAR_TMP2_SET_G,$/;"	e	enum:leveldb::TimerStep
GET_FILE_LEVEL_FILTER_CHECK	util/timer.h	/^	GET_FILE_LEVEL_FILTER_CHECK,$/;"	e	enum:leveldb::TimerStep
GET_FIND_GUARD	util/timer.h	/^	GET_FIND_GUARD,$/;"	e	enum:leveldb::TimerStep
GET_FIND_GUARD_PARSE_INTERNAL_KEY	util/timer.h	/^	GET_FIND_GUARD_PARSE_INTERNAL_KEY,$/;"	e	enum:leveldb::TimerStep
GET_FIND_LIST_OF_FILES	util/timer.h	/^	GET_FIND_LIST_OF_FILES,$/;"	e	enum:leveldb::TimerStep
GET_LOCK_AFTER_BUILD_LEVEL0_TABLES	util/timer.h	/^	GET_LOCK_AFTER_BUILD_LEVEL0_TABLES,$/;"	e	enum:leveldb::TimerStep
GET_OVERALL_TIME	util/timer.h	/^	GET_OVERALL_TIME,$/;"	e	enum:leveldb::TimerStep
GET_SORT_GUARD_FILES	util/timer.h	/^	GET_SORT_GUARD_FILES,$/;"	e	enum:leveldb::TimerStep
GET_SORT_SENTINEL_FILES	util/timer.h	/^	GET_SORT_SENTINEL_FILES,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_CREATE_THREAD	util/timer.h	/^	GET_TABLE_CACHE_CREATE_THREAD,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_FILTER_CHECK	util/timer.h	/^	GET_TABLE_CACHE_FILTER_CHECK,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_FIND_TABLE	util/timer.h	/^	GET_TABLE_CACHE_FIND_TABLE,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_GET	util/timer.h	/^	GET_TABLE_CACHE_GET,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_GET_FROM_DISK	util/timer.h	/^	GET_TABLE_CACHE_GET_FROM_DISK,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_GET_INSERT_INTO_CACHE	util/timer.h	/^	GET_TABLE_CACHE_GET_INSERT_INTO_CACHE,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_GET_NEW_RANDOM_ACCESS_FILE	util/timer.h	/^	GET_TABLE_CACHE_GET_NEW_RANDOM_ACCESS_FILE,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_GET_TABLE_OPEN	util/timer.h	/^	GET_TABLE_CACHE_GET_TABLE_OPEN,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_GET_TABLE_OPEN_FOOTER_READ	util/timer.h	/^	GET_TABLE_CACHE_GET_TABLE_OPEN_FOOTER_READ,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_GET_TABLE_OPEN_INDEX_BLOCK_READ	util/timer.h	/^	GET_TABLE_CACHE_GET_TABLE_OPEN_INDEX_BLOCK_READ,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_GET_TABLE_OPEN_READ_META	util/timer.h	/^	GET_TABLE_CACHE_GET_TABLE_OPEN_READ_META,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_INDEX_ITER_SEEK	util/timer.h	/^	GET_TABLE_CACHE_INDEX_ITER_SEEK,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_INTERNAL_GET	util/timer.h	/^	GET_TABLE_CACHE_INTERNAL_GET,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_NUM_DIRECT_CALLS	util/timer.h	/^	GET_TABLE_CACHE_NUM_DIRECT_CALLS,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_NUM_THREADS_SIGNALLED	util/timer.h	/^	GET_TABLE_CACHE_NUM_THREADS_SIGNALLED,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_READ_DATA_BLOCK	util/timer.h	/^	GET_TABLE_CACHE_READ_DATA_BLOCK,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_SIGNAL_READ_THREADS	util/timer.h	/^	GET_TABLE_CACHE_SIGNAL_READ_THREADS,$/;"	e	enum:leveldb::TimerStep
GET_TABLE_CACHE_WAIT_FOR_READ_THREADS	util/timer.h	/^	GET_TABLE_CACHE_WAIT_FOR_READ_THREADS,$/;"	e	enum:leveldb::TimerStep
GET_TIME_TO_CHECK_MEM_IMM	util/timer.h	/^	GET_TIME_TO_CHECK_MEM_IMM,$/;"	e	enum:leveldb::TimerStep
GET_TIME_TO_CHECK_VERSION	util/timer.h	/^	GET_TIME_TO_CHECK_VERSION,$/;"	e	enum:leveldb::TimerStep
GET_TIME_TO_FINISH_UNREF	util/timer.h	/^	GET_TIME_TO_FINISH_UNREF,$/;"	e	enum:leveldb::TimerStep
GET_TIME_TO_GET_MUTEX	util/timer.h	/^	GET_TIME_TO_GET_MUTEX,$/;"	e	enum:leveldb::TimerStep
GET_TIME_TO_LOCK_MUTEX	util/timer.h	/^	GET_TIME_TO_LOCK_MUTEX,$/;"	e	enum:leveldb::TimerStep
GET_TIME_TO_REF_MEMS	util/timer.h	/^	GET_TIME_TO_REF_MEMS,$/;"	e	enum:leveldb::TimerStep
GFLAGS_NAMESPACE	util/gflags_compat.h	11;"	d
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
Generate	db/db_bench.cc	/^  Slice Generate(size_t len) {$/;"	f	class:leveldb::__anon19::RandomGenerator
Generate	doc/bench/db_bench_sqlite3.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon33::RandomGenerator
Generate	doc/bench/db_bench_tree_db.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon32::RandomGenerator
GenerateFilter	table/filter_block.cc	/^std::string* FileLevelFilterBuilder::GenerateFilter() {$/;"	f	class:leveldb::FileLevelFilterBuilder
GenerateFilter	table/filter_block.cc	/^void FilterBlockBuilder::GenerateFilter() {$/;"	f	class:leveldb::FilterBlockBuilder
GenerateKeyFromInt	db/db_bench.cc	/^  void GenerateKeyFromInt(uint64_t v, int64_t num_keys, Slice* key) {$/;"	f	class:leveldb::Benchmark	file:
GenerateTwoTermExpKeys	db/db_bench.cc	/^    GenerateTwoTermExpKeys() {$/;"	f	class:leveldb::Benchmark::GenerateTwoTermExpKeys
GenerateTwoTermExpKeys	db/db_bench.cc	/^  class GenerateTwoTermExpKeys {$/;"	c	class:leveldb::Benchmark	file:
Get	db/db_impl.cc	/^Status DBImpl::Get(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
Get	db/db_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::DBTest
Get	db/db_test.cc	/^  virtual Status Get(const ReadOptions& options,$/;"	f	class:leveldb::ModelDB
Get	db/memtable.cc	/^bool MemTable::Get(const LookupKey& key, std::string* value, Status* s) {$/;"	f	class:leveldb::MemTable
Get	db/skiplist_test.cc	/^    intptr_t Get(int k) {$/;"	f	struct:leveldb::ConcurrentTest::State
Get	db/table_cache.cc	/^Status TableCache::Get(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
Get	db/version_set.cc	/^Status Version::Get(const ReadOptions& options,$/;"	f	class:leveldb::Version
GetAllowed	util/env_posix.cc	/^  intptr_t GetAllowed() const {$/;"	f	class:leveldb::__anon13::MmapLimiter	file:
GetApproximateSizes	db/db_impl.cc	/^void DBImpl::GetApproximateSizes($/;"	f	class:leveldb::DBImpl
GetApproximateSizes	db/db_test.cc	/^  virtual void GetApproximateSizes(const Range* r, int n, uint64_t* sizes) {$/;"	f	class:leveldb::ModelDB
GetChildren	helpers/memenv/memenv.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon9::InMemoryEnv
GetChildren	include/pebblesdb/env.h	/^    GetChildren(const std::string &dir, std::vector<std::string> *r)$/;"	f	class:leveldb::EnvWrapper
GetChildren	util/env_posix.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon13::PosixEnv
GetCompactionBoundaries	db/version_set.cc	/^void VersionSet::GetCompactionBoundaries(Version* v,$/;"	f	class:leveldb::VersionSet
GetCompleteGuardsAtLevel	db/version_set.cc	/^std::vector<GuardMetaData*> VersionSet::GetCompleteGuardsAtLevel(unsigned level) {$/;"	f	class:leveldb::VersionSet
GetCompleteGuardsAtLevel	db/version_set.h	/^  std::vector<GuardMetaData*> GetCompleteGuardsAtLevel(unsigned level) {$/;"	f	class:leveldb::Version
GetCurrentThreadId	db/version_set.h	/^  pthread_t GetCurrentThreadId() const {$/;"	f	class:leveldb::VersionSet
GetCurrentVersionState	db/db_impl.cc	/^Status DBImpl::GetCurrentVersionState(std::string* value) {$/;"	f	class:leveldb::DBImpl
GetCurrentVersionState	db/db_test.cc	/^  virtual Status GetCurrentVersionState(std::string* value) {$/;"	f	class:leveldb::ModelDB
GetCurrentVersionState	db/version_set.cc	/^std::string VersionSet::GetCurrentVersionState() {$/;"	f	class:leveldb::VersionSet
GetCurrentVersionState	db/version_set.h	/^  std::string GetCurrentVersionState() {$/;"	f	class:leveldb::Version
GetFileIterator	db/version_set.cc	/^static Iterator* GetFileIterator(void* arg,$/;"	f	namespace:leveldb
GetFileMetaDataForFile	db/table_cache.h	/^  FileMetaData* GetFileMetaDataForFile(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
GetFileSize	helpers/memenv/memenv.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* file_size) {$/;"	f	class:leveldb::__anon9::InMemoryEnv
GetFileSize	include/pebblesdb/env.h	/^    GetFileSize(const std::string &f, uint64_t *s)$/;"	f	class:leveldb::EnvWrapper
GetFileSize	util/env_posix.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* size) {$/;"	f	class:leveldb::__anon13::PosixEnv
GetGuardIterator	db/version_set.cc	/^static Iterator* GetGuardIterator(void* arg1, const void* arg2, void* arg3, unsigned level,$/;"	f	namespace:leveldb
GetGuardIteratorParallel	db/version_set.cc	/^static Iterator* GetGuardIteratorParallel(void* arg1, const void* arg2, void* arg3, unsigned level, const ReadOptions& options, const Slice& file_values) {$/;"	f	namespace:leveldb
GetGuardIteratorSeq	db/version_set.cc	/^static Iterator* GetGuardIteratorSeq(void* arg1, const void* arg2, void* arg3, unsigned level, const ReadOptions& options, const Slice& file_values) {$/;"	f	namespace:leveldb
GetGuardsAtLevel	db/version_set.cc	/^std::vector<GuardMetaData*> VersionSet::GetGuardsAtLevel(unsigned level) {$/;"	f	class:leveldb::VersionSet
GetGuardsAtLevel	db/version_set.h	/^  std::vector<GuardMetaData*> GetGuardsAtLevel(unsigned level) {$/;"	f	class:leveldb::Version
GetHeapProfile	port/port_posix.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetIdleTableIteratorThreadIndex	db/version_set.h	/^  int GetIdleTableIteratorThreadIndex(pthread_t current_thread) {$/;"	f	class:leveldb::VersionSet
GetIdleThreadIndex	db/version_set.h	/^  int GetIdleThreadIndex(pthread_t current_thread) {$/;"	f	class:leveldb::VersionSet
GetInternalComparator	db/version_set.h	/^  InternalKeyComparator GetInternalComparator() { return icmp_; }$/;"	f	class:leveldb::VersionSet
GetInternalKey	db/version_edit.cc	/^static bool GetInternalKey(Slice* input, InternalKey* dst) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	db/memtable.cc	/^static Slice GetLengthPrefixedSlice(const char* data) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	util/coding.cc	/^bool GetLengthPrefixedSlice(Slice* input, Slice* result) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	util/coding.cc	/^const char* GetLengthPrefixedSlice(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetLevel	db/version_edit.cc	/^static bool GetLevel(Slice* input, int* level) {$/;"	f	namespace:leveldb
GetNext	db/skiplist.h	/^  void GetNext(unsigned n, uint64_t* c, Node** x) {$/;"	f	struct:leveldb::SkipList::Node
GetNextGroupIndex	db/version_set.h	/^  int GetNextGroupIndex() {$/;"	f	class:leveldb::VersionSet
GetNextTableIteratorGroupIndex	db/version_set.h	/^  int GetNextTableIteratorGroupIndex() {$/;"	f	class:leveldb::VersionSet
GetNumLevelsWithFiles	db/version_set.h	/^  int GetNumLevelsWithFiles(int *min_level, int *max_level, double* max_level_compaction_score) {$/;"	f	class:leveldb::Version
GetOverlappingInputs	db/version_set.cc	/^void Version::GetOverlappingInputs($/;"	f	class:leveldb::Version
GetOverlappingInputsGuards	db/version_set.cc	/^void Version::GetOverlappingInputsGuards($/;"	f	class:leveldb::Version
GetOverlappingRangeBetweenFiles	db/version_set.cc	/^uint64_t VersionSet::GetOverlappingRangeBetweenFiles(FileMetaData* f1, FileMetaData* f2) {$/;"	f	class:leveldb::VersionSet
GetProperty	db/db_impl.cc	/^bool DBImpl::GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::DBImpl
GetProperty	db/db_test.cc	/^  virtual bool GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::ModelDB
GetRandomKey	db/db_bench.cc	/^  int64_t GetRandomKey(Random64* rand) {$/;"	f	class:leveldb::Benchmark	file:
GetRange	db/version_set.cc	/^void VersionSet::GetRange(const std::vector<FileMetaData*>& inputs,$/;"	f	class:leveldb::VersionSet
GetRange2	db/version_set.cc	/^void VersionSet::GetRange2(const std::vector<FileMetaData*>& inputs1,$/;"	f	class:leveldb::VersionSet
GetReadCurrentTime	db/version_set.h	/^  uint64_t GetReadCurrentTime() {$/;"	f	class:leveldb::Version
GetReplayIterator	db/db_impl.cc	/^Status DBImpl::GetReplayIterator(const std::string& timestamp,$/;"	f	class:leveldb::DBImpl
GetReplayIterator	db/db_test.cc	/^  virtual Status GetReplayIterator(const std::string& timestamp,$/;"	f	class:leveldb::ModelDB
GetReplayTimestamp	db/db_impl.cc	/^void DBImpl::GetReplayTimestamp(std::string* timestamp) {$/;"	f	class:leveldb::DBImpl
GetReplayTimestamp	db/db_test.cc	/^  virtual void GetReplayTimestamp(std::string* timestamp) {$/;"	f	class:leveldb::ModelDB
GetRestartPoint	table/block.cc	/^  uint32_t GetRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
GetSegment	util/env_posix.cc	/^  char* GetSegment(uint64_t block) {$/;"	f	class:leveldb::__anon13::PosixMmapFile	file:
GetSnapshot	db/db_impl.cc	/^const Snapshot* DBImpl::GetSnapshot() {$/;"	f	class:leveldb::DBImpl
GetSnapshot	db/db_test.cc	/^  virtual const Snapshot* GetSnapshot() {$/;"	f	class:leveldb::ModelDB
GetStage	db/db_bench.cc	/^  int64_t GetStage() { return std::min(ops_, max_ops_ - 1) \/ ops_per_stage_; }$/;"	f	class:leveldb::Benchmark::Duration
GetStats	db/version_set.h	/^  struct GetStats {$/;"	s	class:leveldb::Version
GetTableCache	db/version_set.h	/^  TableCache* const GetTableCache() {$/;"	f	class:leveldb::VersionSet
GetTempDir	db/c_test.c	/^static const char* GetTempDir(void) {$/;"	f	file:
GetTestDirectory	helpers/memenv/memenv.cc	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::__anon9::InMemoryEnv
GetTestDirectory	include/pebblesdb/env.h	/^    GetTestDirectory(std::string *path)$/;"	f	class:leveldb::EnvWrapper
GetTestDirectory	util/env_posix.cc	/^  virtual Status GetTestDirectory(std::string* result) {$/;"	f	class:leveldb::__anon13::PosixEnv
GetThreadId	db/db_test.cc	/^  pthread_t GetThreadId() {$/;"	f	class:leveldb::SpecialEnv
GetThreadId	include/pebblesdb/env.h	/^    GetThreadId()$/;"	f	class:leveldb::EnvWrapper
GetThreadId	util/env_posix.cc	/^  virtual pthread_t GetThreadId() {$/;"	f	class:leveldb::__anon13::PosixEnv
GetType	db/db_bench.cc	/^    int GetType(int64_t rand_num) {$/;"	f	class:leveldb::Benchmark::QueryDecider
GetVarint32	util/coding.cc	/^bool GetVarint32(Slice* input, uint32_t* value) {$/;"	f	namespace:leveldb
GetVarint32Ptr	util/coding.h	/^inline const char* GetVarint32Ptr(const char* p,$/;"	f	namespace:leveldb
GetVarint32PtrFallback	util/coding.cc	/^const char* GetVarint32PtrFallback(const char* p,$/;"	f	namespace:leveldb
GetVarint64	util/coding.cc	/^bool GetVarint64(Slice* input, uint64_t* value) {$/;"	f	namespace:leveldb
GetVarint64Ptr	util/coding.cc	/^const char* GetVarint64Ptr(const char* p, const char* limit, uint64_t* value) {$/;"	f	namespace:leveldb
GrowViaTruncate	util/env_posix.cc	/^  bool GrowViaTruncate(uint64_t block) {$/;"	f	class:leveldb::__anon13::PosixMmapFile	file:
GuardDetails	db/db_test.cc	/^  std::string GuardDetails() {$/;"	f	class:leveldb::DBTest
GuardDetailsAtLevel	db/db_test.cc	/^  std::string GuardDetailsAtLevel(int level) {$/;"	f	class:leveldb::DBTest
GuardDetailsAtLevel	db/version_set.cc	/^std::string VersionSet::GuardDetailsAtLevel(unsigned level) const {$/;"	f	class:leveldb::VersionSet
GuardDetailsAtLevel	db/version_set.h	/^  std::string GuardDetailsAtLevel(unsigned level) const {$/;"	f	class:leveldb::Version
GuardInserter	db/write_batch.cc	/^   GuardInserter() : sequence_(), bit_mask(0) {$/;"	f	class:leveldb::__anon29::GuardInserter
GuardInserter	db/write_batch.cc	/^ class GuardInserter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon29	file:
GuardMetaData	db/version_edit.h	/^GuardMetaData() : kMaxFiles(config::kMaxFilesPerGuardSentinel), write_count(0), read_last_accessed_time(0), read_count(0), refs(0), level(-1), guard_key(), smallest(), largest(), number_segments(0) { files.clear();}$/;"	f	struct:leveldb::GuardMetaData
GuardMetaData	db/version_edit.h	/^struct GuardMetaData {$/;"	s	namespace:leveldb
GuardPair	db/version_edit.h	/^  typedef std::pair<int, InternalKey> GuardPair;$/;"	t	class:leveldb::VersionEdit
GuardSet	db/version_set.cc	/^  typedef std::set<GuardMetaData*, BySmallestGuard> GuardSet;$/;"	t	class:leveldb::VersionSet::Builder	file:
GuessType	db/leveldb_main.cc	/^bool GuessType(const std::string& fname, FileType* type) {$/;"	f	namespace:leveldb::__anon30
GuessType	leveldb-verify.cc	/^bool GuessType(const std::string& fname, FileType* type) {$/;"	f	namespace:leveldb::__anon31
HACK_IncreaseCompactionScoresForLevel	db/version_set.h	/^  void HACK_IncreaseCompactionScoresForLevel(int level) {$/;"	f	class:leveldb::Version
HACK_IncreaseCompactionScoresForLevel	db/version_set.h	/^  void HACK_IncreaseCompactionScoresForLevel(int level) {$/;"	f	class:leveldb::VersionSet
HAVE_ALARM	config.h	5;"	d
HAVE_CLOCK_GETTIME	config.h	8;"	d
HAVE_DECL_FDATASYNC	config.h	12;"	d
HAVE_DLFCN_H	config.h	15;"	d
HAVE_ENDIAN_H	config.h	18;"	d
HAVE_FFLUSH	config.h	21;"	d
HAVE_FFLUSH_UNLOCKED	config.h	24;"	d
HAVE_FREAD	config.h	27;"	d
HAVE_FREAD_UNLOCKED	config.h	30;"	d
HAVE_FSYNC	config.h	33;"	d
HAVE_FTRUNCATE	config.h	36;"	d
HAVE_FWRITE	config.h	39;"	d
HAVE_FWRITE_UNLOCKED	config.h	42;"	d
HAVE_GETPAGESIZE	config.h	45;"	d
HAVE_INTTYPES_H	config.h	48;"	d
HAVE_MEMMOVE	config.h	57;"	d
HAVE_MEMORY_H	config.h	60;"	d
HAVE_MKDIR	config.h	63;"	d
HAVE_MMAP	config.h	66;"	d
HAVE_MUNMAP	config.h	69;"	d
HAVE_RMDIR	config.h	72;"	d
HAVE_SOCKET	config.h	75;"	d
HAVE_STDINT_H	config.h	78;"	d
HAVE_STDLIB_H	config.h	81;"	d
HAVE_STRINGS_H	config.h	84;"	d
HAVE_STRING_H	config.h	87;"	d
HAVE_SYS_PARAM_H	config.h	96;"	d
HAVE_SYS_STAT_H	config.h	99;"	d
HAVE_SYS_TYPES_H	config.h	102;"	d
HAVE_UNISTD_H	config.h	105;"	d
HEADERS	Makefile	/^HEADERS = $(noinst_HEADERS) $(pkginclude_HEADERS)$/;"	m
Handle	include/pebblesdb/cache.h	/^  struct Handle { };$/;"	s	class:leveldb::Cache
HandleDumpCommand	db/leveldb_main.cc	/^bool HandleDumpCommand(Env* env, char** files, int num) {$/;"	f	namespace:leveldb::__anon30
HandleDumpCommand	leveldb-verify.cc	/^bool HandleDumpCommand(Env* env, char** files, int num) {$/;"	f	namespace:leveldb::__anon31
HandleGuard	db/leveldb_main.cc	/^  virtual void HandleGuard(const Slice& key, unsigned level) {$/;"	f	class:leveldb::__anon30::WriteBatchItemPrinter
HandleGuard	db/write_batch.cc	/^  virtual void HandleGuard(const Slice& key, unsigned level) {$/;"	f	class:leveldb::__anon29::GuardInserter
HandleGuard	db/write_batch.cc	/^  virtual void HandleGuard(const Slice& key, unsigned level) {$/;"	f	class:leveldb::__anon29::MemTableInserter
HandleGuard	leveldb-verify.cc	/^  virtual void HandleGuard(const Slice& key, unsigned level) {$/;"	f	class:leveldb::__anon31::WriteBatchItemPrinter
HandleTable	util/cache.cc	/^  HandleTable() : length_(0), elems_(0), list_(NULL) { Resize(); }$/;"	f	class:leveldb::__anon16::HandleTable
HandleTable	util/cache.cc	/^class HandleTable {$/;"	c	namespace:leveldb::__anon16	file:
Handler	include/pebblesdb/write_batch.h	/^  class Handler {$/;"	c	class:leveldb::WriteBatch
Harness	table/table_test.cc	/^  Harness() : constructor_(NULL) { }$/;"	f	class:leveldb::Harness
Harness	table/table_test.cc	/^class Harness {$/;"	c	namespace:leveldb	file:
HasValue	db/replay_iterator.cc	/^bool ReplayIteratorImpl::HasValue() {$/;"	f	class:leveldb::ReplayIteratorImpl
Hash	util/hash.cc	/^uint32_t Hash(const char* data, size_t n, uint32_t seed) {$/;"	f	namespace:leveldb
HashNumbers	db/skiplist_test.cc	/^  static uint64_t HashNumbers(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
HashSlice	util/cache.cc	/^  static inline uint32_t HashSlice(const Slice& s) {$/;"	f	class:leveldb::__anon16::ShardedLRUCache	file:
HeapComparator	table/merger.cc	/^  HeapComparator(MergingIterator* mi) : mi_(mi) {}$/;"	f	struct:leveldb::__anon5::HeapComparator
HeapComparator	table/merger.cc	/^  HeapComparator(const HeapComparator& other) : mi_(other.mi_) {}$/;"	f	struct:leveldb::__anon5::HeapComparator
HeapComparator	table/merger.cc	/^struct HeapComparator {$/;"	s	namespace:leveldb::__anon5	file:
HeapProfile	db/db_bench.cc	/^  void HeapProfile() {$/;"	f	class:leveldb::Benchmark	file:
Histogram	util/histogram.h	/^  Histogram()$/;"	f	class:leveldb::Histogram
Histogram	util/histogram.h	/^class Histogram {$/;"	c	namespace:leveldb
IDLE	db/version_set.h	/^	IDLE,$/;"	e	enum:leveldb::ThreadStatus
IKey	db/dbformat_test.cc	/^static std::string IKey(const std::string& user_key,$/;"	f	namespace:leveldb
INITIALIZED	db/version_set.h	/^	INITIALIZED,$/;"	e	enum:leveldb::SeekReturnStatus
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
IOError	include/pebblesdb/status.h	/^  static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
IOError	util/env_posix.cc	/^static Status IOError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon13
InMemoryEnv	helpers/memenv/memenv.cc	/^  explicit InMemoryEnv(Env* base_env) : EnvWrapper(base_env) { }$/;"	f	class:leveldb::__anon9::InMemoryEnv
InMemoryEnv	helpers/memenv/memenv.cc	/^class InMemoryEnv : public EnvWrapper {$/;"	c	namespace:leveldb::__anon9	file:
IncreaseReadCurrentTime	db/version_set.h	/^  void IncreaseReadCurrentTime() {$/;"	f	class:leveldb::Version
IncreaseTotalWriteCount	db/version_set.h	/^  void IncreaseTotalWriteCount() {$/;"	f	class:leveldb::Version
Increment	db/db_test.cc	/^  void Increment() {$/;"	f	class:leveldb::__anon22::AtomicCounter
Increment	table/table_test.cc	/^static void Increment(const Comparator* cmp, std::string* key) {$/;"	f	namespace:leveldb
IncrementBy	db/db_test.cc	/^  void IncrementBy(int count) {$/;"	f	class:leveldb::__anon22::AtomicCounter
IncrementByte	db/log_test.cc	/^  void IncrementByte(int offset, int delta) {$/;"	f	class:leveldb::log::LogTest
InfoLogFileName	db/filename.cc	/^std::string InfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
Init	table/table_test.cc	/^  void Init(const TestArgs& args) {$/;"	f	class:leveldb::Harness
InitDataBlock	table/two_level_iterator.cc	/^void TwoLevelIterator::InitDataBlock() {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
InitDataBlock	table/two_level_iterator.cc	/^void TwoLevelIteratorGuards::InitDataBlock() {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
InitDefaultEnv	util/env_posix.cc	/^static void InitDefaultEnv() { default_env = new PosixEnv; }$/;"	f	namespace:leveldb
InitModule	util/comparator.cc	/^static void InitModule() {$/;"	f	namespace:leveldb
InitMutex	port/port_posix.cc	/^void CondVar::InitMutex(Mutex* mu) {$/;"	f	class:leveldb::port::CondVar
InitOnce	port/port_posix.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
InitializeFileLevelBloomFilter	db/version_set.cc	/^void VersionSet::InitializeFileLevelBloomFilter() {$/;"	f	class:leveldb::VersionSet
InitializeTableCacheFileMetaData	db/version_set.cc	/^void VersionSet::InitializeTableCacheFileMetaData() {$/;"	f	class:leveldb::VersionSet
Initiate	db/db_bench.cc	/^    Status Initiate(std::vector<double> ratio_input) {$/;"	f	class:leveldb::Benchmark::QueryDecider
InitiateExpDistribution	db/db_bench.cc	/^    Status InitiateExpDistribution(int64_t total_keys, double prefix_a,$/;"	f	class:leveldb::Benchmark::GenerateTwoTermExpKeys
Insert	db/skiplist.h	/^void SkipList<Key,Comparator,Extractor>::Insert(const Key& key) {$/;"	f	class:leveldb::SkipList
Insert	util/cache.cc	/^  LRUHandle* Insert(LRUHandle* h) {$/;"	f	class:leveldb::__anon16::HandleTable
Insert	util/cache.cc	/^  virtual Handle* Insert(const Slice& key, void* value, size_t charge,$/;"	f	class:leveldb::__anon16::ShardedLRUCache
Insert	util/cache.cc	/^Cache::Handle* LRUCache::Insert($/;"	f	class:leveldb::__anon16::LRUCache
Insert	util/cache_test.cc	/^  void Insert(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
Insert	util/env_posix.cc	/^  bool Insert(const std::string& fname) {$/;"	f	class:leveldb::__anon13::PosixLockTable
InsertInto	db/write_batch.cc	/^Status WriteBatchInternal::InsertInto(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
InsertIntoVersion	db/write_batch.cc	/^Status WriteBatchInternal::InsertIntoVersion(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
InstallCompactionResults	db/db_impl.cc	/^Status DBImpl::InstallCompactionResults(CompactionState* compact, const int level_to_add_new_files,$/;"	f	class:leveldb::DBImpl
InternalFilterPolicy	db/dbformat.h	/^  explicit InternalFilterPolicy(const FilterPolicy* p) : user_policy_(p) { }$/;"	f	class:leveldb::InternalFilterPolicy
InternalFilterPolicy	db/dbformat.h	/^class InternalFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb
InternalGet	table/table.cc	/^Status Table::InternalGet(const ReadOptions& options, const Slice& k,$/;"	f	class:leveldb::Table
InternalKey	db/dbformat.h	/^  InternalKey() : rep_() { } \/\/ Leave rep_ as empty to indicate it is invalid$/;"	f	class:leveldb::InternalKey
InternalKey	db/dbformat.h	/^  InternalKey(const InternalKey& other) : rep_(other.rep_) {}$/;"	f	class:leveldb::InternalKey
InternalKey	db/dbformat.h	/^  InternalKey(const Slice& _user_key, SequenceNumber s, ValueType t) : rep_() {$/;"	f	class:leveldb::InternalKey
InternalKey	db/dbformat.h	/^class InternalKey {$/;"	c	namespace:leveldb
InternalKeyComparator	db/dbformat.h	/^  InternalKeyComparator(const InternalKeyComparator& other)$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	db/dbformat.h	/^  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) { }$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	db/dbformat.h	/^class InternalKeyComparator : public Comparator {$/;"	c	namespace:leveldb
InternalKeyEncodingLength	db/dbformat.h	/^inline size_t InternalKeyEncodingLength(const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
InvalidArgument	include/pebblesdb/status.h	/^  static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Is	util/testharness.h	/^  Tester& Is(bool b, const char* msg) {$/;"	f	class:leveldb::test::Tester
IsAllLevelsCompacted	db/version_set.cc	/^bool VersionSet::IsAllLevelsCompacted() {$/;"	f	class:leveldb::VersionSet
IsBaseLevelForKey	db/version_set.cc	/^bool Compaction::IsBaseLevelForKey(const Slice& user_key) {$/;"	f	class:leveldb::Compaction
IsCorruption	include/pebblesdb/status.h	/^  bool IsCorruption() const { return code() == kCorruption; }$/;"	f	class:leveldb::Status
IsFileAlreadyPresent	db/version_set.cc	/^  bool IsFileAlreadyPresent(std::vector<uint64_t> files, uint64_t current_file_number) {$/;"	f	class:leveldb::VersionSet::Builder
IsIOError	include/pebblesdb/status.h	/^  bool IsIOError() const { return code() == kIOError; }$/;"	f	class:leveldb::Status
IsNotFound	include/pebblesdb/status.h	/^  bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:leveldb::Status
IsOk	util/testharness.h	/^  Tester& IsOk(const Status& s) {$/;"	f	class:leveldb::test::Tester
IsTrivialMove	db/version_set.cc	/^bool Compaction::IsTrivialMove() const {$/;"	f	class:leveldb::Compaction
IsValidKey	db/skiplist_test.cc	/^  static bool IsValidKey(Key k) {$/;"	f	class:leveldb::ConcurrentTest	file:
Issue178	issues/issue178_test.cc	/^class Issue178 { };$/;"	c	namespace:__anon8	file:
Issue200	issues/issue200_test.cc	/^class Issue200 { };$/;"	c	namespace:leveldb	file:
Iter	table/block.cc	/^  Iter(const Comparator* comparator,$/;"	f	class:leveldb::Block::Iter
Iter	table/block.cc	/^class Block::Iter : public Iterator {$/;"	c	class:leveldb::Block	file:
IterState	db/db_impl.cc	/^struct IterState {$/;"	s	namespace:leveldb::__anon21	file:
IterStatus	db/db_bench.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::Benchmark
IterStatus	db/db_test.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::DBTest
Iterate	db/write_batch.cc	/^Status WriteBatch::Iterate(Handler* handler) const {$/;"	f	class:leveldb::WriteBatch
Iterator	db/skiplist.h	/^  class Iterator {$/;"	c	class:leveldb::SkipList
Iterator	db/skiplist.h	/^inline SkipList<Key,Comparator,Extractor>::Iterator::Iterator(const SkipList* list)$/;"	f	class:leveldb::SkipList::Iterator
Iterator	include/pebblesdb/iterator.h	/^class Iterator {$/;"	c	namespace:leveldb
Iterator	table/iterator.cc	/^Iterator::Iterator()$/;"	f	class:leveldb::Iterator
IteratorWrapper	table/iterator_wrapper.h	/^  IteratorWrapper(): iter_(NULL), valid_(false), key_() { }$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	table/iterator_wrapper.h	/^  explicit IteratorWrapper(Iterator* it): iter_(NULL), valid_(), key_() {$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	table/iterator_wrapper.h	/^class IteratorWrapper {$/;"	c	namespace:leveldb
K	db/skiplist_test.cc	/^  static const uint32_t K = 4;$/;"	m	class:leveldb::ConcurrentTest	file:
K	db/skiplist_test.cc	/^const uint32_t ConcurrentTest::K;$/;"	m	class:leveldb::ConcurrentTest	file:
KVMap	db/db_test.cc	/^typedef std::map<std::string, std::string> KVMap;$/;"	t	namespace:leveldb::__anon24	file:
KVMap	table/table_test.cc	/^typedef std::map<std::string, std::string, STLLessThan> KVMap;$/;"	t	namespace:leveldb	file:
Key	db/autocompact_test.cc	/^  std::string Key(int i) {$/;"	f	class:leveldb::AutoCompactTest
Key	db/corruption_test.cc	/^    Key(int i, std::string *storage)$/;"	f	class:leveldb::CorruptionTest
Key	db/db_test.cc	/^static std::string Key(int i) {$/;"	f	namespace:leveldb
Key	db/skiplist_test.cc	/^typedef uint64_t Key;$/;"	t	namespace:leveldb	file:
Key	util/bloom_test.cc	/^static Slice Key(int i, char* buffer) {$/;"	f	namespace:leveldb
Key1	issues/issue178_test.cc	/^std::string Key1(int i) {$/;"	f	namespace:__anon8
Key2	issues/issue178_test.cc	/^std::string Key2(int i) {$/;"	f	namespace:__anon8
KeyComparator	db/memtable.h	/^    explicit KeyComparator(const InternalKeyComparator& c) : comparator(c) { }$/;"	f	struct:leveldb::MemTable::KeyComparator
KeyComparator	db/memtable.h	/^  struct KeyComparator {$/;"	s	class:leveldb::MemTable
KeyConvertingIterator	table/table_test.cc	/^  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) { }$/;"	f	class:leveldb::KeyConvertingIterator
KeyConvertingIterator	table/table_test.cc	/^class KeyConvertingIterator: public Iterator {$/;"	c	namespace:leveldb	file:
KeyExtractor	db/memtable.h	/^    explicit KeyExtractor(const InternalKeyComparator& c) : comparator(c) { }$/;"	f	struct:leveldb::MemTable::KeyExtractor
KeyExtractor	db/memtable.h	/^  struct KeyExtractor {$/;"	s	class:leveldb::MemTable
KeyIsAfterNode	db/skiplist.h	/^bool SkipList<Key,Comparator,Extractor>::KeyIsAfterNode(const Key& key, Node* n) const {$/;"	f	class:leveldb::SkipList
KeyMayMatch	db/c.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	struct:leveldb_filterpolicy_t
KeyMayMatch	db/dbformat.cc	/^bool InternalFilterPolicy::KeyMayMatch(const Slice& key, const Slice& f) const {$/;"	f	class:leveldb::InternalFilterPolicy
KeyMayMatch	table/filter_block.cc	/^bool FilterBlockReader::KeyMayMatch(uint64_t block_offset, const Slice& key) {$/;"	f	class:leveldb::FilterBlockReader
KeyMayMatch	table/filter_block_test.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	class:leveldb::TestHashFilter
KeyMayMatch	util/bloom.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {$/;"	f	class:leveldb::__anon15::BloomFilterPolicy
KeyNum	util/comparator.cc	/^  virtual uint64_t KeyNum(const Slice& key) const {$/;"	f	class:leveldb::__anon11::BytewiseComparatorImpl
KeyNum	util/comparator.cc	/^uint64_t Comparator::KeyNum(const Slice& \/*key*\/) const {$/;"	f	class:leveldb::Comparator
KeySet	db/version_set.cc	/^  typedef std::set<InternalKey, BySmallestInternalKey> KeySet;$/;"	t	class:leveldb::VersionSet::Builder	file:
KeyrangeUnit	db/db_bench.cc	/^  struct KeyrangeUnit {$/;"	s	class:leveldb::Benchmark	file:
LD	Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDBTableFileName	db/filename.cc	/^std::string LDBTableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LEVELDB_HAVE_MEMORY_BARRIER	port/atomic_pointer.h	239;"	d
LEVELDB_HAVE_MEMORY_BARRIER	port/atomic_pointer.h	60;"	d
LEVELDB_ONCE_INIT	port/port_example.h	70;"	d
LEVELDB_ONCE_INIT	port/port_posix.h	138;"	d
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS = $/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LINK	Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LIPO	Makefile	/^LIPO = $/;"	m
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LOCKABLE	port/thread_annotations.h	28;"	d
LOCKS_EXCLUDED	port/thread_annotations.h	20;"	d
LOCK_RETURNED	port/thread_annotations.h	24;"	d
LRUCache	util/cache.cc	/^LRUCache::LRUCache()$/;"	f	class:leveldb::__anon16::LRUCache
LRUCache	util/cache.cc	/^class LRUCache {$/;"	c	namespace:leveldb::__anon16	file:
LRUHandle	util/cache.cc	/^struct LRUHandle {$/;"	s	namespace:leveldb::__anon16	file:
LRU_Append	util/cache.cc	/^void LRUCache::LRU_Append(LRUHandle* e) {$/;"	f	class:leveldb::__anon16::LRUCache
LRU_Remove	util/cache.cc	/^void LRUCache::LRU_Remove(LRUHandle* e) {$/;"	f	class:leveldb::__anon16::LRUCache
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LT_OBJDIR	config.h	108;"	d
LT_SYS_LIBRARY_PATH	Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
LastRecordOffset	db/log_reader.cc	/^uint64_t Reader::LastRecordOffset() {$/;"	f	class:leveldb::log::Reader
LastSequence	db/db_impl.cc	/^SequenceNumber DBImpl::LastSequence() {$/;"	f	class:leveldb::DBImpl
LastSequence	db/version_set.h	/^  uint64_t LastSequence() const { return last_sequence_; }$/;"	f	class:leveldb::VersionSet
LevelDB_AtomicOps_Internalx86CPUFeatures	util/atomic.cc	/^struct LevelDB_AtomicOps_x86CPUFeatureStruct LevelDB_AtomicOps_Internalx86CPUFeatures =$/;"	v	typeref:struct:LevelDB_AtomicOps_x86CPUFeatureStruct
LevelDB_AtomicOps_Internalx86CPUFeaturesInit	util/atomic.cc	/^static void LevelDB_AtomicOps_Internalx86CPUFeaturesInit()$/;"	f	file:
LevelDB_AtomicOps_x86CPUFeatureStruct	util/atomic.h	/^struct LevelDB_AtomicOps_x86CPUFeatureStruct {$/;"	s
LevelFileNumIterator	db/version_set.cc	/^  LevelFileNumIterator(const InternalKeyComparator& icmp,$/;"	f	class:leveldb::Version::LevelFileNumIterator
LevelFileNumIterator	db/version_set.cc	/^class Version::LevelFileNumIterator : public Iterator {$/;"	c	class:leveldb::Version	file:
LevelGuardNumIterator	db/version_set.cc	/^  LevelGuardNumIterator(const InternalKeyComparator& icmp,$/;"	f	class:leveldb::Version::LevelGuardNumIterator
LevelGuardNumIterator	db/version_set.cc	/^class Version::LevelGuardNumIterator : public Iterator {$/;"	c	class:leveldb::Version	file:
LevelState	db/version_set.cc	/^    LevelState() : deleted_files(), added_files(), deleted_guards(), added_guards(), added_complete_guards() {}$/;"	f	struct:leveldb::VersionSet::Builder::LevelState
LevelState	db/version_set.cc	/^  struct LevelState {$/;"	s	class:leveldb::VersionSet::Builder	file:
LevelSummary	db/version_set.cc	/^const char* VersionSet::LevelSummary(LevelSummaryStorage* scratch) const {$/;"	f	class:leveldb::VersionSet
LevelSummaryStorage	db/version_set.h	/^  struct LevelSummaryStorage {$/;"	s	class:leveldb::VersionSet
LinkFile	include/pebblesdb/env.h	/^    LinkFile(const std::string &s, const std::string &t)$/;"	f	class:leveldb::EnvWrapper
LinkFile	util/env_posix.cc	/^  virtual Status LinkFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon13::PosixEnv
LiveBackup	db/db_impl.cc	/^Status DBImpl::LiveBackup(const Slice& _name) {$/;"	f	class:leveldb::DBImpl
LiveBackup	db/db_test.cc	/^  virtual Status LiveBackup(const Slice& name) {$/;"	f	class:leveldb::ModelDB
Lock	port/port_posix.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
LockFile	helpers/memenv/memenv.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon9::InMemoryEnv
LockFile	include/pebblesdb/env.h	/^    LockFile(const std::string &f, FileLock **l)$/;"	f	class:leveldb::EnvWrapper
LockFile	util/env_posix.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon13::PosixEnv
LockFileName	db/filename.cc	/^std::string LockFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
LockOrUnlock	util/env_posix.cc	/^static int LockOrUnlock(int fd, bool lock) {$/;"	f	namespace:leveldb::__anon13
Log	util/env.cc	/^void Log(Logger* info_log, const char* format, ...) {$/;"	f	namespace:leveldb
LogAndApply	db/version_set.cc	/^Status VersionSet::LogAndApply(VersionEdit* edit, port::Mutex* mu, port::CondVar* cv, bool* wt,$/;"	f	class:leveldb::VersionSet
LogFileName	db/filename.cc	/^std::string LogFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
LogNumber	db/version_set.h	/^  uint64_t LogNumber() const { return log_number_; }$/;"	f	class:leveldb::VersionSet
LogTest	db/log_test.cc	/^  LogTest() : reading_(false),$/;"	f	class:leveldb::log::LogTest
LogTest	db/log_test.cc	/^class LogTest {$/;"	c	namespace:leveldb::log	file:
Logger	include/pebblesdb/env.h	/^    Logger()$/;"	f	class:leveldb::Logger
Logger	include/pebblesdb/env.h	/^class Logger$/;"	c	namespace:leveldb
Logv	helpers/memenv/memenv.cc	/^  virtual void Logv(const char* format, va_list ap) { }$/;"	f	class:leveldb::__anon9::NoOpLogger
Logv	util/posix_logger.h	/^  virtual void Logv(const char* format, va_list ap) {$/;"	f	class:leveldb::PosixLogger
Lookup	util/cache.cc	/^  LRUHandle* Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon16::HandleTable
Lookup	util/cache.cc	/^  virtual Handle* Lookup(const Slice& key) {$/;"	f	class:leveldb::__anon16::ShardedLRUCache
Lookup	util/cache.cc	/^Cache::Handle* LRUCache::Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon16::LRUCache
Lookup	util/cache_test.cc	/^  int Lookup(int key) {$/;"	f	class:leveldb::CacheTest
LookupKey	db/dbformat.cc	/^LookupKey::LookupKey(const Slice& ukey, SequenceNumber s)$/;"	f	class:leveldb::LookupKey
LookupKey	db/dbformat.h	/^class LookupKey {$/;"	c	namespace:leveldb
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/young\/ExperDB\/SUPE\/pebblesdb\/src\/missing makeinfo$/;"	m
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MAP_ANONYMOUS	util/arena.cc	14;"	d	file:
MAX_NUM_SEEK_THREADS	table/merger.h	9;"	d
MAX_TRACE_OPS	db/db_bench.cc	39;"	d	file:
MAX_VALUE_SIZE	db/db_bench.cc	40;"	d	file:
MEMTABLE_TEST	table/table_test.cc	/^  MEMTABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MTC_LAA_ADD_RECORD_TO_DESC_LOG	util/timer.h	/^	MTC_LAA_ADD_RECORD_TO_DESC_LOG,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_APPEND_VERSION	util/timer.h	/^	MTC_LAA_APPEND_VERSION,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_APPLY_EDIT_TO_BUILDER	util/timer.h	/^	MTC_LAA_APPLY_EDIT_TO_BUILDER,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_COMPLETE_WRITE_SNAPSHOT	util/timer.h	/^	MTC_LAA_COMPLETE_WRITE_SNAPSHOT,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_CREATE_MANIFEST_LOG_WRITER	util/timer.h	/^	MTC_LAA_CREATE_MANIFEST_LOG_WRITER,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_ENCODE_EDIT	util/timer.h	/^	MTC_LAA_ENCODE_EDIT,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_FINALIZE	util/timer.h	/^	MTC_LAA_FINALIZE,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_GET_DELTA_COMPLETE_GUARDS	util/timer.h	/^	MTC_LAA_GET_DELTA_COMPLETE_GUARDS,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_GET_LOCK_AFTER_MANIFEST_SYNC	util/timer.h	/^	MTC_LAA_GET_LOCK_AFTER_MANIFEST_SYNC,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_SAVETO	util/timer.h	/^	MTC_LAA_SAVETO,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_SYNC_COMPLETE_GUARDS	util/timer.h	/^	MTC_LAA_SYNC_COMPLETE_GUARDS,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_SYNC_MANIFEST_LOG_WRITE	util/timer.h	/^	MTC_LAA_SYNC_MANIFEST_LOG_WRITE,$/;"	e	enum:leveldb::TimerStep
MTC_LAA_WAIT_FOR_LIVE_BACKUP	util/timer.h	/^	MTC_LAA_WAIT_FOR_LIVE_BACKUP,$/;"	e	enum:leveldb::TimerStep
MTC_SAVETO_ADD_COMPLETE_GUARDS	util/timer.h	/^	MTC_SAVETO_ADD_COMPLETE_GUARDS,$/;"	e	enum:leveldb::TimerStep
MTC_SAVETO_ADD_COMPLETE_GUARDS_TO_GUARDSET	util/timer.h	/^	MTC_SAVETO_ADD_COMPLETE_GUARDS_TO_GUARDSET,$/;"	e	enum:leveldb::TimerStep
MTC_SAVETO_ADD_FILES	util/timer.h	/^	MTC_SAVETO_ADD_FILES,$/;"	e	enum:leveldb::TimerStep
MTC_SAVETO_ADD_GUARDS	util/timer.h	/^	MTC_SAVETO_ADD_GUARDS,$/;"	e	enum:leveldb::TimerStep
MTC_SAVETO_POPULATE_FILES	util/timer.h	/^	MTC_SAVETO_POPULATE_FILES,$/;"	e	enum:leveldb::TimerStep
MTState	db/db_test.cc	/^struct MTState {$/;"	s	namespace:leveldb::__anon23	file:
MTThread	db/db_test.cc	/^struct MTThread {$/;"	s	namespace:leveldb::__anon23	file:
MTThreadBody	db/db_test.cc	/^static void MTThreadBody(void* arg) {$/;"	f	namespace:leveldb::__anon23
MakeFileName	db/filename.cc	/^static std::string MakeFileName(const std::string& name, uint64_t number,$/;"	f	namespace:leveldb
MakeInputIteratorForGuardsInALevel	db/version_set.cc	/^Iterator* VersionSet::MakeInputIteratorForGuardsInALevel(Compaction* c) {$/;"	f	class:leveldb::VersionSet
MakeInvalid	table/iterator_wrapper.h	/^  void MakeInvalid()		{ valid_ = false; }$/;"	f	class:leveldb::IteratorWrapper
MakeKey	db/db_test.cc	/^std::string MakeKey(unsigned int num) {$/;"	f	namespace:leveldb
MakeKey	db/skiplist_test.cc	/^  static Key MakeKey(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
MakeTables	db/db_test.cc	/^  void MakeTables(int n, const std::string& small, const std::string& large) {$/;"	f	class:leveldb::DBTest
ManifestFileNumber	db/version_set.h	/^  uint64_t ManifestFileNumber() const { return manifest_file_number_; }$/;"	f	class:leveldb::VersionSet
ManualCompaction	db/db_impl.h	/^    ManualCompaction()$/;"	f	struct:leveldb::DBImpl::ManualCompaction
ManualCompaction	db/db_impl.h	/^  struct ManualCompaction {$/;"	s	class:leveldb::DBImpl
MarkFileNumberUsed	db/version_set.cc	/^void VersionSet::MarkFileNumberUsed(uint64_t number) {$/;"	f	class:leveldb::VersionSet
Mask	util/crc32c.h	/^inline uint32_t Mask(uint32_t crc) {$/;"	f	namespace:leveldb::crc32c
MatchError	db/log_test.cc	/^  std::string MatchError(const std::string& msg) const {$/;"	f	class:leveldb::log::LogTest
Matches	util/bloom_test.cc	/^  bool Matches(const Slice& s) {$/;"	f	class:leveldb::BloomTest
MaxBytesForLevel	db/version_set.cc	/^static double MaxBytesForLevel(unsigned level) {$/;"	f	namespace:leveldb
MaxBytesPerGuardForLevel	db/version_set.cc	/^static double MaxBytesPerGuardForLevel(unsigned level) {$/;"	f	namespace:leveldb
MaxCompactionBytesForLevel	db/version_set.cc	/^static uint64_t MaxCompactionBytesForLevel(unsigned level) {$/;"	f	namespace:leveldb
MaxFileSizeForLevel	db/version_set.cc	/^static uint64_t MaxFileSizeForLevel(unsigned level) {$/;"	f	namespace:leveldb
MaxFilesPerGuardForLevel	db/version_set.cc	/^static int MaxFilesPerGuardForLevel(unsigned level) {$/;"	f	namespace:leveldb
MaxNextLevelOverlappingBytes	db/version_set.cc	/^int64_t VersionSet::MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::VersionSet
MaxOutputFileSize	db/version_set.h	/^  uint64_t MaxOutputFileSize() const { return max_output_file_size_; }$/;"	f	class:leveldb::Compaction
MaybeAddCompleteGuard	db/version_set.cc	/^  void MaybeAddCompleteGuard(Version* v, unsigned level, GuardMetaData* g, GuardMetaData** last_inserted) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeAddFile	db/version_set.cc	/^  void MaybeAddFile(Version* v, unsigned level, FileMetaData* f) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeAddGuard	db/version_set.cc	/^  void MaybeAddGuard(Version* v, unsigned level, GuardMetaData* g, GuardMetaData** last_inserted) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeIgnoreError	db/db_impl.cc	/^void DBImpl::MaybeIgnoreError(Status* s) const {$/;"	f	class:leveldb::DBImpl
Median	util/histogram.cc	/^double Histogram::Median() const {$/;"	f	class:leveldb::Histogram
MemEnvTest	helpers/memenv/memenv_test.cc	/^  MemEnvTest()$/;"	f	class:leveldb::MemEnvTest
MemEnvTest	helpers/memenv/memenv_test.cc	/^class MemEnvTest {$/;"	c	namespace:leveldb	file:
MemTable	db/memtable.cc	/^MemTable::MemTable(const InternalKeyComparator& cmp)$/;"	f	class:leveldb::MemTable
MemTable	db/memtable.h	/^class MemTable {$/;"	c	namespace:leveldb
MemTableConstructor	table/table_test.cc	/^  explicit MemTableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::MemTableConstructor
MemTableConstructor	table/table_test.cc	/^class MemTableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
MemTableInserter	db/write_batch.cc	/^  MemTableInserter()$/;"	f	class:leveldb::__anon29::MemTableInserter
MemTableInserter	db/write_batch.cc	/^class MemTableInserter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon29	file:
MemTableIterator	db/memtable.cc	/^  explicit MemTableIterator(MemTable::Table* table) : iter_(table), tmp_(), status_(Status::OK()) { }$/;"	f	class:leveldb::MemTableIterator
MemTableIterator	db/memtable.cc	/^class MemTableIterator: public Iterator {$/;"	c	namespace:leveldb	file:
MemTableTest	table/table_test.cc	/^class MemTableTest { };$/;"	c	namespace:leveldb	file:
MemoryUsage	util/arena.h	/^  uint64_t MemoryUsage() { return atomic::load_64_nobarrier(&memory_usage_); }$/;"	f	class:leveldb::Arena
Merge	db/db_bench.cc	/^  void Merge(const Stats& other) {$/;"	f	class:leveldb::__anon19::Stats
Merge	util/histogram.cc	/^void Histogram::Merge(const Histogram& other) {$/;"	f	class:leveldb::Histogram
MergingIterator	table/merger.cc	/^  MergingIterator(const Comparator* comparator, Iterator** children,$/;"	f	class:leveldb::__anon5::MergingIterator
MergingIterator	table/merger.cc	/^class MergingIterator : public Iterator {$/;"	c	namespace:leveldb::__anon5	file:
MinBytesForLevel	db/version_set.cc	/^static double MinBytesForLevel(unsigned level) {$/;"	f	namespace:leveldb
MinFileSizeForLevel	db/version_set.cc	/^static uint64_t MinFileSizeForLevel(unsigned level) {$/;"	f	namespace:leveldb
MinOutputFileSize	db/version_set.h	/^  uint64_t MinOutputFileSize() const { return min_output_file_size_; }$/;"	f	class:leveldb::Compaction
MixGraph	db/db_bench.cc	/^  void MixGraph(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
MmapLimiter	util/env_posix.cc	/^  MmapLimiter()$/;"	f	class:leveldb::__anon13::MmapLimiter
MmapLimiter	util/env_posix.cc	/^class MmapLimiter {$/;"	c	namespace:leveldb::__anon13	file:
MmapSegment	util/env_posix.cc	/^  struct MmapSegment{$/;"	s	class:leveldb::__anon13::PosixMmapFile	file:
ModelDB	db/db_test.cc	/^  explicit ModelDB(const Options& options): options_(options) { }$/;"	f	class:leveldb::ModelDB
ModelDB	db/db_test.cc	/^class ModelDB: public DB {$/;"	c	namespace:leveldb	file:
ModelIter	db/db_test.cc	/^    ModelIter(const KVMap* map, bool owned)$/;"	f	class:leveldb::ModelDB::ModelIter
ModelIter	db/db_test.cc	/^  class ModelIter: public Iterator {$/;"	c	class:leveldb::ModelDB	file:
ModelSnapshot	db/db_test.cc	/^  class ModelSnapshot : public Snapshot {$/;"	c	class:leveldb::ModelDB	file:
MurmurHash3_x64_128	db/murmurhash3.cc	/^void MurmurHash3_x64_128 ( const void * key, const int len,$/;"	f
MurmurHash3_x86_128	db/murmurhash3.cc	/^void MurmurHash3_x86_128 ( const void * key, const int len,$/;"	f
MurmurHash3_x86_32	db/murmurhash3.cc	/^void MurmurHash3_x86_32 ( const void * key, int len,$/;"	f
Mutex	port/port_example.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	port/port_posix.cc	/^Mutex::Mutex() : mu_() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	port/port_posix.h	/^class Mutex {$/;"	c	namespace:leveldb::port
MutexLock	util/mutexlock.h	/^class SCOPED_LOCKABLE MutexLock {$/;"	c	namespace:leveldb
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NO_THREAD_SAFETY_ANALYSIS	port/thread_annotations.h	56;"	d
NUM_READ_THREADS	db/version_set.h	46;"	d
NUM_SEEK_THREADS	util/timer.h	19;"	d
Name	db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_comparator_t
Name	db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_filterpolicy_t
Name	db/dbformat.cc	/^const char* InternalFilterPolicy::Name() const {$/;"	f	class:leveldb::InternalFilterPolicy
Name	db/dbformat.cc	/^const char* InternalKeyComparator::Name() const {$/;"	f	class:leveldb::InternalKeyComparator
Name	table/filter_block_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::TestHashFilter
Name	table/table_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon6::ReverseKeyComparator
Name	util/bloom.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon15::BloomFilterPolicy
Name	util/comparator.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon11::BytewiseComparatorImpl
NeedsCompaction	db/version_set.h	/^  bool NeedsCompaction(bool* levels, bool seek_driven) const {$/;"	f	class:leveldb::VersionSet
New	db/snapshot.h	/^  const SnapshotImpl* New(SequenceNumber seq) {$/;"	f	class:leveldb::SnapshotList
NewBlock	util/arena.cc	/^Arena::Block* Arena::NewBlock(size_t bytes) {$/;"	f	class:leveldb::Arena
NewBloomFilterPolicy	util/bloom.cc	/^const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {$/;"	f	namespace:leveldb
NewConcatenatingIterator	db/version_set.cc	/^Iterator* Version::NewConcatenatingIterator(const ReadOptions& options,$/;"	f	class:leveldb::Version
NewConcurrentWritableFile	db/db_test.cc	/^  Status NewConcurrentWritableFile(const std::string& f, ConcurrentWritableFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewConcurrentWritableFile	include/pebblesdb/env.h	/^    NewConcurrentWritableFile(const std::string &f, ConcurrentWritableFile **r)$/;"	f	class:leveldb::EnvWrapper
NewConcurrentWritableFile	util/env_posix.cc	/^  virtual Status NewConcurrentWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon13::PosixEnv
NewDB	db/db_impl.cc	/^Status DBImpl::NewDB() {$/;"	f	class:leveldb::DBImpl
NewDB	table/table_test.cc	/^  void NewDB() {$/;"	f	class:leveldb::DBConstructor	file:
NewDBIterator	db/db_iter.cc	/^Iterator* NewDBIterator($/;"	f	namespace:leveldb
NewEmptyIterator	table/iterator.cc	/^Iterator* NewEmptyIterator() {$/;"	f	namespace:leveldb
NewErrorIterator	table/iterator.cc	/^Iterator* NewErrorIterator(const Status& status) {$/;"	f	namespace:leveldb
NewFileNumber	db/version_set.h	/^  uint64_t NewFileNumber() { return next_file_number_++; }$/;"	f	class:leveldb::VersionSet
NewId	util/cache.cc	/^  virtual uint64_t NewId() {$/;"	f	class:leveldb::__anon16::ShardedLRUCache
NewInternalIterator	db/db_impl.cc	/^Iterator* DBImpl::NewInternalIterator(const ReadOptions& options, uint64_t number,$/;"	f	class:leveldb::DBImpl
NewIterator	db/db_impl.cc	/^Iterator* DBImpl::NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::DBImpl
NewIterator	db/db_test.cc	/^  virtual Iterator* NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::ModelDB
NewIterator	db/memtable.cc	/^Iterator* MemTable::NewIterator() {$/;"	f	class:leveldb::MemTable
NewIterator	db/table_cache.cc	/^Iterator* TableCache::NewIterator(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
NewIterator	table/block.cc	/^Iterator* Block::NewIterator(const Comparator* cmp) {$/;"	f	class:leveldb::Block
NewIterator	table/table.cc	/^Iterator* Table::NewIterator(const ReadOptions& options) const {$/;"	f	class:leveldb::Table
NewIterator	table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::BlockConstructor
NewIterator	table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::DBConstructor
NewIterator	table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::MemTableConstructor
NewIterator	table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::TableConstructor
NewLRUCache	util/cache.cc	/^Cache* NewLRUCache(size_t capacity) {$/;"	f	namespace:leveldb
NewLogger	helpers/memenv/memenv.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon9::InMemoryEnv
NewLogger	include/pebblesdb/env.h	/^    NewLogger(const std::string &fname, Logger **result)$/;"	f	class:leveldb::EnvWrapper
NewLogger	util/env_posix.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon13::PosixEnv
NewMemEnv	helpers/memenv/memenv.cc	/^Env* NewMemEnv(Env* base_env) {$/;"	f	namespace:leveldb
NewMergingIterator	table/merger.cc	/^Iterator* NewMergingIterator(const Comparator* cmp, Iterator** list, int n, VersionSet* vset) {$/;"	f	namespace:leveldb
NewMergingIteratorForFiles	table/merger.cc	/^Iterator* NewMergingIteratorForFiles(const Comparator* cmp, Iterator** list,$/;"	f	namespace:leveldb
NewNode	db/skiplist.h	/^SkipList<Key,Comparator,Extractor>::NewNode(const Key& key, unsigned height) {$/;"	f	class:leveldb::SkipList
NewRandomAccessFile	db/db_test.cc	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewRandomAccessFile	helpers/memenv/memenv.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon9::InMemoryEnv
NewRandomAccessFile	include/pebblesdb/env.h	/^    NewRandomAccessFile(const std::string &f, RandomAccessFile **r)$/;"	f	class:leveldb::EnvWrapper
NewRandomAccessFile	util/env_posix.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon13::PosixEnv
NewSequentialFile	helpers/memenv/memenv.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon9::InMemoryEnv
NewSequentialFile	include/pebblesdb/env.h	/^    NewSequentialFile(const std::string &f, SequentialFile **r)$/;"	f	class:leveldb::EnvWrapper
NewSequentialFile	util/env_posix.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon13::PosixEnv
NewTableIterator	db/repair.cc	/^  Iterator* NewTableIterator(const FileMetaData& meta) {$/;"	f	class:leveldb::__anon27::Repairer	file:
NewTwoLevelIterator	table/two_level_iterator.cc	/^Iterator* NewTwoLevelIterator($/;"	f	namespace:leveldb
NewTwoLevelIteratorGuards	table/two_level_iterator.cc	/^Iterator* NewTwoLevelIteratorGuards($/;"	f	namespace:leveldb
NewWritableFile	db/db_test.cc	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewWritableFile	helpers/memenv/memenv.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon9::InMemoryEnv
NewWritableFile	include/pebblesdb/env.h	/^    NewWritableFile(const std::string &f, WritableFile **r)$/;"	f	class:leveldb::EnvWrapper
NewWritableFile	util/env_posix.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon13::PosixEnv
NewWritableFile	util/testutil.h	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewestFirst	db/version_set.cc	/^static bool NewestFirst(FileMetaData* a, FileMetaData* b) {$/;"	f	namespace:leveldb
Next	db/db_iter.cc	/^void DBIter::Next() {$/;"	f	class:leveldb::__anon20::DBIter
Next	db/db_test.cc	/^    virtual void Next() { ++iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Next	db/memtable.cc	/^  virtual void Next() { iter_.Next(); }$/;"	f	class:leveldb::MemTableIterator
Next	db/replay_iterator.cc	/^void ReplayIteratorImpl::Next() {$/;"	f	class:leveldb::ReplayIteratorImpl
Next	db/skiplist.h	/^  Node* Next(unsigned n) {$/;"	f	struct:leveldb::SkipList::Node
Next	db/skiplist.h	/^inline void SkipList<Key,Comparator,Extractor>::Iterator::Next() {$/;"	f	class:leveldb::SkipList::Iterator
Next	db/version_set.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Next	db/version_set.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Version::LevelGuardNumIterator
Next	table/block.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Block::Iter
Next	table/iterator.cc	/^  virtual void Next() { assert(false); }$/;"	f	class:leveldb::__anon3::EmptyIterator
Next	table/iterator_wrapper.h	/^  void Next()               { assert(iter_); iter_->Next();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Next	table/merger.cc	/^  virtual void Next() {$/;"	f	class:leveldb::__anon5::MergingIterator
Next	table/table_test.cc	/^  virtual void Next() { iter_->Next(); }$/;"	f	class:leveldb::KeyConvertingIterator
Next	table/two_level_iterator.cc	/^void TwoLevelIterator::Next() {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
Next	table/two_level_iterator.cc	/^void TwoLevelIteratorGuards::Next() {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
Next	util/random.h	/^  uint32_t Next() {$/;"	f	class:leveldb::Random
Next	util/random.h	/^  uint64_t Next() { return generator_(); }$/;"	f	class:leveldb::Random64
NextEntryOffset	table/block.cc	/^  inline uint32_t NextEntryOffset() const {$/;"	f	class:leveldb::Block::Iter	file:
NextLength	util/bloom_test.cc	/^static int NextLength(int length) {$/;"	f	namespace:leveldb
NoBarrier_Cmp	db/skiplist.h	/^  uint64_t NoBarrier_Cmp(unsigned n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_Load	port/atomic_pointer.h	/^  inline void* NoBarrier_Load() const { return rep_; }$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Next	db/skiplist.h	/^  Node* NoBarrier_Next(unsigned n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_SetNext	db/skiplist.h	/^  void NoBarrier_SetNext(unsigned n, uint64_t c, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_Store	port/atomic_pointer.h	/^  inline void NoBarrier_Store(void* v) { rep_ = v; }$/;"	f	class:leveldb::port::AtomicPointer
NoOpLogger	helpers/memenv/memenv.cc	/^class NoOpLogger : public Logger {$/;"	c	namespace:leveldb::__anon9	file:
Node	db/skiplist.h	/^  explicit Node(uint64_t c, const Key& k) : cmp(c), key(k) {}$/;"	f	struct:leveldb::SkipList::Node
Node	db/skiplist.h	/^struct SkipList<Key,Comparator,Extractor>::Node {$/;"	s	class:leveldb::SkipList
NotFound	include/pebblesdb/status.h	/^  static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NotSupported	include/pebblesdb/status.h	/^  static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NowMicros	include/pebblesdb/env.h	/^    NowMicros()$/;"	f	class:leveldb::EnvWrapper
NowMicros	util/env_posix.cc	/^  virtual uint64_t NowMicros() {$/;"	f	class:leveldb::__anon13::PosixEnv
NumCompleteGuardFiles	db/version_set.h	/^  size_t NumCompleteGuardFiles(unsigned level) const {$/;"	f	class:leveldb::Version
NumEntries	table/table_builder.cc	/^uint64_t TableBuilder::NumEntries() const {$/;"	f	class:leveldb::TableBuilder
NumFiles	db/version_set.h	/^  size_t NumFiles(unsigned level) const { return files_[level].size(); }$/;"	f	class:leveldb::Version
NumGuardFiles	db/db_test.cc	/^  int NumGuardFiles() {$/;"	f	class:leveldb::DBTest
NumGuardFiles	db/version_set.cc	/^int VersionSet::NumGuardFiles(unsigned level) const {$/;"	f	class:leveldb::VersionSet
NumGuardFiles	db/version_set.h	/^  size_t NumGuardFiles(unsigned level) const {$/;"	f	class:leveldb::Version
NumGuardFilesAtLevel	db/db_test.cc	/^  int NumGuardFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumGuards	db/version_set.cc	/^int VersionSet::NumGuards(unsigned level) const {$/;"	f	class:leveldb::VersionSet
NumGuards	db/version_set.h	/^  size_t NumGuards(unsigned level) const { return guards_[level].size(); }$/;"	f	class:leveldb::Version
NumGuardsAtLevel	db/db_test.cc	/^  int NumGuardsAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumLevelBytes	db/version_set.cc	/^int64_t VersionSet::NumLevelBytes(unsigned level) const {$/;"	f	class:leveldb::VersionSet
NumLevelFiles	db/version_set.cc	/^int VersionSet::NumLevelFiles(unsigned level) const {$/;"	f	class:leveldb::VersionSet
NumRestarts	table/block.cc	/^inline uint32_t Block::NumRestarts() const {$/;"	f	class:leveldb::Block
NumSentinelFiles	db/db_test.cc	/^  int NumSentinelFiles() {$/;"	f	class:leveldb::DBTest
NumSentinelFiles	db/version_set.cc	/^int VersionSet::NumSentinelFiles(unsigned level) const {$/;"	f	class:leveldb::VersionSet
NumSentinelFiles	db/version_set.h	/^  size_t NumSentinelFiles(unsigned level) const { return sentinel_files_[level].size(); }$/;"	f	class:leveldb::Version
NumSentinelFilesAtLevel	db/db_test.cc	/^  int NumSentinelFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumTableFilesAtLevel	db/db_test.cc	/^  int NumTableFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumUncompactedLevels	db/version_set.cc	/^unsigned VersionSet::NumUncompactedLevels() {$/;"	f	class:leveldb::VersionSet
NumberString	db/log_test.cc	/^static std::string NumberString(int n) {$/;"	f	namespace:leveldb::log
NumberToString	util/logging.cc	/^std::string NumberToString(uint64_t num) {$/;"	f	namespace:leveldb
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OK	include/pebblesdb/status.h	/^  static Status OK() { return Status(); }$/;"	f	class:leveldb::Status
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
OldInfoLogFileName	db/filename.cc	/^std::string OldInfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
OldestFirst	db/version_set.cc	/^static bool OldestFirst(FileMetaData* a, FileMetaData* b) {$/;"	f	namespace:leveldb
OnceType	port/port_example.h	/^typedef intptr_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	port/port_posix.h	/^typedef pthread_once_t OnceType;$/;"	t	namespace:leveldb::port
OneIn	util/random.h	/^  bool OneIn(int n) { return (Next() % n) == 0; }$/;"	f	class:leveldb::Random
OneIn	util/random.h	/^  bool OneIn(uint64_t n) { return Uniform(n) == 0; }$/;"	f	class:leveldb::Random64
Open	db/db_bench.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark	file:
Open	db/db_impl.cc	/^Status DB::Open(const Options& options, const std::string& dbname,$/;"	f	class:leveldb::DB
Open	doc/bench/db_bench_sqlite3.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark
Open	doc/bench/db_bench_tree_db.cc	/^    void Open(bool sync) {$/;"	f	class:leveldb::Benchmark	file:
Open	table/table.cc	/^Status Table::Open(const Options& options,$/;"	f	class:leveldb::Table
OpenCompactionOutputFile	db/db_impl.cc	/^Status DBImpl::OpenCompactionOutputFile(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
OptionConfig	db/db_test.cc	/^  enum OptionConfig {$/;"	g	class:leveldb::DBTest	file:
Options	include/pebblesdb/options.h	/^struct Options {$/;"	s	namespace:leveldb
Options	util/options.cc	/^Options::Options()$/;"	f	class:leveldb::Options
Order	doc/bench/db_bench_sqlite3.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
Order	doc/bench/db_bench_tree_db.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
Output	db/db_impl.cc	/^    Output() : num_entries(0), number(), file_size(), smallest(), largest() {}$/;"	f	struct:leveldb::DBImpl::CompactionState::Output
Output	db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::CompactionState	file:
OverlapInLevel	db/version_set.cc	/^bool Version::OverlapInLevel(unsigned level,$/;"	f	class:leveldb::Version
OverlapInLevelGuards	db/version_set.cc	/^bool Version::OverlapInLevelGuards(unsigned level,$/;"	f	class:leveldb::Version
Overlaps	db/version_set_test.cc	/^  bool Overlaps(const char* smallest, const char* largest) {$/;"	f	class:leveldb::FindFileTest
PACKAGE	Makefile	/^PACKAGE = pebblesdb$/;"	m
PACKAGE	config.h	111;"	d
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = vijay@cs.utexas.edu$/;"	m
PACKAGE_BUGREPORT	config.h	114;"	d
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = pebblesdb$/;"	m
PACKAGE_NAME	config.h	117;"	d
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = pebblesdb 1.0.dev$/;"	m
PACKAGE_STRING	config.h	120;"	d
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = pebblesdb$/;"	m
PACKAGE_TARNAME	config.h	123;"	d
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	config.h	126;"	d
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 1.0.dev$/;"	m
PACKAGE_VERSION	config.h	129;"	d
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	34;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	37;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	42;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	44;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	56;"	d
PLATFORM_IS_LITTLE_ENDIAN	port/port_posix.h	95;"	d
PORT_ATOMIC_POINTER_H_	port/atomic_pointer.h	20;"	d
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PROGRAMS	Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PackSequenceAndType	db/dbformat.cc	/^static uint64_t PackSequenceAndType(uint64_t seq, ValueType t) {$/;"	f	namespace:leveldb
ParetoCdfInversion	db/db_bench.cc	/^  int64_t ParetoCdfInversion(double u, double theta, double k, double sigma) {$/;"	f	class:leveldb::Benchmark	file:
ParseFileName	db/filename.cc	/^bool ParseFileName(const std::string& fname,$/;"	f	namespace:leveldb
ParseInternalKey	db/dbformat.h	/^inline bool ParseInternalKey(const Slice& internal_key,$/;"	f	namespace:leveldb
ParseKey	db/db_iter.cc	/^inline bool DBIter::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::__anon20::DBIter
ParseKey	db/replay_iterator.cc	/^bool ReplayIteratorImpl::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::ReplayIteratorImpl
ParseKey	db/replay_iterator.cc	/^bool ReplayIteratorImpl::ParseKey(const Slice& k, ParsedInternalKey* ikey) {$/;"	f	class:leveldb::ReplayIteratorImpl
ParseNextKey	table/block.cc	/^  bool ParseNextKey() {$/;"	f	class:leveldb::Block::Iter	file:
ParsedInternalKey	db/dbformat.h	/^  ParsedInternalKey()$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	db/dbformat.h	/^  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	db/dbformat.h	/^struct ParsedInternalKey {$/;"	s	namespace:leveldb
Percentile	util/histogram.cc	/^double Histogram::Percentile(double p) const {$/;"	f	class:leveldb::Histogram
PickCompactionForGuards	db/version_set.cc	/^Compaction* VersionSet::PickCompactionForGuards(Version* v, unsigned level, std::vector<GuardMetaData*> *complete_guards_used_in_bg_compaction, bool force_compact) {$/;"	f	class:leveldb::VersionSet
PickCompactionLevel	db/version_set.cc	/^unsigned VersionSet::PickCompactionLevel(bool* locked, bool seek_driven, bool* force_compact) const {$/;"	f	class:leveldb::VersionSet
PickRandomKey	table/table_test.cc	/^  std::string PickRandomKey(Random* rnd, const std::vector<std::string>& keys) {$/;"	f	class:leveldb::Harness
PointerHintPair	db/skiplist.h	/^  struct PointerHintPair {$/;"	s	struct:leveldb::SkipList::Node
PopCurrentComparison	table/merger.cc	/^void MergingIterator::PopCurrentComparison() {$/;"	f	class:leveldb::__anon5::MergingIterator
PopulateBloomFilterForFile	db/version_set.cc	/^void VersionSet::PopulateBloomFilterForFile(FileMetaData* file, FileLevelFilterBuilder* file_level_filter_builder) {$/;"	f	class:leveldb::VersionSet
PopulateFileLevelBloomFilter	db/version_set.cc	/^void VersionSet::PopulateFileLevelBloomFilter() {$/;"	f	class:leveldb::VersionSet
PopulateFilesToGuardsAndSentinels	db/version_set.cc	/^  void PopulateFilesToGuardsAndSentinels(Version* v, unsigned level) {$/;"	f	class:leveldb::VersionSet::Builder
PosixEnv	util/env_posix.cc	/^PosixEnv::PosixEnv() : page_size_(getpagesize()),$/;"	f	class:leveldb::__anon13::PosixEnv
PosixEnv	util/env_posix.cc	/^class PosixEnv : public Env {$/;"	c	namespace:leveldb::__anon13	file:
PosixFileLock	util/env_posix.cc	/^  PosixFileLock() : fd_(-1), name_() { }$/;"	f	class:leveldb::__anon13::PosixFileLock
PosixFileLock	util/env_posix.cc	/^class PosixFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon13	file:
PosixLockTable	util/env_posix.cc	/^  PosixLockTable() : mu_(), locked_files_() { }$/;"	f	class:leveldb::__anon13::PosixLockTable
PosixLockTable	util/env_posix.cc	/^class PosixLockTable {$/;"	c	namespace:leveldb::__anon13	file:
PosixLogger	util/posix_logger.h	/^  PosixLogger(FILE* f, uint64_t (*gettid)()) : file_(f), gettid_(gettid) { }$/;"	f	class:leveldb::PosixLogger
PosixLogger	util/posix_logger.h	/^class PosixLogger : public Logger {$/;"	c	namespace:leveldb
PosixMmapFile	util/env_posix.cc	/^  PosixMmapFile(const std::string& fname, int fd, size_t page_size)$/;"	f	class:leveldb::__anon13::PosixMmapFile
PosixMmapFile	util/env_posix.cc	/^class PosixMmapFile : public ConcurrentWritableFile {$/;"	c	namespace:leveldb::__anon13	file:
PosixMmapReadableFile	util/env_posix.cc	/^  PosixMmapReadableFile(const std::string& fname, void* base, size_t length,$/;"	f	class:leveldb::__anon13::PosixMmapReadableFile
PosixMmapReadableFile	util/env_posix.cc	/^class PosixMmapReadableFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon13	file:
PosixRandomAccessFile	util/env_posix.cc	/^  PosixRandomAccessFile(const std::string& fname, int fd)$/;"	f	class:leveldb::__anon13::PosixRandomAccessFile
PosixRandomAccessFile	util/env_posix.cc	/^class PosixRandomAccessFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon13	file:
PosixSequentialFile	util/env_posix.cc	/^  PosixSequentialFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon13::PosixSequentialFile
PosixSequentialFile	util/env_posix.cc	/^class PosixSequentialFile: public SequentialFile {$/;"	c	namespace:leveldb::__anon13	file:
PosixWritableFile	util/env_posix.cc	/^  PosixWritableFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon13::PosixWritableFile
PosixWritableFile	util/env_posix.cc	/^class PosixWritableFile : public WritableFile {$/;"	c	namespace:leveldb::__anon13	file:
PowerCdfInversion	db/db_bench.cc	/^  int64_t PowerCdfInversion(double u, double a, double b) {$/;"	f	class:leveldb::Benchmark	file:
Prev	db/db_iter.cc	/^void DBIter::Prev() {$/;"	f	class:leveldb::__anon20::DBIter
Prev	db/db_test.cc	/^    virtual void Prev() { --iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Prev	db/memtable.cc	/^  virtual void Prev() { iter_.Prev(); }$/;"	f	class:leveldb::MemTableIterator
Prev	db/skiplist.h	/^inline void SkipList<Key,Comparator,Extractor>::Iterator::Prev() {$/;"	f	class:leveldb::SkipList::Iterator
Prev	db/version_set.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Prev	db/version_set.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Version::LevelGuardNumIterator
Prev	table/block.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Block::Iter
Prev	table/iterator.cc	/^  virtual void Prev() { assert(false); }$/;"	f	class:leveldb::__anon3::EmptyIterator
Prev	table/iterator_wrapper.h	/^  void Prev()               { assert(iter_); iter_->Prev();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Prev	table/merger.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::__anon5::MergingIterator
Prev	table/table_test.cc	/^  virtual void Prev() { iter_->Prev(); }$/;"	f	class:leveldb::KeyConvertingIterator
Prev	table/two_level_iterator.cc	/^void TwoLevelIterator::Prev() {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
Prev	table/two_level_iterator.cc	/^void TwoLevelIteratorGuards::Prev() {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
PrevLogNumber	db/version_set.h	/^  uint64_t PrevLogNumber() const { return prev_log_number_; }$/;"	f	class:leveldb::VersionSet
Prime	db/replay_iterator.cc	/^void ReplayIteratorImpl::Prime() {$/;"	f	class:leveldb::ReplayIteratorImpl
PrintContents	db/write_batch_test.cc	/^static std::string PrintContents(WriteBatch* b) {$/;"	f	namespace:leveldb
PrintDB	db/db_bench.cc	/^  void PrintDB(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	db/db_bench.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	doc/bench/db_bench_sqlite3.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	doc/bench/db_bench_tree_db.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	db/db_bench.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	doc/bench/db_bench_sqlite3.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	doc/bench/db_bench_tree_db.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintLogContents	db/leveldb_main.cc	/^bool PrintLogContents(Env* env, const std::string& fname,$/;"	f	namespace:leveldb::__anon30
PrintLogContents	leveldb-verify.cc	/^bool PrintLogContents(Env* env, const std::string& fname,$/;"	f	namespace:leveldb::__anon31
PrintSeekThreadsStaticTimerAuditCumulative	db/table_cache.h	/^  void PrintSeekThreadsStaticTimerAuditCumulative() {$/;"	f	class:leveldb::TableCache
PrintSeekThreadsStaticTimerAuditCumulative	db/version_set.cc	/^void VersionSet::PrintSeekThreadsStaticTimerAuditCumulative() {$/;"	f	class:leveldb::VersionSet
PrintSeekThreadsStaticTimerAuditIndividual	db/table_cache.h	/^  void PrintSeekThreadsStaticTimerAuditIndividual() {$/;"	f	class:leveldb::TableCache
PrintSeekThreadsStaticTimerAuditIndividual	db/version_set.cc	/^void VersionSet::PrintSeekThreadsStaticTimerAuditIndividual() {$/;"	f	class:leveldb::VersionSet
PrintSeekThreadsTimerAuditCumulative	db/version_set.h	/^  void PrintSeekThreadsTimerAuditCumulative() {$/;"	f	class:leveldb::VersionSet
PrintSeekThreadsTimerAuditIndividual	db/version_set.h	/^  void PrintSeekThreadsTimerAuditIndividual() {$/;"	f	class:leveldb::VersionSet
PrintStats	db/db_bench.cc	/^  void PrintStats(const char* key) {$/;"	f	class:leveldb::Benchmark	file:
PrintTimerAudit	db/db_impl.cc	/^void DBImpl::PrintTimerAudit() {$/;"	f	class:leveldb::DBImpl
PrintTimerAudit	db/db_test.cc	/^  virtual void PrintTimerAudit() {}$/;"	f	class:leveldb::ModelDB
PrintWarnings	db/db_bench.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	doc/bench/db_bench_sqlite3.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	doc/bench/db_bench_tree_db.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
Property	db/corruption_test.cc	/^    Property(const std::string &name)$/;"	f	class:leveldb::CorruptionTest
PthreadCall	port/port_posix.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	util/env_posix.cc	/^  void PthreadCall(const char* label, int result) {$/;"	f	class:leveldb::__anon13::PosixEnv	file:
PushCurrentComparison	table/merger.cc	/^void MergingIterator::PushCurrentComparison() {$/;"	f	class:leveldb::__anon5::MergingIterator
Put	db/db_impl.cc	/^Status DB::Put(const WriteOptions& opt, const Slice& key, const Slice& value) {$/;"	f	class:leveldb::DB
Put	db/db_impl.cc	/^Status DBImpl::Put(const WriteOptions& o, const Slice& key, const Slice& val) {$/;"	f	class:leveldb::DBImpl
Put	db/db_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::DBTest
Put	db/db_test.cc	/^  virtual Status Put(const WriteOptions& o, const Slice& k, const Slice& v) {$/;"	f	class:leveldb::ModelDB
Put	db/leveldb_main.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon30::WriteBatchItemPrinter
Put	db/write_batch.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon29::GuardInserter
Put	db/write_batch.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon29::MemTableInserter
Put	db/write_batch.cc	/^void WriteBatch::Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::WriteBatch
Put	leveldb-verify.cc	/^  virtual void Put(const Slice& \/*key*\/, const Slice& \/*value*\/) {$/;"	f	class:leveldb::__anon31::WriteBatchItemPrinter
PutFixed32	util/coding.cc	/^void PutFixed32(StringBuilder* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed32	util/coding.cc	/^void PutFixed32(std::string* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed64	util/coding.cc	/^void PutFixed64(std::string* dst, uint64_t value) {$/;"	f	namespace:leveldb
PutGuard	db/write_batch.cc	/^void WriteBatch::PutGuard(const Slice& key, int level) {$/;"	f	class:leveldb::WriteBatch
PutLengthPrefixedSlice	util/coding.cc	/^void PutLengthPrefixedSlice(std::string* dst, const Slice& value) {$/;"	f	namespace:leveldb
PutVarint32	util/coding.cc	/^void PutVarint32(StringBuilder* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint32	util/coding.cc	/^void PutVarint32(std::string* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint64	util/coding.cc	/^void PutVarint64(std::string* dst, uint64_t v) {$/;"	f	namespace:leveldb
QueryDecider	db/db_bench.cc	/^    QueryDecider() {}$/;"	f	class:leveldb::Benchmark::QueryDecider
QueryDecider	db/db_bench.cc	/^  class QueryDecider {$/;"	c	class:leveldb::Benchmark	file:
RANDOM	doc/bench/db_bench_sqlite3.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOM	doc/bench/db_bench_tree_db.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
ROTL32	db/murmurhash3.cc	23;"	d	file:
ROTL32	db/murmurhash3.cc	44;"	d	file:
ROTL64	db/murmurhash3.cc	24;"	d	file:
ROTL64	db/murmurhash3.cc	45;"	d	file:
RUNNING	db/skiplist_test.cc	/^    RUNNING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
Random	util/random.h	/^  explicit Random(uint32_t s) : seed_(s & 0x7fffffffu) {$/;"	f	class:leveldb::Random
Random	util/random.h	/^class Random {$/;"	c	namespace:leveldb
Random64	util/random.h	/^  explicit Random64(uint64_t s) : generator_(s) { }$/;"	f	class:leveldb::Random64
Random64	util/random.h	/^class Random64 {$/;"	c	namespace:leveldb
RandomAccessFile	include/pebblesdb/env.h	/^    RandomAccessFile()$/;"	f	class:leveldb::RandomAccessFile
RandomAccessFile	include/pebblesdb/env.h	/^class RandomAccessFile$/;"	c	namespace:leveldb
RandomAccessFileImpl	helpers/memenv/memenv.cc	/^  explicit RandomAccessFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon9::RandomAccessFileImpl
RandomAccessFileImpl	helpers/memenv/memenv.cc	/^class RandomAccessFileImpl : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon9	file:
RandomGenerator	db/db_bench.cc	/^  RandomGenerator() : data_(), pos_() {$/;"	f	class:leveldb::__anon19::RandomGenerator
RandomGenerator	db/db_bench.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon19	file:
RandomGenerator	doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon33::RandomGenerator
RandomGenerator	doc/bench/db_bench_sqlite3.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon33	file:
RandomGenerator	doc/bench/db_bench_tree_db.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon32::RandomGenerator
RandomGenerator	doc/bench/db_bench_tree_db.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon32	file:
RandomHeight	db/skiplist.h	/^int SkipList<Key,Comparator,Extractor>::RandomHeight() {$/;"	f	class:leveldb::SkipList
RandomKey	db/db_test.cc	/^static std::string RandomKey(Random* rnd) {$/;"	f	namespace:leveldb
RandomKey	util/testutil.cc	/^std::string RandomKey(Random* rnd, int len) {$/;"	f	namespace:leveldb::test
RandomPeriod	db/db_iter.cc	/^  ssize_t RandomPeriod() {$/;"	f	class:leveldb::__anon20::DBIter	file:
RandomSeed	util/testharness.cc	/^int RandomSeed() {$/;"	f	namespace:leveldb::test
RandomSkewedString	db/log_test.cc	/^static std::string RandomSkewedString(int i, Random* rnd) {$/;"	f	namespace:leveldb::log
RandomString	db/db_test.cc	/^static std::string RandomString(Random* rnd, int len) {$/;"	f	namespace:leveldb
RandomString	util/testutil.cc	/^Slice RandomString(Random* rnd, int len, std::string* dst) {$/;"	f	namespace:leveldb::test
RandomTarget	db/skiplist_test.cc	/^  static Key RandomTarget(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest	file:
Range	include/pebblesdb/db.h	/^  Range() : start(), limit() { }$/;"	f	struct:leveldb::Range
Range	include/pebblesdb/db.h	/^  Range(const Slice& s, const Slice& l) : start(s), limit(l) { }$/;"	f	struct:leveldb::Range
Range	include/pebblesdb/db.h	/^struct Range {$/;"	s	namespace:leveldb
RangeDifference	db/db_test.cc	/^unsigned int RangeDifference(Slice a, Slice b) {$/;"	f	namespace:leveldb
RangeDifference	db/version_set.cc	/^unsigned int VersionSet::RangeDifference(Slice a, Slice b) {$/;"	f	class:leveldb::VersionSet
RangeFitsWithinAGuard	db/version_set.cc	/^bool RangeFitsWithinAGuard($/;"	f	namespace:leveldb
Read	db/db_test.cc	/^  int Read() {$/;"	f	class:leveldb::__anon22::AtomicCounter
Read	db/log_test.cc	/^    virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::log::LogTest::StringSource
Read	db/log_test.cc	/^  std::string Read() {$/;"	f	class:leveldb::log::LogTest
Read	doc/bench/db_bench_sqlite3.cc	/^  void Read(Order order, int entries_per_batch) {$/;"	f	class:leveldb::Benchmark
Read	helpers/memenv/memenv.cc	/^  Status Read(uint64_t offset, size_t n, Slice* result, char* scratch) const {$/;"	f	class:leveldb::__anon9::FileState
Read	helpers/memenv/memenv.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon9::SequentialFileImpl
Read	helpers/memenv/memenv.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon9::RandomAccessFileImpl
Read	table/table_test.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::StringSource
Read	util/env_posix.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon13::PosixSequentialFile
Read	util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon13::PosixMmapReadableFile
Read	util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon13::PosixRandomAccessFile
ReadBlock	table/format.cc	/^Status ReadBlock(RandomAccessFile* file,$/;"	f	namespace:leveldb
ReadFileToString	util/env.cc	/^Status ReadFileToString(Env* env, const std::string& fname, std::string* data) {$/;"	f	namespace:leveldb
ReadFilter	table/table.cc	/^void Table::ReadFilter(const Slice& filter_handle_value) {$/;"	f	class:leveldb::Table
ReadHot	db/db_bench.cc	/^  void ReadHot(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadMeta	table/table.cc	/^void Table::ReadMeta(const Footer& footer) {$/;"	f	class:leveldb::Table
ReadMissing	db/db_bench.cc	/^  void ReadMissing(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadOptions	include/pebblesdb/options.h	/^  ReadOptions()$/;"	f	struct:leveldb::ReadOptions
ReadOptions	include/pebblesdb/options.h	/^struct ReadOptions {$/;"	s	namespace:leveldb
ReadPhysicalRecord	db/log_reader.cc	/^unsigned int Reader::ReadPhysicalRecord(Slice* result) {$/;"	f	class:leveldb::log::Reader
ReadRandom	db/db_bench.cc	/^  void ReadRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadRandom	doc/bench/db_bench_tree_db.cc	/^  void ReadRandom() {$/;"	f	class:leveldb::Benchmark	file:
ReadRecord	db/log_reader.cc	/^bool Reader::ReadRecord(Slice* record, std::string* scratch) {$/;"	f	class:leveldb::log::Reader
ReadReverse	db/db_bench.cc	/^  void ReadReverse(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	db/db_bench.cc	/^  void ReadSequential(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	doc/bench/db_bench_sqlite3.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark
ReadSequential	doc/bench/db_bench_tree_db.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark	file:
ReadStep	db/skiplist_test.cc	/^  void ReadStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
ReadWhileWriting	db/db_bench.cc	/^  void ReadWhileWriting(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Reader	db/log_reader.cc	/^Reader::Reader(SequentialFile* file, Reporter* reporter, bool checksum,$/;"	f	class:leveldb::log::Reader
Reader	db/log_reader.h	/^class Reader {$/;"	c	namespace:leveldb::log
ReaderState	db/skiplist_test.cc	/^  enum ReaderState {$/;"	g	class:leveldb::TestState	file:
Record	util/timer.h	/^	void Record(TimerStep step) {$/;"	f	class:leveldb::Timer
Record	util/timer.h	/^	void Record(TimerStep step, uint64_t additional_count) {$/;"	f	class:leveldb::Timer
RecordBackgroundError	db/db_impl.cc	/^void DBImpl::RecordBackgroundError(const Status& s) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	db/db_impl.cc	/^void DBImpl::RecordReadSample(Slice key) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	db/version_set.cc	/^bool Version::RecordReadSample(Slice internal_key) {$/;"	f	class:leveldb::Version
RecordType	db/log_format.h	/^enum RecordType {$/;"	g	namespace:leveldb::log
Recover	db/db_impl.cc	/^Status DBImpl::Recover(VersionEdit* edit) {$/;"	f	class:leveldb::DBImpl
Recover	db/version_set.cc	/^Status VersionSet::Recover() {$/;"	f	class:leveldb::VersionSet
RecoverLogFile	db/db_impl.cc	/^Status DBImpl::RecoverLogFile(uint64_t log_number,$/;"	f	class:leveldb::DBImpl
ReduceActiveLevelsByOne	db/db_bench.cc	/^  void ReduceActiveLevelsByOne(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Ref	db/memtable.h	/^  void Ref() { atomic::increment_64_fullbarrier(&refs_, 1); }$/;"	f	class:leveldb::MemTable
Ref	db/version_set.cc	/^void Version::Ref() {$/;"	f	class:leveldb::Version
Ref	helpers/memenv/memenv.cc	/^  void Ref() {$/;"	f	class:leveldb::__anon9::FileState
RegisterCleanup	table/iterator.cc	/^void Iterator::RegisterCleanup(CleanupFunction func, void* arg1, void* arg2) {$/;"	f	class:leveldb::Iterator
RegisterTest	util/testharness.cc	/^bool RegisterTest(const char* base, const char* name, void (*func)()) {$/;"	f	namespace:leveldb::test
ReinitializeComparisons	table/merger.cc	/^void MergingIterator::ReinitializeComparisons() {$/;"	f	class:leveldb::__anon5::MergingIterator
Release	util/cache.cc	/^  virtual void Release(Handle* handle) {$/;"	f	class:leveldb::__anon16::ShardedLRUCache
Release	util/cache.cc	/^void LRUCache::Release(Cache::Handle* handle) {$/;"	f	class:leveldb::__anon16::LRUCache
Release	util/env_posix.cc	/^  void Release() {$/;"	f	class:leveldb::__anon13::MmapLimiter
ReleaseBlock	table/table.cc	/^static void ReleaseBlock(void* arg, void* h) {$/;"	f	namespace:leveldb
ReleaseInputs	db/version_set.cc	/^void Compaction::ReleaseInputs() {$/;"	f	class:leveldb::Compaction
ReleaseReplayIterator	db/db_impl.cc	/^void DBImpl::ReleaseReplayIterator(ReplayIterator* _iter) {$/;"	f	class:leveldb::DBImpl
ReleaseReplayIterator	db/db_test.cc	/^  virtual void ReleaseReplayIterator(ReplayIterator* iter) {$/;"	f	class:leveldb::ModelDB
ReleaseSnapshot	db/db_impl.cc	/^void DBImpl::ReleaseSnapshot(const Snapshot* s) {$/;"	f	class:leveldb::DBImpl
ReleaseSnapshot	db/db_test.cc	/^  virtual void ReleaseSnapshot(const Snapshot* snapshot) {$/;"	f	class:leveldb::ModelDB
Release_Store	port/atomic_pointer.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
ReliabilityCheck	db/db_bench.cc	/^  void ReliabilityCheck(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
ReliabilityStart	db/db_bench.cc	/^  void ReliabilityStart(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
Remove	util/cache.cc	/^  LRUHandle* Remove(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon16::HandleTable
Remove	util/env_posix.cc	/^  void Remove(const std::string& fname) {$/;"	f	class:leveldb::__anon13::PosixLockTable
RemoveFileLevelBloomFilterInfo	db/version_set.cc	/^void VersionSet::RemoveFileLevelBloomFilterInfo(uint64_t file_number) {$/;"	f	class:leveldb::VersionSet
RemoveFileMetaDataFromTableCache	db/version_set.cc	/^void VersionSet::RemoveFileMetaDataFromTableCache(uint64_t file_number) {$/;"	f	class:leveldb::VersionSet
RemoveFileMetaDataMapForFile	db/table_cache.h	/^  void RemoveFileMetaDataMapForFile(uint64_t number) {$/;"	f	class:leveldb::TableCache
RenameFile	helpers/memenv/memenv.cc	/^  virtual Status RenameFile(const std::string& src,$/;"	f	class:leveldb::__anon9::InMemoryEnv
RenameFile	include/pebblesdb/env.h	/^    RenameFile(const std::string &s, const std::string &t)$/;"	f	class:leveldb::EnvWrapper
RenameFile	util/env_posix.cc	/^  virtual Status RenameFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon13::PosixEnv
RenameSSTToLDB	db/db_test.cc	/^  int RenameSSTToLDB() {$/;"	f	class:leveldb::DBTest
Reopen	db/corruption_test.cc	/^    Reopen()$/;"	f	class:leveldb::CorruptionTest
Reopen	db/db_bench.cc	/^  void Reopen(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Reopen	db/db_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
Rep	table/table.cc	/^  Rep()$/;"	f	struct:leveldb::Table::Rep
Rep	table/table.cc	/^struct Table::Rep {$/;"	s	class:leveldb::Table	file:
Rep	table/table_builder.cc	/^  Rep(const Options& opt, WritableFile* f)$/;"	f	struct:leveldb::TableBuilder::Rep
Rep	table/table_builder.cc	/^struct TableBuilder::Rep {$/;"	s	class:leveldb::TableBuilder	file:
RepairDB	db/corruption_test.cc	/^    RepairDB()$/;"	f	class:leveldb::CorruptionTest
RepairDB	db/repair.cc	/^Status RepairDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
RepairTable	db/repair.cc	/^  void RepairTable(const std::string& src, TableInfo t) {$/;"	f	class:leveldb::__anon27::Repairer	file:
Repairer	db/repair.cc	/^  Repairer(const std::string& dbname, const Options& options)$/;"	f	class:leveldb::__anon27::Repairer
Repairer	db/repair.cc	/^class Repairer {$/;"	c	namespace:leveldb::__anon27	file:
ReplayIterator	db/replay_iterator.cc	/^ReplayIterator::ReplayIterator() {$/;"	f	class:leveldb::ReplayIterator
ReplayIterator	include/pebblesdb/replay_iterator.h	/^class ReplayIterator {$/;"	c	namespace:leveldb
ReplayIteratorImpl	db/replay_iterator.cc	/^ReplayIteratorImpl::ReplayIteratorImpl(DBImpl* db, port::Mutex* mutex, const Comparator* cmp,$/;"	f	class:leveldb::ReplayIteratorImpl
ReplayIteratorImpl	db/replay_iterator.h	/^class ReplayIteratorImpl : public ReplayIterator {$/;"	c	namespace:leveldb
ReplayState	db/replay_iterator.cc	/^ReplayState::ReplayState(Iterator* i, SequenceNumber s, SequenceNumber l)$/;"	f	class:leveldb::ReplayState
ReplayState	db/replay_iterator.cc	/^ReplayState::ReplayState(MemTable* m, SequenceNumber s)$/;"	f	class:leveldb::ReplayState
ReplayState	db/replay_iterator.h	/^struct ReplayState {$/;"	s	namespace:leveldb
Report	db/db_bench.cc	/^  void Report(const Slice& name) {$/;"	f	class:leveldb::__anon19::Stats
ReportCollector	db/log_test.cc	/^    ReportCollector() : dropped_bytes_(0) { }$/;"	f	class:leveldb::log::LogTest::ReportCollector
ReportCollector	db/log_test.cc	/^  class ReportCollector : public Reader::Reporter {$/;"	c	class:leveldb::log::LogTest	file:
ReportCorruption	db/log_reader.cc	/^void Reader::ReportCorruption(size_t bytes, const char* reason) {$/;"	f	class:leveldb::log::Reader
ReportDrop	db/log_reader.cc	/^void Reader::ReportDrop(size_t bytes, const Status& reason) {$/;"	f	class:leveldb::log::Reader
ReportMessage	db/log_test.cc	/^  std::string ReportMessage() const {$/;"	f	class:leveldb::log::LogTest
Reporter	db/log_reader.h	/^  class Reporter {$/;"	c	class:leveldb::log::Reader
Reset	db/db_test.cc	/^  void Reset() {$/;"	f	class:leveldb::__anon22::AtomicCounter
Reset	table/block_builder.cc	/^void BlockBuilder::Reset() {$/;"	f	class:leveldb::BlockBuilder
Reset	table/table_test.cc	/^  void Reset() {$/;"	f	class:leveldb::TableConstructor	file:
Reset	util/bloom_test.cc	/^  void Reset() {$/;"	f	class:leveldb::BloomTest
Resize	util/cache.cc	/^  void Resize() {$/;"	f	class:leveldb::__anon16::HandleTable	file:
ReuseFileNumber	db/version_set.h	/^  void ReuseFileNumber(uint64_t file_number) {$/;"	f	class:leveldb::VersionSet
Reverse	table/table_test.cc	/^static std::string Reverse(const Slice& key) {$/;"	f	namespace:leveldb
ReverseKeyComparator	table/table_test.cc	/^class ReverseKeyComparator : public Comparator {$/;"	c	namespace:leveldb::__anon6	file:
Roundup	util/env_posix.cc	/^  static size_t Roundup(size_t x, size_t y) {$/;"	f	class:leveldb::__anon13::PosixMmapFile	file:
Run	db/db_bench.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	db/repair.cc	/^  Status Run() {$/;"	f	class:leveldb::__anon27::Repairer
Run	doc/bench/db_bench_sqlite3.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	doc/bench/db_bench_tree_db.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
RunAllTests	util/testharness.cc	/^int RunAllTests() {$/;"	f	namespace:leveldb::test
RunBenchmark	db/db_bench.cc	/^  void RunBenchmark(int n, Slice name,$/;"	f	class:leveldb::Benchmark	file:
RunConcurrent	db/skiplist_test.cc	/^static void RunConcurrent(int run) {$/;"	f	namespace:leveldb
SCOPED_LOCKABLE	port/thread_annotations.h	32;"	d
SED	Makefile	/^SED = \/bin\/sed$/;"	m
SEEK_BLOCK_READER_READ_BLOCK	util/timer.h	/^	SEEK_BLOCK_READER_READ_BLOCK,$/;"	e	enum:leveldb::TimerStep
SEEK_BLOCK_READER_TOTAL	util/timer.h	/^	SEEK_BLOCK_READER_TOTAL,$/;"	e	enum:leveldb::TimerStep
SEEK_GUARD_NUM_ITERATOR	util/timer.h	/^	SEEK_GUARD_NUM_ITERATOR,$/;"	e	enum:leveldb::TimerStep
SEEK_NEXT	util/timer.h	/^	SEEK_NEXT,$/;"	e	enum:leveldb::TimerStep
SEEK_NEXT_CURRENT_NEXT	util/timer.h	/^	SEEK_NEXT_CURRENT_NEXT,$/;"	e	enum:leveldb::TimerStep
SEEK_NEXT_CURRENT_NEXT_FILE_LEVEL	util/timer.h	/^	SEEK_NEXT_CURRENT_NEXT_FILE_LEVEL,$/;"	e	enum:leveldb::TimerStep
SEEK_NEXT_FILE_LEVEL	util/timer.h	/^	SEEK_NEXT_FILE_LEVEL,$/;"	e	enum:leveldb::TimerStep
SEEK_NEXT_POP	util/timer.h	/^	SEEK_NEXT_POP,$/;"	e	enum:leveldb::TimerStep
SEEK_NEXT_POP_FILE_LEVEL	util/timer.h	/^	SEEK_NEXT_POP_FILE_LEVEL,$/;"	e	enum:leveldb::TimerStep
SEEK_NEXT_PUSH	util/timer.h	/^	SEEK_NEXT_PUSH,$/;"	e	enum:leveldb::TimerStep
SEEK_NEXT_PUSH_FILE_LEVEL	util/timer.h	/^	SEEK_NEXT_PUSH_FILE_LEVEL,$/;"	e	enum:leveldb::TimerStep
SEEK_NUM_TABLE_ITERATOR	util/timer.h	/^	SEEK_NUM_TABLE_ITERATOR,$/;"	e	enum:leveldb::TimerStep
SEEK_PARALLEL_ASSIGN_THREADS	util/timer.h	/^	SEEK_PARALLEL_ASSIGN_THREADS,$/;"	e	enum:leveldb::TimerStep
SEEK_PARALLEL_SIGNAL_THREADS	util/timer.h	/^	SEEK_PARALLEL_SIGNAL_THREADS,$/;"	e	enum:leveldb::TimerStep
SEEK_PARALLEL_TOTAL	util/timer.h	/^	SEEK_PARALLEL_TOTAL,$/;"	e	enum:leveldb::TimerStep
SEEK_PARALLEL_WAIT_FOR_THREADS	util/timer.h	/^	SEEK_PARALLEL_WAIT_FOR_THREADS,$/;"	e	enum:leveldb::TimerStep
SEEK_REINIT	util/timer.h	/^	SEEK_REINIT,$/;"	e	enum:leveldb::TimerStep
SEEK_REINIT_FILE_LEVEL	util/timer.h	/^	SEEK_REINIT_FILE_LEVEL,$/;"	e	enum:leveldb::TimerStep
SEEK_SEQUENTIAL_FILES	util/timer.h	/^	SEEK_SEQUENTIAL_FILES,$/;"	e	enum:leveldb::TimerStep
SEEK_SEQUENTIAL_TOTAL	util/timer.h	/^	SEEK_SEQUENTIAL_TOTAL,$/;"	e	enum:leveldb::TimerStep
SEEK_THREAD_ITER_SEEK	util/timer.h	/^	SEEK_THREAD_ITER_SEEK,$/;"	e	enum:leveldb::TimerStep
SEEK_THREAD_TOTAL_ACTIVE	util/timer.h	/^	SEEK_THREAD_TOTAL_ACTIVE,$/;"	e	enum:leveldb::TimerStep
SEEK_TITERATOR_PARALLEL_ASSIGN_THREADS	util/timer.h	/^	SEEK_TITERATOR_PARALLEL_ASSIGN_THREADS,$/;"	e	enum:leveldb::TimerStep
SEEK_TITERATOR_PARALLEL_SIGNAL_THREADS	util/timer.h	/^	SEEK_TITERATOR_PARALLEL_SIGNAL_THREADS,$/;"	e	enum:leveldb::TimerStep
SEEK_TITERATOR_PARALLEL_TOTAL	util/timer.h	/^	SEEK_TITERATOR_PARALLEL_TOTAL,$/;"	e	enum:leveldb::TimerStep
SEEK_TITERATOR_PARALLEL_WAIT_FOR_THREADS	util/timer.h	/^	SEEK_TITERATOR_PARALLEL_WAIT_FOR_THREADS,$/;"	e	enum:leveldb::TimerStep
SEEK_TITERATOR_SEQUENTIAL_FILES	util/timer.h	/^	SEEK_TITERATOR_SEQUENTIAL_FILES,$/;"	e	enum:leveldb::TimerStep
SEEK_TITERATOR_SEQUENTIAL_TOTAL	util/timer.h	/^	SEEK_TITERATOR_SEQUENTIAL_TOTAL,$/;"	e	enum:leveldb::TimerStep
SEQUENTIAL	doc/bench/db_bench_sqlite3.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SEQUENTIAL	doc/bench/db_bench_tree_db.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHARED_LOCKS_REQUIRED	port/thread_annotations.h	16;"	d
SHARED_LOCK_FUNCTION	port/thread_annotations.h	40;"	d
SHARED_PTR	db/db_impl.h	31;"	d
SHARED_TRYLOCK_FUNCTION	port/thread_annotations.h	48;"	d
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SNAPPY_FLAGS	Makefile	/^SNAPPY_FLAGS = -DSNAPPY$/;"	m
SNAPPY_LIBS	Makefile	/^SNAPPY_LIBS = -lsnappy$/;"	m
SOURCES	Makefile	/^SOURCES = $(libpebblesdb_la_SOURCES) $(arena_test_SOURCES) \\$/;"	m
STARTING	db/skiplist_test.cc	/^    STARTING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
STDC_HEADERS	config.h	132;"	d
STLLessThan	table/table_test.cc	/^  STLLessThan() : cmp(BytewiseComparator()) { }$/;"	f	struct:leveldb::__anon7::STLLessThan
STLLessThan	table/table_test.cc	/^  STLLessThan(const Comparator* c) : cmp(c) { }$/;"	f	struct:leveldb::__anon7::STLLessThan
STLLessThan	table/table_test.cc	/^struct STLLessThan {$/;"	s	namespace:leveldb::__anon7	file:
STORAGE_LEVELDB_DB_BUILDER_H_	db/builder.h	6;"	d
STORAGE_LEVELDB_DB_DB_IMPL_H_	db/db_impl.h	6;"	d
STORAGE_LEVELDB_DB_DB_ITER_H_	db/db_iter.h	6;"	d
STORAGE_LEVELDB_DB_FILENAME_H_	db/filename.h	8;"	d
STORAGE_LEVELDB_DB_FORMAT_H_	db/dbformat.h	6;"	d
STORAGE_LEVELDB_DB_LOG_FORMAT_H_	db/log_format.h	9;"	d
STORAGE_LEVELDB_DB_LOG_READER_H_	db/log_reader.h	6;"	d
STORAGE_LEVELDB_DB_LOG_WRITER_H_	db/log_writer.h	6;"	d
STORAGE_LEVELDB_DB_MEMTABLE_H_	db/memtable.h	6;"	d
STORAGE_LEVELDB_DB_ROLLING_ITERATOR_H_	db/replay_iterator.h	6;"	d
STORAGE_LEVELDB_DB_SNAPSHOT_H_	db/snapshot.h	6;"	d
STORAGE_LEVELDB_DB_TABLE_CACHE_H_	db/table_cache.h	8;"	d
STORAGE_LEVELDB_DB_VERSION_EDIT_H_	db/version_edit.h	6;"	d
STORAGE_LEVELDB_DB_VERSION_SET_H_	db/version_set.h	16;"	d
STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_	db/write_batch_internal.h	6;"	d
STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_	helpers/memenv/memenv.h	6;"	d
STORAGE_LEVELDB_INCLUDE_CACHE_H_	include/pebblesdb/cache.h	19;"	d
STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_	include/pebblesdb/comparator.h	6;"	d
STORAGE_LEVELDB_INCLUDE_C_H_	include/pebblesdb/c.h	41;"	d
STORAGE_LEVELDB_INCLUDE_DB_H_	include/pebblesdb/db.h	6;"	d
STORAGE_LEVELDB_INCLUDE_ENV_H_	include/pebblesdb/env.h	14;"	d
STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_	include/pebblesdb/filter_policy.h	17;"	d
STORAGE_LEVELDB_INCLUDE_ITERATOR_H_	include/pebblesdb/iterator.h	16;"	d
STORAGE_LEVELDB_INCLUDE_OPTIONS_H_	include/pebblesdb/options.h	6;"	d
STORAGE_LEVELDB_INCLUDE_REPLAY_ITERATOR_H_	include/pebblesdb/replay_iterator.h	6;"	d
STORAGE_LEVELDB_INCLUDE_SLICE_H_	include/pebblesdb/slice.h	16;"	d
STORAGE_LEVELDB_INCLUDE_STATUS_H_	include/pebblesdb/status.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_	include/pebblesdb/table_builder.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_H_	include/pebblesdb/table.h	6;"	d
STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_	include/pebblesdb/write_batch.h	22;"	d
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	port/port_example.h	11;"	d
STORAGE_LEVELDB_PORT_PORT_H_	port/port.h	6;"	d
STORAGE_LEVELDB_PORT_PORT_POSIX_H_	port/port_posix.h	8;"	d
STORAGE_LEVELDB_PORT_WIN_STDINT_H_	port/win/stdint.h	8;"	d
STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_	table/block_builder.h	6;"	d
STORAGE_LEVELDB_TABLE_BLOCK_H_	table/block.h	6;"	d
STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_	table/filter_block.h	10;"	d
STORAGE_LEVELDB_TABLE_FORMAT_H_	table/format.h	6;"	d
STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_	table/iterator_wrapper.h	6;"	d
STORAGE_LEVELDB_TABLE_MERGER_H_	table/merger.h	6;"	d
STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_	table/two_level_iterator.h	6;"	d
STORAGE_LEVELDB_UTIL_ARENA_H_	util/arena.h	6;"	d
STORAGE_LEVELDB_UTIL_CODING_H_	util/coding.h	11;"	d
STORAGE_LEVELDB_UTIL_CRC32C_H_	util/crc32c.h	6;"	d
STORAGE_LEVELDB_UTIL_HASH_H_	util/hash.h	8;"	d
STORAGE_LEVELDB_UTIL_HISTOGRAM_H_	util/histogram.h	6;"	d
STORAGE_LEVELDB_UTIL_LOGGING_H_	util/logging.h	9;"	d
STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_	util/mutexlock.h	6;"	d
STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_	util/posix_logger.h	9;"	d
STORAGE_LEVELDB_UTIL_RANDOM_H_	util/random.h	6;"	d
STORAGE_LEVELDB_UTIL_STRING_BUILDER_H_	util/string_builder.h	9;"	d
STORAGE_LEVELDB_UTIL_TESTHARNESS_H_	util/testharness.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTUTIL_H_	util/testutil.h	6;"	d
STRIP	Makefile	/^STRIP = strip$/;"	m
SWB_ENQUEUE_MEM	util/timer.h	/^	SWB_ENQUEUE_MEM,$/;"	e	enum:leveldb::TimerStep
SWB_INIT_MEMTABLES	util/timer.h	/^	SWB_INIT_MEMTABLES,$/;"	e	enum:leveldb::TimerStep
SWB_INIT_MUTEX	util/timer.h	/^	SWB_INIT_MUTEX,$/;"	e	enum:leveldb::TimerStep
SWB_SET_LOG_DETAILS	util/timer.h	/^	SWB_SET_LOG_DETAILS,$/;"	e	enum:leveldb::TimerStep
SWB_SET_TAIL	util/timer.h	/^	SWB_SET_TAIL,$/;"	e	enum:leveldb::TimerStep
SWB_SYNC_AND_FETCH	util/timer.h	/^	SWB_SYNC_AND_FETCH,$/;"	e	enum:leveldb::TimerStep
SWB_UNLOCK_MUTEX	util/timer.h	/^	SWB_UNLOCK_MUTEX,$/;"	e	enum:leveldb::TimerStep
SWE_LOCK_MUTEX	util/timer.h	/^	SWE_LOCK_MUTEX,$/;"	e	enum:leveldb::TimerStep
SWE_LOCK_WRITERS_MUTEX	util/timer.h	/^	SWE_LOCK_WRITERS_MUTEX,$/;"	e	enum:leveldb::TimerStep
SWE_SET_IMM	util/timer.h	/^	SWE_SET_IMM,$/;"	e	enum:leveldb::TimerStep
SWE_SET_NEXT	util/timer.h	/^	SWE_SET_NEXT,$/;"	e	enum:leveldb::TimerStep
SWE_SET_PREV	util/timer.h	/^	SWE_SET_PREV,$/;"	e	enum:leveldb::TimerStep
SWE_SLEEP	util/timer.h	/^	SWE_SLEEP,$/;"	e	enum:leveldb::TimerStep
SWE_UNLOCK_MUTEX	util/timer.h	/^	SWE_UNLOCK_MUTEX,$/;"	e	enum:leveldb::TimerStep
SWE_UNLOCK_WRITERS_MUTEX	util/timer.h	/^	SWE_UNLOCK_WRITERS_MUTEX,$/;"	e	enum:leveldb::TimerStep
SanitizeOptions	db/db_impl.cc	/^Options SanitizeOptions(const std::string& dbname,$/;"	f	namespace:leveldb
SaveError	db/c.cc	/^static bool SaveError(char** errptr, const Status& s) {$/;"	f	file:
SaveError	table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon4::TwoLevelIterator	file:
SaveError	table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
SaveKey	db/db_iter.cc	/^  inline void SaveKey(const Slice& k, std::string* dst) {$/;"	f	class:leveldb::__anon20::DBIter	file:
SaveTo	db/version_set.cc	/^  void SaveTo(Version* v, int mtc = 0, VersionEdit* edit = NULL) {$/;"	f	class:leveldb::VersionSet::Builder
SaveValue	db/version_set.h	/^static void SaveValue(void* arg, const Slice& ikey, const Slice& v) {$/;"	f	namespace:leveldb
Saver	db/version_set.h	/^  Saver() : state(), ucmp(), user_key(), value() {}$/;"	f	struct:leveldb::Saver
Saver	db/version_set.h	/^struct Saver {$/;"	s	namespace:leveldb
SaverState	db/version_set.h	/^enum SaverState {$/;"	g	namespace:leveldb
ScanRandom	db/db_bench.cc	/^  void ScanRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ScanTable	db/repair.cc	/^  void ScanTable(uint64_t number) {$/;"	f	class:leveldb::__anon27::Repairer	file:
Schedule	include/pebblesdb/env.h	/^    Schedule(void (*f)(void *), void *a)$/;"	f	class:leveldb::EnvWrapper
Schedule	util/env_posix.cc	/^void PosixEnv::Schedule(void (*function)(void*), void* arg) {$/;"	f	class:leveldb::__anon13::PosixEnv
Seek	db/db_iter.cc	/^void DBIter::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon20::DBIter
Seek	db/db_test.cc	/^    virtual void Seek(const Slice& k) {$/;"	f	class:leveldb::ModelDB::ModelIter
Seek	db/memtable.cc	/^  virtual void Seek(const Slice& k) { iter_.Seek(EncodeKey(&tmp_, k)); }$/;"	f	class:leveldb::MemTableIterator
Seek	db/skiplist.h	/^inline void SkipList<Key,Comparator,Extractor>::Iterator::Seek(const Key& target) {$/;"	f	class:leveldb::SkipList::Iterator
Seek	db/version_set.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Seek	db/version_set.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Version::LevelGuardNumIterator
Seek	table/block.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Block::Iter
Seek	table/iterator.cc	/^  virtual void Seek(const Slice& \/*target*\/) { }$/;"	f	class:leveldb::__anon3::EmptyIterator
Seek	table/iterator_wrapper.h	/^  void Seek(const Slice& k) { assert(iter_); iter_->Seek(k);       Update(); }$/;"	f	class:leveldb::IteratorWrapper
Seek	table/merger.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::__anon5::MergingIterator
Seek	table/table_test.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::KeyConvertingIterator
Seek	table/two_level_iterator.cc	/^void TwoLevelIterator::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
Seek	table/two_level_iterator.cc	/^void TwoLevelIteratorGuards::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
SeekInParallel	table/merger.cc	/^  void SeekInParallel(const Slice& target) {$/;"	f	class:leveldb::__anon5::MergingIterator
SeekInSequence	table/merger.cc	/^  void SeekInSequence(const Slice& target) {$/;"	f	class:leveldb::__anon5::MergingIterator
SeekRandom	db/db_bench.cc	/^  void SeekRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SeekReturnStatus	db/version_set.h	/^enum  SeekReturnStatus {$/;"	g	namespace:leveldb
SeekToFirst	db/db_iter.cc	/^void DBIter::SeekToFirst() {$/;"	f	class:leveldb::__anon20::DBIter
SeekToFirst	db/db_test.cc	/^    virtual void SeekToFirst() { iter_ = map_->begin(); }$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToFirst	db/memtable.cc	/^  virtual void SeekToFirst() { iter_.SeekToFirst(); }$/;"	f	class:leveldb::MemTableIterator
SeekToFirst	db/skiplist.h	/^inline void SkipList<Key,Comparator,Extractor>::Iterator::SeekToFirst() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToFirst	db/version_set.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToFirst	db/version_set.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Version::LevelGuardNumIterator
SeekToFirst	table/block.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Block::Iter
SeekToFirst	table/iterator.cc	/^  virtual void SeekToFirst() { }$/;"	f	class:leveldb::__anon3::EmptyIterator
SeekToFirst	table/iterator_wrapper.h	/^  void SeekToFirst()        { assert(iter_); iter_->SeekToFirst(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToFirst	table/merger.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::__anon5::MergingIterator
SeekToFirst	table/table_test.cc	/^  virtual void SeekToFirst() { iter_->SeekToFirst(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToFirst	table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToFirst() {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
SeekToFirst	table/two_level_iterator.cc	/^void TwoLevelIteratorGuards::SeekToFirst() {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
SeekToLast	db/db_iter.cc	/^void DBIter::SeekToLast() {$/;"	f	class:leveldb::__anon20::DBIter
SeekToLast	db/db_test.cc	/^    virtual void SeekToLast() {$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToLast	db/memtable.cc	/^  virtual void SeekToLast() { iter_.SeekToLast(); }$/;"	f	class:leveldb::MemTableIterator
SeekToLast	db/skiplist.h	/^inline void SkipList<Key,Comparator,Extractor>::Iterator::SeekToLast() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToLast	db/version_set.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToLast	db/version_set.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Version::LevelGuardNumIterator
SeekToLast	table/block.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Block::Iter
SeekToLast	table/iterator.cc	/^  virtual void SeekToLast() { }$/;"	f	class:leveldb::__anon3::EmptyIterator
SeekToLast	table/iterator_wrapper.h	/^  void SeekToLast()         { assert(iter_); iter_->SeekToLast();  Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToLast	table/merger.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::__anon5::MergingIterator
SeekToLast	table/table_test.cc	/^  virtual void SeekToLast() { iter_->SeekToLast(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToLast	table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToLast() {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
SeekToLast	table/two_level_iterator.cc	/^void TwoLevelIteratorGuards::SeekToLast() {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
SeekToRestartPoint	table/block.cc	/^  void SeekToRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
SeekWhileWriting	db/db_bench.cc	/^  void SeekWhileWriting(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SentinelDetails	db/db_test.cc	/^  std::string SentinelDetails() {$/;"	f	class:leveldb::DBTest
SentinelDetailsAtLevel	db/db_test.cc	/^  std::string SentinelDetailsAtLevel(int level) {$/;"	f	class:leveldb::DBTest
SentinelDetailsAtLevel	db/version_set.cc	/^std::string VersionSet::SentinelDetailsAtLevel(unsigned level) const {$/;"	f	class:leveldb::VersionSet
SentinelDetailsAtLevel	db/version_set.h	/^  std::string SentinelDetailsAtLevel(unsigned level) const {$/;"	f	class:leveldb::Version
Sequence	db/write_batch.cc	/^SequenceNumber WriteBatchInternal::Sequence(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
SequenceNumber	db/dbformat.h	/^typedef uint64_t SequenceNumber;$/;"	t	namespace:leveldb
SequenceWriteBegin	db/db_impl.cc	/^Status DBImpl::SequenceWriteBegin(Writer* w, WriteBatch* updates) {$/;"	f	class:leveldb::DBImpl
SequenceWriteEnd	db/db_impl.cc	/^void DBImpl::SequenceWriteEnd(Writer* w, WriteBatch* updates_with_guards, Status s) {$/;"	f	class:leveldb::DBImpl
SequentialFile	include/pebblesdb/env.h	/^    SequentialFile()$/;"	f	class:leveldb::SequentialFile
SequentialFile	include/pebblesdb/env.h	/^class SequentialFile$/;"	c	namespace:leveldb
SequentialFileImpl	helpers/memenv/memenv.cc	/^  explicit SequentialFileImpl(FileState* file) : file_(file), pos_(0) {$/;"	f	class:leveldb::__anon9::SequentialFileImpl
SequentialFileImpl	helpers/memenv/memenv.cc	/^class SequentialFileImpl : public SequentialFile {$/;"	c	namespace:leveldb::__anon9	file:
Set	db/skiplist_test.cc	/^    void Set(int k, intptr_t v) {$/;"	f	struct:leveldb::ConcurrentTest::State
Set	table/iterator_wrapper.h	/^  void Set(Iterator* it) {$/;"	f	class:leveldb::IteratorWrapper
SetAllowed	util/env_posix.cc	/^  void SetAllowed(intptr_t v) {$/;"	f	class:leveldb::__anon13::MmapLimiter	file:
SetBool	util/env_test.cc	/^static void SetBool(void* ptr) {$/;"	f	namespace:leveldb
SetByte	db/log_test.cc	/^  void SetByte(int offset, char new_byte) {$/;"	f	class:leveldb::log::LogTest
SetCapacity	util/cache.cc	/^  void SetCapacity(size_t capacity) { capacity_ = capacity; }$/;"	f	class:leveldb::__anon16::LRUCache
SetCompactPointer	db/version_edit.h	/^  void SetCompactPointer(int level, const InternalKey& key) {$/;"	f	class:leveldb::VersionEdit
SetComparatorName	db/version_edit.h	/^  void SetComparatorName(const Slice& name) {$/;"	f	class:leveldb::VersionEdit
SetContents	db/write_batch.cc	/^void WriteBatchInternal::SetContents(WriteBatch* b, const Slice& contents) {$/;"	f	class:leveldb::WriteBatchInternal
SetCount	db/write_batch.cc	/^void WriteBatchInternal::SetCount(WriteBatch* b, int n) {$/;"	f	class:leveldb::WriteBatchInternal
SetCurrentFile	db/filename.cc	/^Status SetCurrentFile(Env* env, const std::string& dbname,$/;"	f	namespace:leveldb
SetDataIterator	table/two_level_iterator.cc	/^void TwoLevelIterator::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
SetDataIterator	table/two_level_iterator.cc	/^void TwoLevelIteratorGuards::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
SetFileMetaDataMap	db/table_cache.cc	/^void TableCache::SetFileMetaDataMap(uint64_t file_number, uint64_t file_size, InternalKey smallest, InternalKey largest) {$/;"	f	class:leveldb::TableCache
SetFrom	db/dbformat.h	/^  void SetFrom(const ParsedInternalKey& p) {$/;"	f	class:leveldb::InternalKey
SetGuards	db/write_batch.cc	/^Status WriteBatchInternal::SetGuards(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
SetLastSequence	db/version_edit.h	/^  void SetLastSequence(SequenceNumber seq) {$/;"	f	class:leveldb::VersionEdit
SetLastSequence	db/version_set.h	/^  void SetLastSequence(uint64_t s) {$/;"	f	class:leveldb::VersionSet
SetLogNumber	db/version_edit.h	/^  void SetLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetNext	db/skiplist.h	/^  void SetNext(unsigned n, uint64_t c, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
SetNextFile	db/version_edit.h	/^  void SetNextFile(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetPrevLogNumber	db/version_edit.h	/^  void SetPrevLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetReadCurrentTime	db/version_set.h	/^  void SetReadCurrentTime(uint64_t new_) {$/;"	f	class:leveldb::Version
SetSequence	db/write_batch.cc	/^void WriteBatchInternal::SetSequence(WriteBatch* b, SequenceNumber seq) {$/;"	f	class:leveldb::WriteBatchInternal
SetStaticTimers	include/pebblesdb/table.h	/^  void SetStaticTimers(Timer* static_timers[]) {$/;"	f	class:leveldb::Table
Shard	util/cache.cc	/^  static uint32_t Shard(uint32_t hash) {$/;"	f	class:leveldb::__anon16::ShardedLRUCache	file:
ShardedLRUCache	util/cache.cc	/^  explicit ShardedLRUCache(size_t capacity)$/;"	f	class:leveldb::__anon16::ShardedLRUCache
ShardedLRUCache	util/cache.cc	/^class ShardedLRUCache : public Cache {$/;"	c	namespace:leveldb::__anon16	file:
SharedState	db/db_bench.cc	/^  SharedState()$/;"	f	struct:leveldb::__anon19::SharedState
SharedState	db/db_bench.cc	/^struct SharedState {$/;"	s	namespace:leveldb::__anon19	file:
ShortSuccessor	db/dbformat_test.cc	/^static std::string ShortSuccessor(const std::string& s) {$/;"	f	namespace:leveldb
Shorten	db/dbformat_test.cc	/^static std::string Shorten(const std::string& s, const std::string& l) {$/;"	f	namespace:leveldb
ShrinkSize	db/log_test.cc	/^  void ShrinkSize(int bytes) {$/;"	f	class:leveldb::log::LogTest
Signal	port/port_posix.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
SignalAll	port/port_posix.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
Size	db/autocompact_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::AutoCompactTest
Size	db/db_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Size	helpers/memenv/memenv.cc	/^  uint64_t Size() const { return size_; }$/;"	f	class:leveldb::__anon9::FileState
Size	table/table_test.cc	/^  uint64_t Size() const { return contents_.size(); }$/;"	f	class:leveldb::StringSource
Skewed	util/random.h	/^  uint32_t Skewed(int max_log) {$/;"	f	class:leveldb::Random
Skewed	util/random.h	/^  uint64_t Skewed(int max_log) {$/;"	f	class:leveldb::Random64
Skip	db/log_test.cc	/^    virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::log::LogTest::StringSource
Skip	helpers/memenv/memenv.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon9::SequentialFileImpl
Skip	util/env_posix.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon13::PosixSequentialFile
SkipEmptyDataBlocksBackward	table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
SkipEmptyDataBlocksBackward	table/two_level_iterator.cc	/^void TwoLevelIteratorGuards::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
SkipEmptyDataBlocksForward	table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
SkipEmptyDataBlocksForward	table/two_level_iterator.cc	/^void TwoLevelIteratorGuards::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
SkipList	db/skiplist.h	/^SkipList<Key,Comparator,Extractor>::SkipList(Comparator cmp, Extractor ext, Arena* arena)$/;"	f	class:leveldb::SkipList
SkipList	db/skiplist.h	/^class SkipList {$/;"	c	namespace:leveldb
SkipTest	db/skiplist_test.cc	/^class SkipTest { };$/;"	c	namespace:leveldb	file:
SkipTo	db/replay_iterator.cc	/^void ReplayIteratorImpl::SkipTo(const Slice& target) {$/;"	f	class:leveldb::ReplayIteratorImpl
SkipToInitialBlock	db/log_reader.cc	/^bool Reader::SkipToInitialBlock() {$/;"	f	class:leveldb::log::Reader
SkipToLast	db/replay_iterator.cc	/^void ReplayIteratorImpl::SkipToLast() {$/;"	f	class:leveldb::ReplayIteratorImpl
SleepForMicroseconds	include/pebblesdb/env.h	/^    SleepForMicroseconds(int micros)$/;"	f	class:leveldb::EnvWrapper
SleepForMicroseconds	util/env_posix.cc	/^  virtual void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::__anon13::PosixEnv
Slice	include/pebblesdb/slice.h	/^  Slice() : data_(""), size_(0) { }$/;"	f	class:leveldb::Slice
Slice	include/pebblesdb/slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) { }$/;"	f	class:leveldb::Slice
Slice	include/pebblesdb/slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) { }$/;"	f	class:leveldb::Slice
Slice	include/pebblesdb/slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) { }$/;"	f	class:leveldb::Slice
Slice	include/pebblesdb/slice.h	/^class Slice {$/;"	c	namespace:leveldb
SnappyCompress	db/db_bench.cc	/^  void SnappyCompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SnappyCompressionSupported	table/table_test.cc	/^static bool SnappyCompressionSupported() {$/;"	f	namespace:leveldb
SnappyUncompress	db/db_bench.cc	/^  void SnappyUncompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Snappy_Compress	port/port_posix.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	port/port_posix.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	port/port_posix.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snapshot	include/pebblesdb/db.h	/^class Snapshot {$/;"	c	namespace:leveldb
SnapshotImpl	db/snapshot.h	/^  SnapshotImpl()$/;"	f	class:leveldb::SnapshotImpl
SnapshotImpl	db/snapshot.h	/^class SnapshotImpl : public Snapshot {$/;"	c	namespace:leveldb
SnapshotList	db/snapshot.h	/^  SnapshotList()$/;"	f	class:leveldb::SnapshotList
SnapshotList	db/snapshot.h	/^class SnapshotList {$/;"	c	namespace:leveldb
SomeFileOverlapsRange	db/version_set.cc	/^  bool SomeFileOverlapsRange($/;"	f	namespace:leveldb
SortBySmallestGuard	db/version_set.cc	/^struct SortBySmallestGuard {$/;"	s	namespace:leveldb	file:
SpecialEnv	db/db_test.cc	/^  explicit SpecialEnv(Env* base) : EnvWrapper(base) {$/;"	f	class:leveldb::SpecialEnv
SpecialEnv	db/db_test.cc	/^class SpecialEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
StandardDeviation	util/histogram.cc	/^double Histogram::StandardDeviation() const {$/;"	f	class:leveldb::Histogram
Start	db/db_bench.cc	/^  void Start() {$/;"	f	class:leveldb::__anon19::Stats
Start	doc/bench/db_bench_sqlite3.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
Start	doc/bench/db_bench_tree_db.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
StartBlock	table/filter_block.cc	/^void FilterBlockBuilder::StartBlock(uint64_t block_offset) {$/;"	f	class:leveldb::FilterBlockBuilder
StartPhase	db/c_test.c	/^static void StartPhase(const char* name) {$/;"	f	file:
StartThread	include/pebblesdb/env.h	/^    StartThread(void (*f)(void *), void *a)$/;"	f	class:leveldb::EnvWrapper
StartThread	util/env_posix.cc	/^void PosixEnv::StartThread(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon13::PosixEnv
StartThreadAndReturnThreadId	db/db_test.cc	/^  pthread_t StartThreadAndReturnThreadId(void (*f)(void*), void* a) {$/;"	f	class:leveldb::SpecialEnv
StartThreadAndReturnThreadId	include/pebblesdb/env.h	/^    StartThreadAndReturnThreadId(void (*f)(void *), void *a)$/;"	f	class:leveldb::EnvWrapper
StartThreadAndReturnThreadId	util/env_posix.cc	/^pthread_t PosixEnv::StartThreadAndReturnThreadId(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon13::PosixEnv
StartThreadState	util/env_posix.cc	/^struct StartThreadState {$/;"	s	namespace:leveldb::__anon13::__anon14	file:
StartThreadWrapper	util/env_posix.cc	/^static void* StartThreadWrapper(void* arg) {$/;"	f	namespace:leveldb::__anon13
StartTimer	util/timer.h	/^	void StartTimer(TimerStep step) {$/;"	f	class:leveldb::Timer
State	db/skiplist_test.cc	/^    State() {$/;"	f	struct:leveldb::ConcurrentTest::State
State	db/skiplist_test.cc	/^  struct State {$/;"	s	class:leveldb::ConcurrentTest	file:
State	util/env_test.cc	/^struct State {$/;"	s	namespace:leveldb	file:
Stats	db/db_bench.cc	/^  Stats() $/;"	f	class:leveldb::__anon19::Stats
Stats	db/db_bench.cc	/^class Stats {$/;"	c	namespace:leveldb::__anon19	file:
Status	include/pebblesdb/status.h	/^  Status() : state_(NULL) { }$/;"	f	class:leveldb::Status
Status	include/pebblesdb/status.h	/^class Status {$/;"	c	namespace:leveldb
Status	include/pebblesdb/status.h	/^inline Status::Status(const Status& s) : state_(NULL) {$/;"	f	class:leveldb::Status
Status	util/status.cc	/^Status::Status(Code c, const Slice& msg, const Slice& msg2)$/;"	f	class:leveldb::Status
StepErrorCheck	doc/bench/db_bench_sqlite3.cc	/^static void StepErrorCheck(int status) {$/;"	f	file:
Stop	db/db_bench.cc	/^  void Stop() {$/;"	f	class:leveldb::__anon19::Stats
Stop	doc/bench/db_bench_sqlite3.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
Stop	doc/bench/db_bench_tree_db.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
StringBuilder	util/string_builder.h	/^  StringBuilder()$/;"	f	struct:leveldb::StringBuilder
StringBuilder	util/string_builder.h	/^struct StringBuilder {$/;"	s	namespace:leveldb
StringDest	db/log_test.cc	/^  class StringDest : public ConcurrentWritableFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSink	table/table_test.cc	/^class StringSink: public WritableFile {$/;"	c	namespace:leveldb	file:
StringSource	db/log_test.cc	/^    StringSource() : force_error_(false), returned_partial_(false) { }$/;"	f	class:leveldb::log::LogTest::StringSource
StringSource	db/log_test.cc	/^  class StringSource : public SequentialFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSource	table/table_test.cc	/^  StringSource(const Slice& contents)$/;"	f	class:leveldb::StringSource
StringSource	table/table_test.cc	/^class StringSource: public RandomAccessFile {$/;"	c	namespace:leveldb	file:
Sync	db/log_test.cc	/^    virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Sync	helpers/memenv/memenv.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon9::WritableFileImpl
Sync	table/table_test.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Sync	util/env_posix.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon13::PosixMmapFile
Sync	util/env_posix.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon13::PosixWritableFile
SyncDirIfManifest	util/env_posix.cc	/^  Status SyncDirIfManifest() {$/;"	f	class:leveldb::__anon13::PosixMmapFile
SyncDirIfManifest	util/env_posix.cc	/^  Status SyncDirIfManifest() {$/;"	f	class:leveldb::__anon13::PosixWritableFile
TABLE_TEST	table/table_test.cc	/^  TABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
TCONCAT	util/testharness.h	114;"	d
TCONCAT1	util/testharness.h	115;"	d
TEST	db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadAll) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputError)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputErrorParanoid)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, CorruptedDescriptor)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, MissingDescriptor)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, NewFileErrorDuringWrite)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, RecoverWriteError)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, Recovery)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, SequenceNumberRecovery)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, TableFile)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, TableFileIndexData)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, TableFileRepair)$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, UnrelatedKeys)$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ApproximateSizes) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, BloomFilter) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, CompactionsGenerateMultipleFiles) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ComparatorCheck) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, CustomComparator) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DBOpen_Options) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DeletionMarkers1) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DeletionMarkers2) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2EInsertDescRead)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2EInsertIncRead)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2EInsertIncReadRandom)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2EInsertRandomRead)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2EInsertRandomReadRandom)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2EScanComplete)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2EScanOneLevel)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2ESeekOneLevel)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2ESeekRandom)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2ETest)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsE2EUpdate)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsInsertCompactionReopen)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMGuardsInsertReopen)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMInsert) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMRecover) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMSentinelInsertCompactionReopen)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMSentinelInsertReopen)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMSentinelReadCompactionReopen)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FLSMSentinelReadReopen)  {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FilesDeletedAfterCompaction) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetFromImmutableLayer) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetFromVersions) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetLevel0Ordering) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetOrderedByLevels) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetPicksCorrectFile) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetSnapshot) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, HiddenValuesAreRemoved) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterEmpty) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterMulti) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterMultiWithDelete) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterSingle) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterSmallAndLargeMix) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IteratorPinsRef) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Locking) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ManifestWriteError) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, MinorCompactionsHappen) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, MissingSSTFile) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, MultiThreaded) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, NoSpace) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, NonWritableFileSystem) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, OverlapInLevel0) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, PutDeleteGet) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Randomized) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Recover) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, RecoverDuringMemtableCompaction) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, RecoverWithLargeLog) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, RecoveryWithEmptyLog) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Replay) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Snapshot) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, SparseMerge) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, StillReadSST) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, WriteSyncError) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortSeparator) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortestSuccessor) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKey_EncodeDecode) {$/;"	f	namespace:leveldb
TEST	db/filename_test.cc	/^TEST(FileNameTest, Construction) {$/;"	f	namespace:leveldb
TEST	db/filename_test.cc	/^TEST(FileNameTest, Parse) {$/;"	f	namespace:leveldb
TEST	db/log_test.cc	/^TEST(LogTest, AlignedEof) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, BadLength) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, BadLengthAtEndIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, BadRecordType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ChecksumMismatch) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, Empty) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ErrorJoinsRecords) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, Fragmentation) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ManyBlocks) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, MarginalTrailer) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, MarginalTrailer2) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, MissingLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, PartialLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, RandomRead) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadEnd) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadError) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadFourthFirstBlockTrailer) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadFourthLastBlock) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadFourthMiddleBlock) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadFourthOneOff) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadFourthStart) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadPastEnd) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadSecondOneOff) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadSecondStart) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadSecondTenThousand) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadStart) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadThirdOneOff) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadThirdStart) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadWrite) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ShortTrailer) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, TruncatedTrailingRecordIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedFirstType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedFullType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedLastType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedMiddleType) {$/;"	f	namespace:leveldb::log
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent1) { RunConcurrent(1); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent2) { RunConcurrent(2); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent3) { RunConcurrent(3); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent4) { RunConcurrent(4); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent5) { RunConcurrent(5); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, ConcurrentWithoutThreads) {$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, InsertAndLookup) {$/;"	f	namespace:leveldb
TEST	db/version_edit_test.cc	/^TEST(VersionEditTest, EncodeDecode) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, Multiple) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, MultipleNullBoundaries) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, OverlapSequenceChecks) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, OverlappingFiles) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, Single) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Append) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Corruption) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Multiple) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Basics) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, DBTest) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, LargeWrite) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Locks) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Misc) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	issues/issue178_test.cc	/^TEST(Issue178, Test) {$/;"	f	namespace:__anon8
TEST	issues/issue200_test.cc	/^TEST(Issue200, Test) {$/;"	f	namespace:leveldb
TEST	table/filter_block_test.cc	/^TEST(FilterBlockTest, EmptyBuilder) {$/;"	f	namespace:leveldb
TEST	table/filter_block_test.cc	/^TEST(FilterBlockTest, MultiChunk) {$/;"	f	namespace:leveldb
TEST	table/filter_block_test.cc	/^TEST(FilterBlockTest, SingleChunk) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, Empty) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, Randomized) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, RandomizedLongDB) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleEmptyKey) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleMulti) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleSingle) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleSpecialKey) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, ZeroRestartPointsInBlock) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(MemTableTest, Simple) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfCompressed) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfPlain) {$/;"	f	namespace:leveldb
TEST	util/arena_test.cc	/^TEST(ArenaTest, Empty) {$/;"	f	namespace:leveldb
TEST	util/arena_test.cc	/^TEST(ArenaTest, Simple) {$/;"	f	namespace:leveldb
TEST	util/bloom_test.cc	/^TEST(BloomTest, EmptyFilter) {$/;"	f	namespace:leveldb
TEST	util/bloom_test.cc	/^TEST(BloomTest, Small) {$/;"	f	namespace:leveldb
TEST	util/bloom_test.cc	/^TEST(BloomTest, VaryingLengths) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, EntriesArePinned) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, Erase) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, EvictionPolicy) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, HeavyEntries) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, HitAndMiss) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, NewId) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, EncodingOutput) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Fixed32) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Fixed64) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Strings) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint32) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint32Overflow) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint32Truncation) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint64) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint64Overflow) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint64Truncation) {$/;"	f	namespace:leveldb
TEST	util/crc32c_test.cc	/^TEST(CRC, Extend) {$/;"	f	namespace:leveldb::crc32c
TEST	util/crc32c_test.cc	/^TEST(CRC, LargeBuffer) {$/;"	f	namespace:leveldb::crc32c
TEST	util/crc32c_test.cc	/^TEST(CRC, Mask) {$/;"	f	namespace:leveldb::crc32c
TEST	util/crc32c_test.cc	/^TEST(CRC, StandardResults) {$/;"	f	namespace:leveldb::crc32c
TEST	util/crc32c_test.cc	/^TEST(CRC, Values) {$/;"	f	namespace:leveldb::crc32c
TEST	util/env_test.cc	/^TEST(EnvPosixTest, RunImmediately) {$/;"	f	namespace:leveldb
TEST	util/env_test.cc	/^TEST(EnvPosixTest, RunMany) {$/;"	f	namespace:leveldb
TEST	util/env_test.cc	/^TEST(EnvPosixTest, StartThread) {$/;"	f	namespace:leveldb
TEST	util/testharness.h	117;"	d
TESTHARNESS	Makefile	/^TESTHARNESS = util\/testharness.cc $(TESTUTIL)$/;"	m
TESTS	Makefile	/^TESTS = $(check_PROGRAMS)$/;"	m
TESTUTIL	Makefile	/^TESTUTIL = util\/testutil.cc$/;"	m
TEST_ComapactFilesToSingleLevel	db/db_impl.cc	/^void DBImpl::TEST_ComapactFilesToSingleLevel() {$/;"	f	class:leveldb::DBImpl
TEST_CompactAllLevels	db/db_impl.cc	/^void DBImpl::TEST_CompactAllLevels() {$/;"	f	class:leveldb::DBImpl
TEST_CompactMemTable	db/db_impl.cc	/^Status DBImpl::TEST_CompactMemTable() {$/;"	f	class:leveldb::DBImpl
TEST_CompactOnce	db/db_impl.cc	/^void DBImpl::TEST_CompactOnce() {$/;"	f	class:leveldb::DBImpl
TEST_CompactRange	db/db_impl.cc	/^void DBImpl::TEST_CompactRange(unsigned level, const Slice* begin,const Slice* end) {$/;"	f	class:leveldb::DBImpl
TEST_MaxNextLevelOverlappingBytes	db/db_impl.cc	/^int64_t DBImpl::TEST_MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::DBImpl
TEST_NewInternalIterator	db/db_impl.cc	/^Iterator* DBImpl::TEST_NewInternalIterator() {$/;"	f	class:leveldb::DBImpl
TEST_ReduceNumActiveLevelsByOne	db/db_impl.cc	/^void DBImpl::TEST_ReduceNumActiveLevelsByOne() {$/;"	f	class:leveldb::DBImpl
TOTAL_BACKGROUND_COMPACTION	util/timer.h	/^	TOTAL_BACKGROUND_COMPACTION,$/;"	e	enum:leveldb::TimerStep
TOTAL_MEMTABLE_COMPACTION	util/timer.h	/^	TOTAL_MEMTABLE_COMPACTION,$/;"	e	enum:leveldb::TimerStep
Table	db/memtable.h	/^  typedef SkipList<const char*, KeyComparator, KeyExtractor> Table;$/;"	t	class:leveldb::MemTable
Table	include/pebblesdb/table.h	/^  explicit Table(Rep* rep) : rep_(rep) { }$/;"	f	class:leveldb::Table
Table	include/pebblesdb/table.h	/^class Table {$/;"	c	namespace:leveldb
TableAndFile	db/table_cache.cc	/^struct TableAndFile {$/;"	s	namespace:leveldb	file:
TableBuilder	include/pebblesdb/table_builder.h	/^class TableBuilder {$/;"	c	namespace:leveldb
TableBuilder	table/table_builder.cc	/^TableBuilder::TableBuilder(const Options& options, WritableFile* file)$/;"	f	class:leveldb::TableBuilder
TableCache	db/table_cache.cc	/^TableCache::TableCache(const std::string& dbname,$/;"	f	class:leveldb::TableCache
TableCache	db/table_cache.h	/^class TableCache {$/;"	c	namespace:leveldb
TableConstructor	table/table_test.cc	/^  TableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::TableConstructor
TableConstructor	table/table_test.cc	/^class TableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
TableFileName	db/filename.cc	/^std::string TableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
TableInfo	db/repair.cc	/^    TableInfo() : meta(), max_sequence() {}$/;"	f	struct:leveldb::__anon27::Repairer::TableInfo
TableInfo	db/repair.cc	/^  struct TableInfo {$/;"	s	class:leveldb::__anon27::Repairer	file:
TableTest	table/table_test.cc	/^class TableTest { };$/;"	c	namespace:leveldb	file:
Tag	db/version_edit.cc	/^enum Tag {$/;"	g	namespace:leveldb	file:
TempFileName	db/filename.cc	/^std::string TempFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
Test	table/table_test.cc	/^  void Test(Random* rnd) {$/;"	f	class:leveldb::Harness
Test	util/testharness.cc	/^struct Test {$/;"	s	namespace:leveldb::test::__anon12	file:
TestArgs	table/table_test.cc	/^struct TestArgs {$/;"	s	namespace:leveldb	file:
TestBackwardScan	table/table_test.cc	/^  void TestBackwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestEncodeDecode	db/version_edit_test.cc	/^static void TestEncodeDecode(const VersionEdit& edit) {$/;"	f	namespace:leveldb
TestForwardScan	table/table_test.cc	/^  void TestForwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestHashFilter	table/filter_block_test.cc	/^class TestHashFilter : public FilterPolicy {$/;"	c	namespace:leveldb	file:
TestKey	db/dbformat_test.cc	/^static void TestKey(const std::string& key,$/;"	f	namespace:leveldb
TestRandomAccess	table/table_test.cc	/^  void TestRandomAccess(Random* rnd,$/;"	f	class:leveldb::Harness
TestState	db/skiplist_test.cc	/^  explicit TestState(int s)$/;"	f	class:leveldb::TestState
TestState	db/skiplist_test.cc	/^class TestState {$/;"	c	namespace:leveldb	file:
TestType	table/table_test.cc	/^enum TestType {$/;"	g	namespace:leveldb	file:
Tester	util/testharness.h	/^  Tester(const char* f, int l)$/;"	f	class:leveldb::test::Tester
Tester	util/testharness.h	/^class Tester {$/;"	c	namespace:leveldb::test
ThreadArg	db/db_bench.cc	/^  struct ThreadArg {$/;"	s	class:leveldb::Benchmark	file:
ThreadBody	db/db_bench.cc	/^  static void ThreadBody(void* v) {$/;"	f	class:leveldb::Benchmark	file:
ThreadBody	util/env_test.cc	/^static void ThreadBody(void* arg) {$/;"	f	namespace:leveldb
ThreadState	db/db_bench.cc	/^  ThreadState(int index)$/;"	f	struct:leveldb::__anon19::ThreadState
ThreadState	db/db_bench.cc	/^struct ThreadState {$/;"	s	namespace:leveldb::__anon19	file:
ThreadStatus	db/version_set.h	/^enum ThreadStatus {$/;"	g	namespace:leveldb
Timer	util/timer.h	/^	Timer() {$/;"	f	class:leveldb::Timer
Timer	util/timer.h	/^class Timer {$/;"	c	namespace:leveldb
TimerStep	util/timer.h	/^enum TimerStep {$/;"	g	namespace:leveldb
TmpDir	util/testharness.cc	/^std::string TmpDir() {$/;"	f	namespace:leveldb::test
ToString	include/pebblesdb/slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	class:leveldb::Slice
ToString	table/table_test.cc	/^  std::string ToString(const Iterator* it) {$/;"	f	class:leveldb::Harness
ToString	table/table_test.cc	/^  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {$/;"	f	class:leveldb::Harness
ToString	table/table_test.cc	/^  std::string ToString(const KVMap& data,$/;"	f	class:leveldb::Harness
ToString	util/histogram.cc	/^std::string Histogram::ToString() const {$/;"	f	class:leveldb::Histogram
ToString	util/status.cc	/^std::string Status::ToString() const {$/;"	f	class:leveldb::Status
TotalFileSize	db/version_set.cc	/^static int64_t TotalFileSize(const std::vector<FileMetaData*>& files) {$/;"	f	namespace:leveldb
TotalGuards	db/db_test.cc	/^  int TotalGuards() {$/;"	f	class:leveldb::DBTest
TotalGuards	db/version_set.h	/^  int TotalGuards() const {$/;"	f	class:leveldb::Version
TotalTableFiles	db/db_test.cc	/^  int TotalTableFiles() {$/;"	f	class:leveldb::DBTest
TrimSpace	db/db_bench.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon19
TrimSpace	doc/bench/db_bench_sqlite3.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon33
TrimSpace	doc/bench/db_bench_tree_db.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon32
TryReopen	db/corruption_test.cc	/^    TryReopen()$/;"	f	class:leveldb::CorruptionTest
TryReopen	db/db_bench.cc	/^  void TryReopen() {$/;"	f	class:leveldb::Benchmark
TryReopen	db/db_test.cc	/^  Status TryReopen(Options* options) {$/;"	f	class:leveldb::DBTest
TwoLevelIterator	table/two_level_iterator.cc	/^TwoLevelIterator::TwoLevelIterator($/;"	f	class:leveldb::__anon4::TwoLevelIterator
TwoLevelIterator	table/two_level_iterator.cc	/^class TwoLevelIterator: public Iterator {$/;"	c	namespace:leveldb::__anon4	file:
TwoLevelIteratorGuards	table/two_level_iterator.cc	/^TwoLevelIteratorGuards::TwoLevelIteratorGuards($/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
TwoLevelIteratorGuards	table/two_level_iterator.cc	/^class TwoLevelIteratorGuards: public Iterator {$/;"	c	namespace:leveldb::__anon4	file:
UNINITIALIZED	db/version_set.h	/^	UNINITIALIZED,$/;"	e	enum:leveldb::SeekReturnStatus
UNLOCK_FUNCTION	port/thread_annotations.h	52;"	d
UNLOCK_FUNCTION	util/mutexlock.h	/^  ~MutexLock() UNLOCK_FUNCTION() { this->mu_->Unlock(); }$/;"	f	class:leveldb::MutexLock
USE_ATOMIC_FENCE	port/atomic_pointer.h	34;"	d
USE_OS_MEMBARRIER	port/atomic_pointer.h	37;"	d
UTIL_TIMER_H_	util/timer.h	9;"	d
Uniform	util/random.h	/^  uint32_t Uniform(int n) { return Next() % n; }$/;"	f	class:leveldb::Random
Uniform	util/random.h	/^  uint64_t Uniform(uint64_t n) {$/;"	f	class:leveldb::Random64
Unlock	port/port_posix.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
UnlockFile	helpers/memenv/memenv.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon9::InMemoryEnv
UnlockFile	include/pebblesdb/env.h	/^    UnlockFile(FileLock *l)$/;"	f	class:leveldb::EnvWrapper
UnlockFile	util/env_posix.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon13::PosixEnv
UnmapSegment	util/env_posix.cc	/^  bool UnmapSegment(char* base) {$/;"	f	class:leveldb::__anon13::PosixMmapFile	file:
Unmask	util/crc32c.h	/^inline uint32_t Unmask(uint32_t masked_crc) {$/;"	f	namespace:leveldb::crc32c
Unref	db/memtable.h	/^  void Unref() {$/;"	f	class:leveldb::MemTable
Unref	db/version_set.cc	/^void Version::Unref() {$/;"	f	class:leveldb::Version
Unref	helpers/memenv/memenv.cc	/^  void Unref() {$/;"	f	class:leveldb::__anon9::FileState
Unref	util/cache.cc	/^void LRUCache::Unref(LRUHandle* e) {$/;"	f	class:leveldb::__anon16::LRUCache
UnrefEntry	db/table_cache.cc	/^static void UnrefEntry(void* arg1, void* arg2) {$/;"	f	namespace:leveldb
Update	table/iterator_wrapper.h	/^  void Update() {$/;"	f	class:leveldb::IteratorWrapper
UpdateGuards	db/version_edit.h	/^  void UpdateGuards(uint64_t* guard_array) {$/;"	f	class:leveldb::VersionEdit
UpdateStats	db/version_set.cc	/^bool Version::UpdateStats(const GetStats& stats) {$/;"	f	class:leveldb::Version
Usage	db/leveldb_main.cc	/^static void Usage() {$/;"	f	file:
VERSION	Makefile	/^VERSION = 1.0.dev$/;"	m
VERSION	config.h	135;"	d
Valid	db/db_iter.cc	/^  virtual bool Valid() const { return valid_; }$/;"	f	class:leveldb::__anon20::DBIter
Valid	db/db_test.cc	/^    virtual bool Valid() const { return iter_ != map_->end(); }$/;"	f	class:leveldb::ModelDB::ModelIter
Valid	db/memtable.cc	/^  virtual bool Valid() const { return iter_.Valid(); }$/;"	f	class:leveldb::MemTableIterator
Valid	db/replay_iterator.cc	/^bool ReplayIteratorImpl::Valid() {$/;"	f	class:leveldb::ReplayIteratorImpl
Valid	db/skiplist.h	/^inline bool SkipList<Key,Comparator,Extractor>::Iterator::Valid() const {$/;"	f	class:leveldb::SkipList::Iterator
Valid	db/version_set.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Valid	db/version_set.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::Version::LevelGuardNumIterator
Valid	table/block.cc	/^  virtual bool Valid() const { return current_ < restarts_; }$/;"	f	class:leveldb::Block::Iter
Valid	table/iterator.cc	/^  virtual bool Valid() const { return false; }$/;"	f	class:leveldb::__anon3::EmptyIterator
Valid	table/iterator_wrapper.h	/^  bool Valid() const        { return valid_; }$/;"	f	class:leveldb::IteratorWrapper
Valid	table/merger.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon5::MergingIterator
Valid	table/table_test.cc	/^  virtual bool Valid() const { return iter_->Valid(); }$/;"	f	class:leveldb::KeyConvertingIterator
Valid	table/two_level_iterator.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
Valid	table/two_level_iterator.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
ValidateTimestamp	db/db_impl.cc	/^bool DBImpl::ValidateTimestamp(const std::string& ts) {$/;"	f	class:leveldb::DBImpl
ValidateTimestamp	db/db_test.cc	/^  virtual bool ValidateTimestamp(const std::string&) {$/;"	f	class:leveldb::ModelDB
Value	db/corruption_test.cc	/^    Value(int k, std::string *storage)$/;"	f	class:leveldb::CorruptionTest
Value	util/cache.cc	/^  virtual void* Value(Handle* handle) {$/;"	f	class:leveldb::__anon16::ShardedLRUCache
Value	util/crc32c.h	/^inline uint32_t Value(const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ValueType	db/dbformat.h	/^enum ValueType {$/;"	g	namespace:leveldb
VarintLength	util/coding.cc	/^int VarintLength(uint64_t v) {$/;"	f	namespace:leveldb
VerifyIteration	db/db_bench.cc	/^  int VerifyIteration(int print_every = 100000000) {$/;"	f	class:leveldb::Benchmark
VerifyIteration	db/db_test.cc	/^  int VerifyIteration(int print_every = 100000000) {$/;"	f	class:leveldb::DBTest
Version	db/version_set.h	/^  explicit Version(VersionSet* vset)$/;"	f	class:leveldb::Version
Version	db/version_set.h	/^class Version {$/;"	c	namespace:leveldb
VersionEdit	db/version_edit.h	/^  VersionEdit()$/;"	f	class:leveldb::VersionEdit
VersionEdit	db/version_edit.h	/^class VersionEdit {$/;"	c	namespace:leveldb
VersionEditPrinter	db/leveldb_main.cc	/^static void VersionEditPrinter(Slice record) {$/;"	f	namespace:leveldb::__anon30
VersionEditPrinter	leveldb-verify.cc	/^static void VersionEditPrinter(Slice record) {$/;"	f	namespace:leveldb::__anon31
VersionEditTest	db/version_edit_test.cc	/^class VersionEditTest { };$/;"	c	namespace:leveldb	file:
VersionSet	db/version_set.cc	/^VersionSet::VersionSet(const std::string& dbname,$/;"	f	class:leveldb::VersionSet
VersionSet	db/version_set.h	/^class VersionSet {$/;"	c	namespace:leveldb
WANAL_CFLAGS	Makefile	/^WANAL_CFLAGS =  $/;"	m
WANAL_CXXFLAGS	Makefile	/^WANAL_CXXFLAGS =  $/;"	m
WRITE_INSERT_INTO_VERSION	util/timer.h	/^	WRITE_INSERT_INTO_VERSION,$/;"	e	enum:leveldb::TimerStep
WRITE_LEVEL0_TABLE_GUARDS	util/timer.h	/^	WRITE_LEVEL0_TABLE_GUARDS,$/;"	e	enum:leveldb::TimerStep
WRITE_LOG_ADDRECORD	util/timer.h	/^	WRITE_LOG_ADDRECORD,$/;"	e	enum:leveldb::TimerStep
WRITE_LOG_FILE_SYNC	util/timer.h	/^	WRITE_LOG_FILE_SYNC,$/;"	e	enum:leveldb::TimerStep
WRITE_OVERALL_TIME	util/timer.h	/^	WRITE_OVERALL_TIME,$/;"	e	enum:leveldb::TimerStep
WRITE_SEQUENCE_WRITE_BEGIN_TOTAL	util/timer.h	/^	WRITE_SEQUENCE_WRITE_BEGIN_TOTAL,$/;"	e	enum:leveldb::TimerStep
WRITE_SEQUENCE_WRITE_END_TOTAL	util/timer.h	/^	WRITE_SEQUENCE_WRITE_END_TOTAL,$/;"	e	enum:leveldb::TimerStep
WRITE_SET_GUARDS	util/timer.h	/^	WRITE_SET_GUARDS,$/;"	e	enum:leveldb::TimerStep
WRITE_SET_SEQUENCE_CREATE_NEW_BATCH	util/timer.h	/^	WRITE_SET_SEQUENCE_CREATE_NEW_BATCH,$/;"	e	enum:leveldb::TimerStep
Wait	db/skiplist_test.cc	/^  void Wait(ReaderState s) {$/;"	f	class:leveldb::TestState
Wait	port/port_posix.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
WaitForStableState	db/db_bench.cc	/^  void WaitForStableState(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WaitForStableStateSinglLevel	db/db_bench.cc	/^  void WaitForStableStateSinglLevel(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WaitForThread	db/db_test.cc	/^  void WaitForThread(unsigned long int th, void** return_status) {$/;"	f	class:leveldb::SpecialEnv
WaitForThread	include/pebblesdb/env.h	/^    WaitForThread(unsigned long int th, void **return_status)$/;"	f	class:leveldb::EnvWrapper
WaitForThread	util/env_posix.cc	/^void PosixEnv::WaitForThread(unsigned long int th, void** return_status) {$/;"	f	class:leveldb::__anon13::PosixEnv
WaitOutWriters	db/db_impl.cc	/^void DBImpl::WaitOutWriters() {$/;"	f	class:leveldb::DBImpl
WalCheckpoint	doc/bench/db_bench_sqlite3.cc	/^static void WalCheckpoint(sqlite3* db_) {$/;"	f	file:
WritableFile	include/pebblesdb/env.h	/^    WritableFile()$/;"	f	class:leveldb::WritableFile
WritableFile	include/pebblesdb/env.h	/^class WritableFile$/;"	c	namespace:leveldb
WritableFileImpl	helpers/memenv/memenv.cc	/^  WritableFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon9::WritableFileImpl
WritableFileImpl	helpers/memenv/memenv.cc	/^class WritableFileImpl : public WritableFile {$/;"	c	namespace:leveldb::__anon9	file:
Write	db/db_impl.cc	/^Status DBImpl::Write(const WriteOptions& options, WriteBatch* updates) {$/;"	f	class:leveldb::DBImpl
Write	db/db_test.cc	/^  virtual Status Write(const WriteOptions& options, WriteBatch* batch) {$/;"	f	class:leveldb::ModelDB
Write	db/log_test.cc	/^  void Write(const std::string& msg) {$/;"	f	class:leveldb::log::LogTest
Write	doc/bench/db_bench_sqlite3.cc	/^  void Write(bool write_sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark
Write	doc/bench/db_bench_tree_db.cc	/^  void Write(bool sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark	file:
WriteAt	db/log_test.cc	/^    virtual Status WriteAt(uint64_t offset, const Slice& slice) {$/;"	f	class:leveldb::log::LogTest::StringDest
WriteAt	table/table_test.cc	/^  virtual Status WriteAt(uint64_t offset, const Slice& slice) {$/;"	f	class:leveldb::StringSink
WriteAt	util/env_posix.cc	/^  virtual Status WriteAt(uint64_t offset, const Slice& data) {$/;"	f	class:leveldb::__anon13::PosixMmapFile
WriteBatch	db/write_batch.cc	/^WriteBatch::WriteBatch()$/;"	f	class:leveldb::WriteBatch
WriteBatch	include/pebblesdb/write_batch.h	/^class WriteBatch {$/;"	c	namespace:leveldb
WriteBatchInternal	db/write_batch_internal.h	/^class WriteBatchInternal {$/;"	c	namespace:leveldb
WriteBatchItemPrinter	db/leveldb_main.cc	/^  WriteBatchItemPrinter()$/;"	f	class:leveldb::__anon30::WriteBatchItemPrinter
WriteBatchItemPrinter	db/leveldb_main.cc	/^class WriteBatchItemPrinter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon30	file:
WriteBatchItemPrinter	leveldb-verify.cc	/^  WriteBatchItemPrinter()$/;"	f	class:leveldb::__anon31::WriteBatchItemPrinter
WriteBatchItemPrinter	leveldb-verify.cc	/^class WriteBatchItemPrinter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon31	file:
WriteBatchPrinter	db/leveldb_main.cc	/^static void WriteBatchPrinter(Slice record) {$/;"	f	namespace:leveldb::__anon30
WriteBatchPrinter	leveldb-verify.cc	/^static void WriteBatchPrinter(Slice record) {$/;"	f	namespace:leveldb::__anon31
WriteBatchTest	db/write_batch_test.cc	/^class WriteBatchTest { };$/;"	c	namespace:leveldb	file:
WriteBlock	table/table_builder.cc	/^void TableBuilder::WriteBlock(BlockBuilder* block, BlockHandle* handle) {$/;"	f	class:leveldb::TableBuilder
WriteDescriptor	db/repair.cc	/^  Status WriteDescriptor() {$/;"	f	class:leveldb::__anon27::Repairer	file:
WriteInitialOffsetLog	db/log_test.cc	/^  void WriteInitialOffsetLog() {$/;"	f	class:leveldb::log::LogTest
WriteLevel0TableGuards	db/db_impl.cc	/^Status DBImpl::WriteLevel0TableGuards(MemTable* mem, VersionEdit* edit,$/;"	f	class:leveldb::DBImpl
WriteOptions	include/pebblesdb/options.h	/^  WriteOptions()$/;"	f	struct:leveldb::WriteOptions
WriteOptions	include/pebblesdb/options.h	/^struct WriteOptions {$/;"	s	namespace:leveldb
WriteRandom	db/db_bench.cc	/^  void WriteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteRawBlock	table/table_builder.cc	/^void TableBuilder::WriteRawBlock(const Slice& block_contents,$/;"	f	class:leveldb::TableBuilder
WriteSeq	db/db_bench.cc	/^  void WriteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteSnapshot	db/version_set.cc	/^Status VersionSet::WriteSnapshot(log::Writer* log) {$/;"	f	class:leveldb::VersionSet
WriteStep	db/skiplist_test.cc	/^  void WriteStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
WriteStringToFile	util/env.cc	/^Status WriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteStringToFileSync	util/env.cc	/^Status WriteStringToFileSync(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteToFile	db/db_bench.cc	/^  static void WriteToFile(void* arg, const char* buf, int n) {$/;"	f	class:leveldb::Benchmark	file:
Writer	db/db_impl.cc	/^  explicit Writer(port::Mutex* mtx)$/;"	f	struct:leveldb::DBImpl::Writer
Writer	db/db_impl.cc	/^struct DBImpl::Writer {$/;"	s	class:leveldb::DBImpl	file:
Writer	db/log_writer.cc	/^Writer::Writer(ConcurrentWritableFile* dest)$/;"	f	class:leveldb::log::Writer
Writer	db/log_writer.h	/^class Writer {$/;"	c	namespace:leveldb::log
WrittenBytes	db/log_test.cc	/^  size_t WrittenBytes() const {$/;"	f	class:leveldb::log::LogTest
YCSB	db/db_bench.cc	/^  void YCSB(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
_MURMURHASH3_H_	db/murmurhash3.h	6;"	d
_WINSOCKAPI_	util/atomic.h	46;"	d
__STDC_LIMIT_MACROS	db/autocompact_test.cc	5;"	d	file:
__STDC_LIMIT_MACROS	db/corruption_test.cc	5;"	d	file:
__STDC_LIMIT_MACROS	db/db_impl.cc	5;"	d	file:
__STDC_LIMIT_MACROS	db/db_impl.h	8;"	d
__STDC_LIMIT_MACROS	db/db_iter.cc	5;"	d	file:
__STDC_LIMIT_MACROS	db/db_test.cc	5;"	d	file:
__STDC_LIMIT_MACROS	db/memtable.cc	5;"	d	file:
__STDC_LIMIT_MACROS	db/repair.cc	27;"	d	file:
__STDC_LIMIT_MACROS	db/replay_iterator.cc	5;"	d	file:
__STDC_LIMIT_MACROS	db/skiplist.h	27;"	d
__STDC_LIMIT_MACROS	db/skiplist_test.cc	5;"	d	file:
__STDC_LIMIT_MACROS	db/version_set.cc	5;"	d	file:
__STDC_LIMIT_MACROS	db/write_batch.cc	17;"	d	file:
__STDC_LIMIT_MACROS	db/write_batch_test.cc	5;"	d	file:
__STDC_LIMIT_MACROS	table/table_test.cc	5;"	d	file:
__STDC_LIMIT_MACROS	util/logging.cc	5;"	d	file:
__sync_val_compare_and_swap	util/atomic.h	/^inline uint64_t __sync_val_compare_and_swap(volatile uint64_t* ptr,$/;"	f	namespace:leveldb::atomic
_backup	benchmark.cc	/^static long _backup = 0;$/;"	v	file:
_block_size	benchmark.cc	/^static long _block_size = 4096;$/;"	v	file:
_dir	benchmark.cc	/^static const char* _dir = ".";$/;"	v	file:
_done	benchmark.cc	/^static long _done = 0;$/;"	v	file:
_number	benchmark.cc	/^static long _number = 1000000;$/;"	v	file:
_output	benchmark.cc	/^static const char* _output = "benchmark.dat";$/;"	v	file:
_threads	benchmark.cc	/^static long _threads = 1;$/;"	v	file:
_write_buf	benchmark.cc	/^static long _write_buf = 64ULL * 1024ULL * 1024ULL;$/;"	v	file:
abs_builddir	Makefile	/^abs_builddir = \/home\/young\/ExperDB\/SUPE\/pebblesdb\/src$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/young\/ExperDB\/SUPE\/pebblesdb\/src$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/young\/ExperDB\/SUPE\/pebblesdb\/src$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/young\/ExperDB\/SUPE\/pebblesdb\/src$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_check_decl	configure	/^ac_fn_cxx_check_decl ()$/;"	f
ac_fn_cxx_check_func	configure	/^ac_fn_cxx_check_func ()$/;"	f
ac_fn_cxx_check_header_compile	configure	/^ac_fn_cxx_check_header_compile ()$/;"	f
ac_fn_cxx_check_header_mongrel	configure	/^ac_fn_cxx_check_header_mongrel ()$/;"	f
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	configure	/^ac_fn_cxx_try_link ()$/;"	f
ac_fn_cxx_try_run	configure	/^ac_fn_cxx_try_run ()$/;"	f
added_complete_guards	db/version_set.cc	/^    GuardSet* added_complete_guards;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
added_files	db/version_set.cc	/^    FileSet* added_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
added_guards	db/version_set.cc	/^    GuardSet* added_guards;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
adjustPartialTiering	db/dbformat.h	/^static const unsigned adjustPartialTiering = true;$/;"	m	namespace:leveldb::config
aix_post_process_depfile	depcomp	/^aix_post_process_depfile ()$/;"	f
align_	util/arena.h	/^  const size_t align_;$/;"	m	class:leveldb::Arena
allow_background_activity_	db/db_impl.h	/^  bool allow_background_activity_;$/;"	m	class:leveldb::DBImpl
allowed_	util/env_posix.cc	/^  port::AtomicPointer allowed_;$/;"	m	class:leveldb::__anon13::MmapLimiter	file:
allowed_seeks	db/version_edit.h	/^  int allowed_seeks;          \/\/ Seeks allowed until compaction$/;"	m	struct:leveldb::FileMetaData
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__DEPENDENCIES_1	Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DIST_COMMON	Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/config.h.in \\$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/anal_warnings.m4 \\$/;"	m
am__base_list	Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__distuninstallcheck_listfiles	Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__install_max	Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgconfigdir)" \\$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = { \\$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__objects_1	Makefile	/^am__objects_1 = util\/testutil.$(OBJEXT)$/;"	m
am__objects_2	Makefile	/^am__objects_2 = util\/testharness.$(OBJEXT) $(am__objects_1)$/;"	m
am__post_remove_distdir	Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tty_colors	Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors_dummy	Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__uninstall_files_from_dir	Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_arena_test_OBJECTS	Makefile	/^am_arena_test_OBJECTS = util\/arena_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_autocompact_test_OBJECTS	Makefile	/^am_autocompact_test_OBJECTS = db\/autocompact_test.$(OBJEXT) \\$/;"	m
am_benchmark_OBJECTS	Makefile	/^am_benchmark_OBJECTS = benchmark.$(OBJEXT)$/;"	m
am_bloom_test_OBJECTS	Makefile	/^am_bloom_test_OBJECTS = util\/bloom_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_c_test_OBJECTS	Makefile	/^am_c_test_OBJECTS = db\/c_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_cache_test_OBJECTS	Makefile	/^am_cache_test_OBJECTS = util\/cache_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_coding_test_OBJECTS	Makefile	/^am_coding_test_OBJECTS = util\/coding_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_corruption_test_OBJECTS	Makefile	/^am_corruption_test_OBJECTS = db\/corruption_test.$(OBJEXT) \\$/;"	m
am_crc32c_test_OBJECTS	Makefile	/^am_crc32c_test_OBJECTS = util\/crc32c_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_db_bench_OBJECTS	Makefile	/^am_db_bench_OBJECTS = db\/db_bench.$(OBJEXT) $(am__objects_1)$/;"	m
am_db_bench_sqlite3_OBJECTS	Makefile	/^am_db_bench_sqlite3_OBJECTS = doc\/bench\/db_bench_sqlite3.$(OBJEXT) \\$/;"	m
am_db_bench_tree_db_OBJECTS	Makefile	/^am_db_bench_tree_db_OBJECTS = doc\/bench\/db_bench_tree_db.$(OBJEXT) \\$/;"	m
am_db_test_OBJECTS	Makefile	/^am_db_test_OBJECTS = db\/db_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_dbformat_test_OBJECTS	Makefile	/^am_dbformat_test_OBJECTS = db\/dbformat_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_env_test_OBJECTS	Makefile	/^am_env_test_OBJECTS = util\/env_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_filename_test_OBJECTS	Makefile	/^am_filename_test_OBJECTS = db\/filename_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_filter_block_test_OBJECTS	Makefile	/^am_filter_block_test_OBJECTS = table\/filter_block_test.$(OBJEXT) \\$/;"	m
am_issue178_test_OBJECTS	Makefile	/^am_issue178_test_OBJECTS = issues\/issue178_test.$(OBJEXT) \\$/;"	m
am_issue200_test_OBJECTS	Makefile	/^am_issue200_test_OBJECTS = issues\/issue200_test.$(OBJEXT) \\$/;"	m
am_leveldb_dump_all_OBJECTS	Makefile	/^am_leveldb_dump_all_OBJECTS = leveldb-dump-all.$(OBJEXT)$/;"	m
am_leveldb_verify_OBJECTS	Makefile	/^am_leveldb_verify_OBJECTS = leveldb-verify.$(OBJEXT)$/;"	m
am_leveldbutil_OBJECTS	Makefile	/^am_leveldbutil_OBJECTS = db\/leveldb_main.$(OBJEXT)$/;"	m
am_libpebblesdb_la_OBJECTS	Makefile	/^am_libpebblesdb_la_OBJECTS = db\/builder.lo db\/c.lo db\/dbformat.lo \\$/;"	m
am_log_test_OBJECTS	Makefile	/^am_log_test_OBJECTS = db\/log_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_skiplist_test_OBJECTS	Makefile	/^am_skiplist_test_OBJECTS = db\/skiplist_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_table_test_OBJECTS	Makefile	/^am_table_test_OBJECTS = table\/table_test.$(OBJEXT) $(am__objects_2)$/;"	m
am_version_edit_test_OBJECTS	Makefile	/^am_version_edit_test_OBJECTS = db\/version_edit_test.$(OBJEXT) \\$/;"	m
am_version_set_test_OBJECTS	Makefile	/^am_version_set_test_OBJECTS = db\/version_set_test.$(OBJEXT) \\$/;"	m
am_write_batch_test_OBJECTS	Makefile	/^am_write_batch_test_OBJECTS = db\/write_batch_test.$(OBJEXT) \\$/;"	m
and_32_nobarrier	util/atomic.h	/^and_32_nobarrier(volatile uint32_t* ptr, uint32_t andwith)$/;"	f	namespace:leveldb::atomic
and_64_nobarrier	util/atomic.h	/^and_64_nobarrier(volatile uint64_t* ptr, uint64_t andwith)$/;"	f	namespace:leveldb::atomic
append	util/string_builder.h	/^  void append(const char* buf, size_t sz, int print = 0) {$/;"	f	struct:leveldb::StringBuilder
append	util/string_builder.h	/^  void append(const leveldb::Slice& s) {$/;"	f	struct:leveldb::StringBuilder
arena_	db/memtable.h	/^  Arena arena_;$/;"	m	class:leveldb::MemTable
arena_	db/skiplist.h	/^  Arena* const arena_;    \/\/ Arena used for allocations of nodes$/;"	m	class:leveldb::SkipList
arena_	db/skiplist_test.cc	/^  Arena arena_;$/;"	m	class:leveldb::ConcurrentTest	file:
arena_test_DEPENDENCIES	Makefile	/^arena_test_DEPENDENCIES = libpebblesdb.la$/;"	m
arena_test_LDADD	Makefile	/^arena_test_LDADD = libpebblesdb.la -lpthread$/;"	m
arena_test_OBJECTS	Makefile	/^arena_test_OBJECTS = $(am_arena_test_OBJECTS)$/;"	m
arena_test_SOURCES	Makefile	/^arena_test_SOURCES = util\/arena_test.cc $(TESTHARNESS)$/;"	m
arg	util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon13::PosixEnv::BGItem	file:
arg	util/env_posix.cc	/^  void* arg;$/;"	m	struct:leveldb::__anon13::__anon14::StartThreadState	file:
arg1	include/pebblesdb/iterator.h	/^    void* arg1;$/;"	m	struct:leveldb::Iterator::Cleanup
arg1_	table/two_level_iterator.cc	/^  void* arg1_;$/;"	m	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
arg2	include/pebblesdb/iterator.h	/^    void* arg2;$/;"	m	struct:leveldb::Iterator::Cleanup
arg2_	table/two_level_iterator.cc	/^  const void* arg2_;$/;"	m	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
arg3_	table/two_level_iterator.cc	/^  void* arg3_;$/;"	m	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
arg_	table/two_level_iterator.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon4::TwoLevelIterator	file:
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
atomic	util/atomic.h	/^namespace atomic$/;"	n	namespace:leveldb
autocompact_test_DEPENDENCIES	Makefile	/^autocompact_test_DEPENDENCIES = libpebblesdb.la$/;"	m
autocompact_test_LDADD	Makefile	/^autocompact_test_LDADD = libpebblesdb.la -lpthread$/;"	m
autocompact_test_OBJECTS	Makefile	/^autocompact_test_OBJECTS = $(am_autocompact_test_OBJECTS)$/;"	m
autocompact_test_SOURCES	Makefile	/^autocompact_test_SOURCES = db\/autocompact_test.cc $(TESTHARNESS)$/;"	m
backing_store_	db/log_reader.h	/^  char* const backing_store_;$/;"	m	class:leveldb::log::Reader
backup_cv_	db/db_impl.h	/^  port::CondVar backup_cv_;$/;"	m	class:leveldb::DBImpl
backup_deferred_delete_	db/db_impl.h	/^  bool backup_deferred_delete_; \/\/ DeleteObsoleteFiles delayed by backup; protect with mutex_$/;"	m	class:leveldb::DBImpl
backup_in_progress_	db/db_impl.h	/^  port::AtomicPointer backup_in_progress_; \/\/ non-NULL in progress$/;"	m	class:leveldb::DBImpl
backup_thread	benchmark.cc	/^backup_thread(leveldb::DB* db, ygor_data_logger* dl)$/;"	f
backup_waiter_has_it_	db/db_impl.h	/^  bool backup_waiter_has_it_;$/;"	m	class:leveldb::DBImpl
backup_waiters_	db/db_impl.h	/^  uint64_t backup_waiters_; \/\/ how many threads waiting to backup$/;"	m	class:leveldb::DBImpl
base	util/arena.cc	/^  char* base;$/;"	m	struct:leveldb::Arena::Block	file:
base	util/testharness.cc	/^  const char* base;$/;"	m	struct:leveldb::test::__anon12::Test	file:
base_	db/version_set.cc	/^  Version* base_;$/;"	m	class:leveldb::VersionSet::Builder	file:
base_	util/env_posix.cc	/^    char* base_;$/;"	m	struct:leveldb::__anon13::PosixMmapFile::MmapSegment	file:
base_lg_	table/filter_block.h	/^  size_t base_lg_;      \/\/ Encoding parameter (see kFilterBaseLg in .cc file)$/;"	m	class:leveldb::FilterBlockReader
begin	db/db_impl.h	/^    const InternalKey* begin;   \/\/ NULL means beginning of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
benchmark_DEPENDENCIES	Makefile	/^benchmark_DEPENDENCIES = libpebblesdb.la$/;"	m
benchmark_LDADD	Makefile	/^benchmark_LDADD = libpebblesdb.la -lpthread -lsnappy -le -lpopt -lygor$/;"	m
benchmark_LDFLAGS	Makefile	/^benchmark_LDFLAGS = -no-install$/;"	m
benchmark_LINK	Makefile	/^benchmark_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
benchmark_OBJECTS	Makefile	/^benchmark_OBJECTS = $(am_benchmark_OBJECTS)$/;"	m
benchmark_SOURCES	Makefile	/^benchmark_SOURCES = benchmark.cc$/;"	m
bg_compaction_cv_	db/db_impl.h	/^  port::CondVar bg_compaction_cv_;$/;"	m	class:leveldb::DBImpl
bg_error_	db/db_impl.h	/^  Status bg_error_;$/;"	m	class:leveldb::DBImpl
bg_fg_cv_	db/db_impl.h	/^  port::CondVar bg_fg_cv_;$/;"	m	class:leveldb::DBImpl
bg_log_cv_	db/db_impl.h	/^  port::CondVar bg_log_cv_;$/;"	m	class:leveldb::DBImpl
bg_log_occupied_	db/db_impl.h	/^  bool bg_log_occupied_;$/;"	m	class:leveldb::DBImpl
bg_memtable_cv_	db/db_impl.h	/^  port::CondVar bg_memtable_cv_;$/;"	m	class:leveldb::DBImpl
bgsignal_	util/env_posix.cc	/^  pthread_cond_t bgsignal_;$/;"	m	class:leveldb::__anon13::PosixEnv	file:
bgthread_	util/env_posix.cc	/^  pthread_t bgthread_;$/;"	m	class:leveldb::__anon13::PosixEnv	file:
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bit_decrement	db/write_batch.cc	/^   const static int bit_decrement = 2;$/;"	m	class:leveldb::__anon29::GuardInserter	file:
bit_mask	db/write_batch.cc	/^   unsigned bit_mask;$/;"	m	class:leveldb::__anon29::GuardInserter	file:
bits_per_key_	util/bloom.cc	/^  size_t bits_per_key_;$/;"	m	class:leveldb::__anon15::BloomFilterPolicy	file:
block_	table/table_test.cc	/^  Block* block_;$/;"	m	class:leveldb::BlockConstructor	file:
block_cache	include/pebblesdb/options.h	/^  Cache* block_cache;$/;"	m	struct:leveldb::Options
block_function_	table/two_level_iterator.cc	/^  BlockFunction block_function_;$/;"	m	class:leveldb::__anon4::TwoLevelIterator	file:
block_function_	table/two_level_iterator.cc	/^  BlockFunctionGuards block_function_;$/;"	m	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
block_if_backup_in_progress_	db/db_impl.cc	/^  bool block_if_backup_in_progress_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
block_restart_interval	include/pebblesdb/options.h	/^  int block_restart_interval;$/;"	m	struct:leveldb::Options
block_size	include/pebblesdb/options.h	/^  size_t block_size;$/;"	m	struct:leveldb::Options
block_size_	util/env_posix.cc	/^  const size_t block_size_; \/\/ System page size$/;"	m	class:leveldb::__anon13::PosixMmapFile	file:
blocks_	helpers/memenv/memenv.cc	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::__anon9::FileState	file:
blocks_	util/arena.h	/^  Block* blocks_;$/;"	m	class:leveldb::Arena
bloom_test_DEPENDENCIES	Makefile	/^bloom_test_DEPENDENCIES = libpebblesdb.la$/;"	m
bloom_test_LDADD	Makefile	/^bloom_test_LDADD = libpebblesdb.la -lpthread$/;"	m
bloom_test_OBJECTS	Makefile	/^bloom_test_OBJECTS = $(am_bloom_test_OBJECTS)$/;"	m
bloom_test_SOURCES	Makefile	/^bloom_test_SOURCES = util\/bloom_test.cc $(TESTHARNESS)$/;"	m
bm	db/db_bench.cc	/^    Benchmark* bm;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
boundaries_	db/version_set.h	/^  std::vector<std::pair<uint64_t, leveldb::Slice> > boundaries_;$/;"	m	class:leveldb::Compaction
buckets_	util/histogram.h	/^  double buckets_[kNumBuckets];$/;"	m	class:leveldb::Histogram
buffer	db/version_set.h	/^    char buffer[100];$/;"	m	struct:leveldb::VersionSet::LevelSummaryStorage
buffer_	db/log_reader.h	/^  Slice buffer_;$/;"	m	class:leveldb::log::Reader
buffer_	table/block_builder.h	/^  StringBuilder         buffer_;      \/\/ Destination buffer$/;"	m	class:leveldb::BlockBuilder
build	Makefile	/^build = x86_64-pc-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-pc-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = pc$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
builder	db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
byte_size	include/pebblesdb/filter_policy.h	/^  mutable size_t byte_size;$/;"	m	class:leveldb::FilterPolicy
bytes_	db/db_bench.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::__anon19::Stats	file:
bytes_	doc/bench/db_bench_sqlite3.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_	doc/bench/db_bench_tree_db.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_counter_	db/db_iter.cc	/^  ssize_t bytes_counter_;$/;"	m	class:leveldb::__anon20::DBIter	file:
bytes_read	db/db_impl.h	/^    int64_t bytes_read;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytes_written	db/db_impl.h	/^    int64_t bytes_written;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytewise	util/comparator.cc	/^static const Comparator* bytewise;$/;"	m	namespace:leveldb	file:
c_test_DEPENDENCIES	Makefile	/^c_test_DEPENDENCIES = libpebblesdb.la$/;"	m
c_test_LDADD	Makefile	/^c_test_LDADD = libpebblesdb.la -lpthread$/;"	m
c_test_OBJECTS	Makefile	/^c_test_OBJECTS = $(am_c_test_OBJECTS)$/;"	m
c_test_SOURCES	Makefile	/^c_test_SOURCES = db\/c_test.c $(TESTHARNESS)$/;"	m
cachable	table/format.h	/^  bool cachable;        \/\/ True iff data can be cached$/;"	m	struct:leveldb::BlockContents
cache_	db/db_bench.cc	/^  Cache* cache_;$/;"	m	class:leveldb::Benchmark	file:
cache_	db/table_cache.h	/^  Cache* cache_;$/;"	m	class:leveldb::TableCache
cache_	util/cache_test.cc	/^  Cache* cache_;$/;"	m	class:leveldb::CacheTest	file:
cache_id	table/table.cc	/^  uint64_t cache_id;$/;"	m	struct:leveldb::Table::Rep	file:
cache_test_DEPENDENCIES	Makefile	/^cache_test_DEPENDENCIES = libpebblesdb.la$/;"	m
cache_test_LDADD	Makefile	/^cache_test_LDADD = libpebblesdb.la -lpthread$/;"	m
cache_test_OBJECTS	Makefile	/^cache_test_OBJECTS = $(am_cache_test_OBJECTS)$/;"	m
cache_test_SOURCES	Makefile	/^cache_test_SOURCES = util\/cache_test.cc $(TESTHARNESS)$/;"	m
capacity_	util/cache.cc	/^  size_t capacity_;$/;"	m	class:leveldb::__anon16::LRUCache	file:
charge	util/cache.cc	/^  size_t charge;      \/\/ TODO(opt): Only allow uint32_t?$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
check_PROGRAMS	Makefile	/^check_PROGRAMS = autocompact_test$(EXEEXT) arena_test$(EXEEXT) \\$/;"	m
checksum_	db/log_reader.h	/^  bool const checksum_;$/;"	m	class:leveldb::log::Reader
children_	table/merger.cc	/^  IteratorWrapper* children_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
choose_crc32c	util/crc32c.cc	/^choose_crc32c() {$/;"	f	namespace:leveldb::crc32c
cleanup	db/replay_iterator.cc	/^void ReplayIteratorImpl::cleanup() {$/;"	f	class:leveldb::ReplayIteratorImpl
cleanup_	include/pebblesdb/iterator.h	/^  Cleanup cleanup_;$/;"	m	class:leveldb::Iterator
clear	include/pebblesdb/slice.h	/^  void clear() { data_ = ""; size_ = 0; }$/;"	f	class:leveldb::Slice
clear	util/string_builder.h	/^  void clear() {$/;"	f	struct:leveldb::StringBuilder
clear	util/timer.h	/^	void clear() {$/;"	f	class:leveldb::Timer
closed	table/table_builder.cc	/^  bool closed;          \/\/ Either Finish() or Abandon() has been called.$/;"	m	struct:leveldb::TableBuilder::Rep	file:
cmd	db/db_bench.cc	/^  	char cmd;$/;"	m	struct:leveldb::Benchmark::trace_operation_t	file:
cmp	db/skiplist.h	/^    uint64_t cmp;$/;"	m	struct:leveldb::SkipList::Node::PointerHintPair
cmp	db/skiplist.h	/^  uint64_t const cmp;$/;"	m	struct:leveldb::SkipList::Node
cmp	table/table_test.cc	/^  const Comparator* cmp;$/;"	m	struct:leveldb::__anon7::STLLessThan	file:
cmp_	db/version_set.cc	/^    const InternalKeyComparator* cmp_;$/;"	m	struct:leveldb::CmpByRange	file:
cnd_	util/env_posix.cc	/^  port::CondVar cnd_;       \/\/ Wait for truncate$/;"	m	class:leveldb::__anon13::PosixMmapFile	file:
code	include/pebblesdb/status.h	/^  Code code() const {$/;"	f	class:leveldb::Status
coding_test_DEPENDENCIES	Makefile	/^coding_test_DEPENDENCIES = libpebblesdb.la$/;"	m
coding_test_LDADD	Makefile	/^coding_test_LDADD = libpebblesdb.la -lpthread$/;"	m
coding_test_OBJECTS	Makefile	/^coding_test_OBJECTS = $(am_coding_test_OBJECTS)$/;"	m
coding_test_SOURCES	Makefile	/^coding_test_SOURCES = util\/coding_test.cc $(TESTHARNESS)$/;"	m
comp_	doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::LZOCompressor<kyotocabinet::LZO::RAW> comp_;$/;"	m	class:leveldb::Benchmark	file:
compact_pointer_	db/version_set.h	/^  std::string compact_pointer_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet
compact_pointers_	db/version_edit.h	/^  std::vector< std::pair<int, InternalKey> > compact_pointers_;$/;"	m	class:leveldb::VersionEdit
compaction	db/db_impl.cc	/^  Compaction* const compaction;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
compaction_scores_	db/version_set.h	/^  double compaction_scores_[config::kNumLevels];$/;"	m	class:leveldb::Version
comparator	db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyComparator
comparator	db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyExtractor
comparator	include/pebblesdb/options.h	/^  const Comparator* comparator;$/;"	m	struct:leveldb::Options
comparator_	db/memtable.h	/^  KeyComparator comparator_;$/;"	m	class:leveldb::MemTable
comparator_	db/version_edit.h	/^  std::string comparator_;$/;"	m	class:leveldb::VersionEdit
comparator_	table/block.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::Block::Iter	file:
comparator_	table/merger.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
comparator_	table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::BlockConstructor	file:
comparator_	table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::DBConstructor	file:
compare	include/pebblesdb/slice.h	/^inline int Slice::compare(const Slice& b) const {$/;"	f	class:leveldb::Slice
compare_	db/c.cc	/^  int (*compare_)($/;"	m	struct:leveldb_comparator_t	file:
compare_	db/skiplist.h	/^  Comparator const compare_;$/;"	m	class:leveldb::SkipList
compare_and_swap_32_acquire	util/atomic.h	/^compare_and_swap_32_acquire(volatile uint32_t* ptr, uint32_t old_value, uint32_t new_value)$/;"	f	namespace:leveldb::atomic
compare_and_swap_32_nobarrier	util/atomic.h	/^compare_and_swap_32_nobarrier(volatile uint32_t* ptr, uint32_t old_value, uint32_t new_value)$/;"	f	namespace:leveldb::atomic
compare_and_swap_32_release	util/atomic.h	/^compare_and_swap_32_release(volatile uint32_t* ptr, uint32_t old_value, uint32_t new_value)$/;"	f	namespace:leveldb::atomic
compare_and_swap_64_acquire	util/atomic.h	/^compare_and_swap_64_acquire(volatile uint64_t* ptr, uint64_t old_value, uint64_t new_value)$/;"	f	namespace:leveldb::atomic
compare_and_swap_64_nobarrier	util/atomic.h	/^compare_and_swap_64_nobarrier(volatile uint64_t* ptr, uint64_t old_value, uint64_t new_value)$/;"	f	namespace:leveldb::atomic
compare_and_swap_64_release	util/atomic.h	/^compare_and_swap_64_release(volatile uint64_t* ptr, uint64_t old_value, uint64_t new_value)$/;"	f	namespace:leveldb::atomic
compare_and_swap_ptr_acquire	util/atomic.h	/^compare_and_swap_ptr_acquire(P* volatile* ptr, P* old_value, P* new_value)$/;"	f	namespace:leveldb::atomic
compare_and_swap_ptr_fullbarrier	util/atomic.h	/^compare_and_swap_ptr_fullbarrier(P* volatile* ptr, P* old_value, P* new_value)$/;"	f	namespace:leveldb::atomic
compare_and_swap_ptr_nobarrier	util/atomic.h	/^compare_and_swap_ptr_nobarrier(P* volatile* ptr, P* old_value, P* new_value)$/;"	f	namespace:leveldb::atomic
compare_and_swap_ptr_release	util/atomic.h	/^compare_and_swap_ptr_release(P* volatile* ptr, P* old_value, P* new_value)$/;"	f	namespace:leveldb::atomic
comparisons_	table/merger.cc	/^  uint64_t* comparisons_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
comparisons_intialized_	table/merger.cc	/^  bool comparisons_intialized_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
complete_guards_	db/version_set.h	/^  std::vector<GuardMetaData*> complete_guards_[config::kNumLevels];$/;"	m	class:leveldb::Version
compressed_output	table/table_builder.cc	/^  std::string compressed_output;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
compression	include/pebblesdb/options.h	/^  CompressionType compression;$/;"	m	struct:leveldb::Options
config	db/dbformat.h	/^namespace config {$/;"	n	namespace:leveldb
constructor_	table/table_test.cc	/^  Constructor* constructor_;$/;"	m	class:leveldb::Harness	file:
contents	table/table_test.cc	/^  const std::string& contents() const { return contents_; }$/;"	f	class:leveldb::StringSink
contents_	db/log_test.cc	/^    Slice contents_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
contents_	db/log_test.cc	/^    std::string contents_;$/;"	m	class:leveldb::log::LogTest::StringDest	file:
contents_	table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSink	file:
contents_	table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSource	file:
corruption_test_DEPENDENCIES	Makefile	/^corruption_test_DEPENDENCIES = libpebblesdb.la$/;"	m
corruption_test_LDADD	Makefile	/^corruption_test_LDADD = libpebblesdb.la -lpthread$/;"	m
corruption_test_OBJECTS	Makefile	/^corruption_test_OBJECTS = $(am_corruption_test_OBJECTS)$/;"	m
corruption_test_SOURCES	Makefile	/^corruption_test_SOURCES = db\/corruption_test.cc $(TESTHARNESS)$/;"	m
count_	db/db_test.cc	/^  int count_;$/;"	m	class:leveldb::__anon22::AtomicCounter	file:
count_random_reads_	db/db_test.cc	/^  bool count_random_reads_;$/;"	m	class:leveldb::SpecialEnv	file:
counter	db/db_test.cc	/^  port::AtomicPointer counter[kNumThreads];$/;"	m	struct:leveldb::__anon23::MTState	file:
counter_	table/block_builder.h	/^  int                   counter_;     \/\/ Number of entries emitted since restart$/;"	m	class:leveldb::BlockBuilder
cpuid	util/atomic.cc	52;"	d	file:
cpuid	util/atomic.cc	58;"	d	file:
cpuid	util/crc32c.cc	68;"	d	file:
cpuid	util/crc32c.cc	75;"	d	file:
cpuid_t	util/crc32c.cc	73;"	d	file:
cpuid_t	util/crc32c.cc	80;"	d	file:
crc32_software	util/crc32c.cc	/^static uint32_t crc32_software(uint32_t init_crc, const char* _data, size_t n) {$/;"	f	namespace:leveldb::crc32c
crc32_sse42_quads	util/crc32c.cc	/^static uint32_t crc32_sse42_quads(uint32_t init_crc, const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
crc32_sse42_simple	util/crc32c.cc	/^static uint32_t crc32_sse42_simple(uint32_t init_crc, const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
crc32c	util/crc32c.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
crc32c	util/crc32c.h	/^namespace crc32c {$/;"	n	namespace:leveldb
crc32c	util/crc32c_test.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
crc32c_func	util/crc32c.cc	/^static crc32c_func_t crc32c_func = choose_crc32c();$/;"	m	namespace:leveldb::crc32c	file:
crc32c_func_t	util/crc32c.cc	/^typedef uint32_t (*crc32c_func_t)(uint32_t init_crc, const char* data, size_t n);$/;"	t	namespace:leveldb::crc32c	file:
crc32c_sb8_64_bit	util/crc32c.cc	/^crc32c_sb8_64_bit($/;"	f	namespace:leveldb::crc32c
crc32c_test_DEPENDENCIES	Makefile	/^crc32c_test_DEPENDENCIES = libpebblesdb.la$/;"	m
crc32c_test_LDADD	Makefile	/^crc32c_test_LDADD = libpebblesdb.la -lpthread$/;"	m
crc32c_test_OBJECTS	Makefile	/^crc32c_test_OBJECTS = $(am_crc32c_test_OBJECTS)$/;"	m
crc32c_test_SOURCES	Makefile	/^crc32c_test_SOURCES = util\/crc32c_test.cc $(TESTHARNESS)$/;"	m
crc_tableil8_o32	util/crc32c.cc	/^uint32_t crc_tableil8_o32[256] =$/;"	m	namespace:leveldb::crc32c	file:
crc_tableil8_o40	util/crc32c.cc	/^uint32_t crc_tableil8_o40[256] =$/;"	m	namespace:leveldb::crc32c	file:
crc_tableil8_o48	util/crc32c.cc	/^uint32_t crc_tableil8_o48[256] =$/;"	m	namespace:leveldb::crc32c	file:
crc_tableil8_o56	util/crc32c.cc	/^uint32_t crc_tableil8_o56[256] =$/;"	m	namespace:leveldb::crc32c	file:
crc_tableil8_o64	util/crc32c.cc	/^uint32_t crc_tableil8_o64[256] =$/;"	m	namespace:leveldb::crc32c	file:
crc_tableil8_o72	util/crc32c.cc	/^uint32_t crc_tableil8_o72[256] =$/;"	m	namespace:leveldb::crc32c	file:
crc_tableil8_o80	util/crc32c.cc	/^uint32_t crc_tableil8_o80[256] =$/;"	m	namespace:leveldb::crc32c	file:
crc_tableil8_o88	util/crc32c.cc	/^uint32_t crc_tableil8_o88[256] =$/;"	m	namespace:leveldb::crc32c	file:
create_	db/c.cc	/^  char* (*create_)($/;"	m	struct:leveldb_filterpolicy_t	file:
create_if_missing	include/pebblesdb/options.h	/^  bool create_if_missing;$/;"	m	struct:leveldb::Options
current	db/version_set.h	/^  Version* current() const { return current_; }$/;"	f	class:leveldb::VersionSet
current_	db/skiplist_test.cc	/^  State current_;$/;"	m	class:leveldb::ConcurrentTest	file:
current_	db/version_set.h	/^  Version* current_;        \/\/ == dummy_versions_.prev_$/;"	m	class:leveldb::VersionSet
current_	table/block.cc	/^  uint32_t current_;$/;"	m	class:leveldb::Block::Iter	file:
current_	table/merger.cc	/^  IteratorWrapper* current_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
current_	util/cache_test.cc	/^  static CacheTest* current_;$/;"	m	class:leveldb::CacheTest	file:
current_	util/cache_test.cc	/^CacheTest* CacheTest::current_;$/;"	m	class:leveldb::CacheTest	file:
current_output	db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size()-1]; }$/;"	f	struct:leveldb::DBImpl::CompactionState
current_thread	table/merger.cc	/^  pthread_t current_thread;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
current_thread_	db/version_set.h	/^  pthread_t current_thread_;$/;"	m	class:leveldb::VersionSet
current_user_key_	db/replay_iterator.h	/^  std::string current_user_key_;$/;"	m	class:leveldb::ReplayIteratorImpl
current_user_sequence_	db/replay_iterator.h	/^  SequenceNumber current_user_sequence_;$/;"	m	class:leveldb::ReplayIteratorImpl
cv	db/db_bench.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::__anon19::SharedState	file:
cv_	db/db_impl.cc	/^  port::CondVar cv_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
cv_	port/port_posix.h	/^  pthread_cond_t cv_;$/;"	m	class:leveldb::port::CondVar
data	include/pebblesdb/slice.h	/^  const char* data() const { return data_; }$/;"	f	class:leveldb::Slice
data	table/format.h	/^  Slice data;           \/\/ Actual contents of data$/;"	m	struct:leveldb::BlockContents
data	table/table_test.cc	/^  virtual const KVMap& data() { return data_; }$/;"	f	class:leveldb::Constructor
data	util/string_builder.h	/^  char* data() { return m_buf; }$/;"	f	struct:leveldb::StringBuilder
data	util/string_builder.h	/^  const char* data() const { return m_buf; }$/;"	f	struct:leveldb::StringBuilder
data_	db/db_bench.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon19::RandomGenerator	file:
data_	doc/bench/db_bench_sqlite3.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon33::RandomGenerator	file:
data_	doc/bench/db_bench_tree_db.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon32::RandomGenerator	file:
data_	include/pebblesdb/slice.h	/^  const char* data_;$/;"	m	class:leveldb::Slice
data_	table/block.cc	/^  const char* const data_;      \/\/ underlying block contents$/;"	m	class:leveldb::Block::Iter	file:
data_	table/block.h	/^  const char* data_;$/;"	m	class:leveldb::Block
data_	table/filter_block.h	/^  const char* data_;    \/\/ Pointer to filter data (at block-start)$/;"	m	class:leveldb::FilterBlockReader
data_	table/table_test.cc	/^  KVMap data_;$/;"	m	class:leveldb::Constructor	file:
data_	table/table_test.cc	/^  std::string data_;$/;"	m	class:leveldb::BlockConstructor	file:
data_block	table/table_builder.cc	/^  BlockBuilder data_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
data_block_handle_	table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon4::TwoLevelIterator	file:
data_block_handle_	table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
data_iter_	table/two_level_iterator.cc	/^  IteratorWrapper data_iter_; \/\/ May be NULL$/;"	m	class:leveldb::__anon4::TwoLevelIterator	file:
data_iter_	table/two_level_iterator.cc	/^  IteratorWrapper data_iter_; \/\/ May be NULL$/;"	m	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
data_sync_error_	db/db_test.cc	/^  port::AtomicPointer data_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
db	table/table_test.cc	/^  DB* db() const { return constructor_->db(); }$/;"	f	class:leveldb::Harness
db	table/table_test.cc	/^  virtual DB* db() const { return NULL; }  \/\/ Overridden in DBConstructor$/;"	f	class:leveldb::Constructor
db	table/table_test.cc	/^  virtual DB* db() const { return db_; }$/;"	f	class:leveldb::DBConstructor
db_	db/autocompact_test.cc	/^  DB* db_;$/;"	m	class:leveldb::AutoCompactTest	file:
db_	db/corruption_test.cc	/^    DB *db_;$/;"	m	class:leveldb::CorruptionTest	file:
db_	db/db_bench.cc	/^  DB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	db/db_iter.cc	/^  DBImpl* db_;$/;"	m	class:leveldb::__anon20::DBIter	file:
db_	db/db_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBTest	file:
db_	db/replay_iterator.h	/^  DBImpl* const db_;$/;"	m	class:leveldb::ReplayIteratorImpl
db_	doc/bench/db_bench_sqlite3.cc	/^  sqlite3* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::TreeDB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	table/table_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBConstructor	file:
db_bench_DEPENDENCIES	Makefile	/^db_bench_DEPENDENCIES = libpebblesdb.la$/;"	m
db_bench_LDADD	Makefile	/^db_bench_LDADD = libpebblesdb.la -lpthread -lsnappy$/;"	m
db_bench_OBJECTS	Makefile	/^db_bench_OBJECTS = $(am_db_bench_OBJECTS)$/;"	m
db_bench_SOURCES	Makefile	/^db_bench_SOURCES = db\/db_bench.cc $(TESTUTIL)$/;"	m
db_bench_sqlite3_DEPENDENCIES	Makefile	/^db_bench_sqlite3_DEPENDENCIES =$/;"	m
db_bench_sqlite3_LDADD	Makefile	/^db_bench_sqlite3_LDADD = -lsqlite3$/;"	m
db_bench_sqlite3_OBJECTS	Makefile	/^db_bench_sqlite3_OBJECTS = $(am_db_bench_sqlite3_OBJECTS)$/;"	m
db_bench_sqlite3_SOURCES	Makefile	/^db_bench_sqlite3_SOURCES = doc\/bench\/db_bench_sqlite3.cc $(TESTUTIL)$/;"	m
db_bench_tree_db_DEPENDENCIES	Makefile	/^db_bench_tree_db_DEPENDENCIES =$/;"	m
db_bench_tree_db_LDADD	Makefile	/^db_bench_tree_db_LDADD = -lkyotocabinet$/;"	m
db_bench_tree_db_OBJECTS	Makefile	/^db_bench_tree_db_OBJECTS = $(am_db_bench_tree_db_OBJECTS)$/;"	m
db_bench_tree_db_SOURCES	Makefile	/^db_bench_tree_db_SOURCES = doc\/bench\/db_bench_tree_db.cc $(TESTUTIL)$/;"	m
db_lock_	db/db_impl.h	/^  FileLock* db_lock_;$/;"	m	class:leveldb::DBImpl
db_num_	doc/bench/db_bench_sqlite3.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
db_num_	doc/bench/db_bench_tree_db.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
db_test_DEPENDENCIES	Makefile	/^db_test_DEPENDENCIES = libpebblesdb.la$/;"	m
db_test_LDADD	Makefile	/^db_test_LDADD = libpebblesdb.la -lpthread$/;"	m
db_test_OBJECTS	Makefile	/^db_test_OBJECTS = $(am_db_test_OBJECTS)$/;"	m
db_test_SOURCES	Makefile	/^db_test_SOURCES = db\/db_test.cc $(TESTHARNESS)$/;"	m
dbformat_test_DEPENDENCIES	Makefile	/^dbformat_test_DEPENDENCIES = libpebblesdb.la$/;"	m
dbformat_test_LDADD	Makefile	/^dbformat_test_LDADD = libpebblesdb.la -lpthread$/;"	m
dbformat_test_OBJECTS	Makefile	/^dbformat_test_OBJECTS = $(am_dbformat_test_OBJECTS)$/;"	m
dbformat_test_SOURCES	Makefile	/^dbformat_test_SOURCES = db\/dbformat_test.cc $(TESTHARNESS)$/;"	m
dbfull	db/db_bench.cc	/^  DBImpl* dbfull() {$/;"	f	class:leveldb::Benchmark	file:
dbfull	db/db_test.cc	/^  DBImpl* dbfull() {$/;"	f	class:leveldb::DBTest
dbname	db/c_test.c	/^static char dbname[200];$/;"	v	file:
dbname_	db/autocompact_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::AutoCompactTest	file:
dbname_	db/corruption_test.cc	/^    std::string dbname_;$/;"	m	class:leveldb::CorruptionTest	file:
dbname_	db/db_impl.h	/^  const std::string dbname_;$/;"	m	class:leveldb::DBImpl
dbname_	db/db_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::DBTest	file:
dbname_	db/repair.cc	/^  std::string const dbname_;$/;"	m	class:leveldb::__anon27::Repairer::std	file:
dbname_	db/table_cache.h	/^  const std::string dbname_;$/;"	m	class:leveldb::TableCache
dbname_	db/version_set.h	/^  const std::string dbname_;$/;"	m	class:leveldb::VersionSet
decode	leveldb-dump-all.cc	/^decode(const char* data, size_t data_sz, std::vector<char>* out)$/;"	f
default_env	util/env_posix.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
delay_data_sync_	db/db_test.cc	/^  port::AtomicPointer delay_data_sync_;$/;"	m	class:leveldb::SpecialEnv	file:
deleted_files	db/version_set.cc	/^    std::set<uint64_t> deleted_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
deleted_files_	db/version_edit.h	/^  DeletedFileSet deleted_files_;$/;"	m	class:leveldb::VersionEdit
deleted_guards	db/version_set.cc	/^    KeySet* deleted_guards;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
deleted_guards_	db/version_edit.h	/^  DeletedGuardSet deleted_guards_;$/;"	m	class:leveldb::VersionEdit
deleted_keys_	util/cache_test.cc	/^  std::vector<int> deleted_keys_;$/;"	m	class:leveldb::CacheTest	file:
deleted_sentinel_files_	db/version_edit.h	/^  DeletedFileSet deleted_sentinel_files_;$/;"	m	class:leveldb::VersionEdit
deleted_values_	util/cache_test.cc	/^  std::vector<int> deleted_values_;$/;"	m	class:leveldb::CacheTest	file:
deleter	util/cache.cc	/^  void (*deleter)(const Slice&, void* value);$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
descriptor_file_	db/version_set.h	/^  ConcurrentWritableFile* descriptor_file_;$/;"	m	class:leveldb::VersionSet
descriptor_log_	db/version_set.h	/^  log::Writer* descriptor_log_;$/;"	m	class:leveldb::VersionSet
dest_	db/log_test.cc	/^  StringDest dest_;$/;"	m	class:leveldb::log::LogTest	file:
dest_	db/log_writer.h	/^  ConcurrentWritableFile* dest_;$/;"	m	class:leveldb::log::Writer
destroy_memory	util/string_builder.h	/^  void destroy_memory() {$/;"	f	struct:leveldb::StringBuilder
destructor_	db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
destructor_	db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
direction_	db/db_iter.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon20::DBIter	file:
direction_	table/merger.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
disjoint_sorted_files_	db/version_set_test.cc	/^  bool disjoint_sorted_files_;$/;"	m	class:leveldb::FindFileTest	file:
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
done	db/db_impl.h	/^    bool done;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
done_	db/db_bench.cc	/^  int done_;$/;"	m	class:leveldb::__anon19::Stats	file:
done_	doc/bench/db_bench_sqlite3.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
done_	doc/bench/db_bench_tree_db.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
dropped_bytes_	db/log_test.cc	/^    size_t dropped_bytes_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
dummy_versions_	db/version_set.h	/^  Version dummy_versions_;  \/\/ Head of circular doubly-linked list of versions.$/;"	m	class:leveldb::VersionSet
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
edit	db/version_set.h	/^  VersionEdit* edit() { return &edit_; }$/;"	f	class:leveldb::Compaction
edit_	db/repair.cc	/^  VersionEdit edit_;$/;"	m	class:leveldb::__anon27::Repairer	file:
edit_	db/version_set.h	/^  VersionEdit edit_;$/;"	m	class:leveldb::Compaction
elems_	util/cache.cc	/^  uint32_t elems_;$/;"	m	class:leveldb::__anon16::HandleTable	file:
empty	db/snapshot.h	/^  bool empty() const { return list_.next_ == &list_; }$/;"	f	class:leveldb::SnapshotList
empty	include/pebblesdb/slice.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:leveldb::Slice
empty	table/block_builder.h	/^  bool empty() const {$/;"	f	class:leveldb::BlockBuilder
empty	util/string_builder.h	/^  bool empty() const { return size() == 0; }$/;"	f	struct:leveldb::StringBuilder
end	db/db_impl.h	/^    const InternalKey* end;     \/\/ NULL means end of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
end_	db/dbformat.h	/^  const char* end_;$/;"	m	class:leveldb::LookupKey
end_of_buffer_offset_	db/log_reader.h	/^  uint64_t end_of_buffer_offset_;$/;"	m	class:leveldb::log::Reader
end_offset_	util/env_posix.cc	/^  uint64_t end_offset_;     \/\/ Where does the file end?$/;"	m	class:leveldb::__anon13::PosixMmapFile	file:
end_sequence_	db/db_impl.cc	/^  uint64_t end_sequence_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
enqueue	db/replay_iterator.cc	/^void ReplayIteratorImpl::enqueue(MemTable* m, SequenceNumber s) {$/;"	f	class:leveldb::ReplayIteratorImpl
entries_per_batch_	db/db_bench.cc	/^  int entries_per_batch_;$/;"	m	class:leveldb::Benchmark	file:
env	include/pebblesdb/options.h	/^  Env* env;$/;"	m	struct:leveldb::Options
env_	db/corruption_test.cc	/^    test::ErrorEnv env_;$/;"	m	class:leveldb::CorruptionTest	file:
env_	db/db_impl.h	/^  Env* const env_;$/;"	m	class:leveldb::DBImpl
env_	db/db_test.cc	/^  SpecialEnv* env_;$/;"	m	class:leveldb::DBTest	file:
env_	db/repair.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon27::Repairer	file:
env_	db/table_cache.h	/^  Env* const env_;$/;"	m	class:leveldb::TableCache
env_	db/version_set.h	/^  Env* const env_;$/;"	m	class:leveldb::VersionSet
env_	helpers/memenv/memenv_test.cc	/^  Env* env_;$/;"	m	class:leveldb::MemEnvTest	file:
env_	util/env_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvPosixTest	file:
env_test_DEPENDENCIES	Makefile	/^env_test_DEPENDENCIES = libpebblesdb.la$/;"	m
env_test_LDADD	Makefile	/^env_test_LDADD = libpebblesdb.la -lpthread$/;"	m
env_test_OBJECTS	Makefile	/^env_test_OBJECTS = $(am_env_test_OBJECTS)$/;"	m
env_test_SOURCES	Makefile	/^env_test_SOURCES = util\/env_test.cc $(TESTHARNESS)$/;"	m
envinput	db/db_bench.cc	765;"	d	file:
envstrinput	db/db_bench.cc	766;"	d	file:
eof_	db/log_reader.h	/^  bool eof_;   \/\/ Last Read() indicated EOF by returning < kBlockSize$/;"	m	class:leveldb::log::Reader
error_if_exists	include/pebblesdb/options.h	/^  bool error_if_exists;$/;"	m	struct:leveldb::Options
events_	util/env_test.cc	/^  std::string events_;$/;"	m	class:leveldb::EnvPosixTest	file:
exchange_32_nobarrier	util/atomic.h	/^exchange_32_nobarrier(volatile uint32_t* ptr, uint32_t new_value)$/;"	f	namespace:leveldb::atomic
exchange_64_nobarrier	util/atomic.h	/^exchange_64_nobarrier(volatile uint64_t* ptr, uint64_t new_value)$/;"	f	namespace:leveldb::atomic
exchange_ptr_nobarrier	util/atomic.h	/^exchange_ptr_nobarrier(P* volatile* ptr, P* new_value)$/;"	f	namespace:leveldb::atomic
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
extractor_	db/memtable.h	/^  KeyExtractor extractor_;$/;"	m	class:leveldb::MemTable
extractor_	db/skiplist.h	/^  Extractor const extractor_;$/;"	m	class:leveldb::SkipList
fake_filter_result	db/c_test.c	/^static unsigned char fake_filter_result = 1;$/;"	v	file:
fd_	util/env_posix.cc	/^  int fd_;                  \/\/ The open file$/;"	m	class:leveldb::__anon13::PosixMmapFile	file:
fd_	util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon13::PosixFileLock	file:
fd_	util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon13::PosixRandomAccessFile	file:
fdatasync	port/port_posix.h	86;"	d
fflush_unlocked	port/port_posix.h	62;"	d
file	db/table_cache.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::TableAndFile	file:
file	table/table.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::Table::Rep	file:
file	table/table_builder.cc	/^  WritableFile* file;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
file_	db/log_reader.h	/^  SequentialFile* const file_;$/;"	m	class:leveldb::log::Reader
file_	helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon9::RandomAccessFileImpl	file:
file_	helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon9::SequentialFileImpl	file:
file_	helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon9::WritableFileImpl	file:
file_	util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon13::PosixSequentialFile	file:
file_	util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon13::PosixWritableFile	file:
file_	util/posix_logger.h	/^  FILE* file_;$/;"	m	class:leveldb::PosixLogger
file_level_bloom_filter	db/version_set.h	/^  std::map<uint64_t, std::string*> file_level_bloom_filter;$/;"	m	class:leveldb::VersionSet
file_list_	db/version_set.cc	/^  const std::vector<FileMetaData*>* const file_list_;$/;"	m	class:leveldb::Version::LevelGuardNumIterator::std	file:
file_map_	helpers/memenv/memenv.cc	/^  FileSystem file_map_;  \/\/ Protected by mutex_.$/;"	m	class:leveldb::__anon9::InMemoryEnv	file:
file_meta_list	table/merger.cc	/^  FileMetaData** file_meta_list;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
file_metadata_map	db/table_cache.h	/^  std::map<uint64_t, FileMetaData*> file_metadata_map;$/;"	m	class:leveldb::TableCache
file_metas	db/version_edit.h	/^  std::vector<FileMetaData*> file_metas;$/;"	m	struct:leveldb::GuardMetaData
file_size	db/db_impl.cc	/^    uint64_t file_size;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
file_size	db/version_edit.h	/^  uint64_t file_size;         \/\/ File size in bytes$/;"	m	struct:leveldb::FileMetaData
file_to_compact_	db/version_set.h	/^  FileMetaData* file_to_compact_;$/;"	m	class:leveldb::Version
file_to_compact_level_	db/version_set.h	/^  int file_to_compact_level_;$/;"	m	class:leveldb::Version
filename_	util/env_posix.cc	/^  std::string filename_;    \/\/ Path to the file$/;"	m	class:leveldb::__anon13::PosixMmapFile	file:
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon13::PosixMmapReadableFile	file:
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon13::PosixRandomAccessFile	file:
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon13::PosixSequentialFile	file:
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon13::PosixWritableFile	file:
filename_test_DEPENDENCIES	Makefile	/^filename_test_DEPENDENCIES = libpebblesdb.la$/;"	m
filename_test_LDADD	Makefile	/^filename_test_LDADD = libpebblesdb.la -lpthread$/;"	m
filename_test_OBJECTS	Makefile	/^filename_test_OBJECTS = $(am_filename_test_OBJECTS)$/;"	m
filename_test_SOURCES	Makefile	/^filename_test_SOURCES = db\/filename_test.cc $(TESTHARNESS)$/;"	m
files	db/version_edit.h	/^  std::vector<uint64_t> files;$/;"	m	struct:leveldb::GuardMetaData
files_	db/version_set.h	/^  std::vector<FileMetaData*> files_[config::kNumLevels];$/;"	m	class:leveldb::Version
files_	db/version_set_test.cc	/^  std::vector<FileMetaData*> files_;$/;"	m	class:leveldb::FindFileTest	file:
fill_cache	include/pebblesdb/options.h	/^  bool fill_cache;$/;"	m	struct:leveldb::ReadOptions
filter	table/table.cc	/^  FilterBlockReader* filter;$/;"	m	struct:leveldb::Table::Rep	file:
filter_	util/bloom_test.cc	/^  std::string filter_;$/;"	m	class:leveldb::BloomTest	file:
filter_block	table/table_builder.cc	/^  FilterBlockBuilder* filter_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
filter_block_test_DEPENDENCIES	Makefile	/^filter_block_test_DEPENDENCIES = libpebblesdb.la$/;"	m
filter_block_test_LDADD	Makefile	/^filter_block_test_LDADD = libpebblesdb.la -lpthread$/;"	m
filter_block_test_OBJECTS	Makefile	/^filter_block_test_OBJECTS = $(am_filter_block_test_OBJECTS)$/;"	m
filter_block_test_SOURCES	Makefile	/^filter_block_test_SOURCES = table\/filter_block_test.cc $(TESTHARNESS)$/;"	m
filter_count	include/pebblesdb/filter_policy.h	/^  mutable unsigned long filter_count;$/;"	m	class:leveldb::FilterPolicy
filter_data	table/table.cc	/^  const char* filter_data;$/;"	m	struct:leveldb::Table::Rep	file:
filter_offsets_	table/filter_block.h	/^  std::vector<uint32_t> filter_offsets_;$/;"	m	class:leveldb::FilterBlockBuilder
filter_policy	include/pebblesdb/options.h	/^  const FilterPolicy* filter_policy;$/;"	m	struct:leveldb::Options
filter_policy_	db/db_bench.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::Benchmark	file:
filter_policy_	db/db_impl.h	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::DBImpl
filter_policy_	db/db_test.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::DBTest	file:
finish_	db/db_bench.cc	/^  double finish_;$/;"	m	class:leveldb::__anon19::Stats	file:
finished_	table/block_builder.h	/^  bool                  finished_;    \/\/ Has Finish() been called?$/;"	m	class:leveldb::BlockBuilder
flist_	db/version_set.cc	/^  const std::vector<FileMetaData*>* const flist_;$/;"	m	class:leveldb::Version::LevelFileNumIterator::std	file:
fmix32	db/murmurhash3.cc	/^FORCE_INLINE uint32_t fmix32 ( uint32_t h )$/;"	f
fmix64	db/murmurhash3.cc	/^FORCE_INLINE uint64_t fmix64 ( uint64_t k )$/;"	f
fname_	util/testharness.h	/^  const char* fname_;$/;"	m	class:leveldb::test::Tester
force_error_	db/log_test.cc	/^    bool force_error_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
fread_unlocked	port/port_posix.h	70;"	d
func	util/testharness.cc	/^  void (*func)();$/;"	m	struct:leveldb::test::__anon12::Test	file:
func_add_hook	libtool	/^func_add_hook ()$/;"	f
func_add_hook	ltmain.sh	/^func_add_hook ()$/;"	f
func_append	libtool	/^  func_append ()$/;"	f
func_append	ltmain.sh	/^  func_append ()$/;"	f
func_append_quoted	libtool	/^  func_append_quoted ()$/;"	f
func_append_quoted	ltmain.sh	/^  func_append_quoted ()$/;"	f
func_append_uniq	libtool	/^func_append_uniq ()$/;"	f
func_append_uniq	ltmain.sh	/^func_append_uniq ()$/;"	f
func_arith	libtool	/^  func_arith ()$/;"	f
func_arith	ltmain.sh	/^  func_arith ()$/;"	f
func_cc_basename	config.status	/^func_cc_basename ()$/;"	f
func_cc_basename	configure	/^func_cc_basename ()$/;"	f
func_cc_basename	libtool	/^func_cc_basename ()$/;"	f
func_check_prog_grep	libtool	/^  func_check_prog_grep ()$/;"	f
func_check_prog_grep	ltmain.sh	/^  func_check_prog_grep ()$/;"	f
func_check_prog_sed	libtool	/^  func_check_prog_sed ()$/;"	f
func_check_prog_sed	ltmain.sh	/^  func_check_prog_sed ()$/;"	f
func_check_version_match	libtool	/^func_check_version_match ()$/;"	f
func_check_version_match	ltmain.sh	/^func_check_version_match ()$/;"	f
func_cl_dashL	compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	compile	/^func_cl_wrapper ()$/;"	f
func_config	libtool	/^func_config ()$/;"	f
func_config	ltmain.sh	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_check	ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	libtool	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_check	ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	libtool	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	libtool	/^func_cygpath ()$/;"	f
func_cygpath	ltmain.sh	/^func_cygpath ()$/;"	f
func_dll_def_p	libtool	/^func_dll_def_p ()$/;"	f
func_dll_def_p	ltmain.sh	/^func_dll_def_p ()$/;"	f
func_echo	libtool	/^func_echo ()$/;"	f
func_echo	ltmain.sh	/^func_echo ()$/;"	f
func_echo_all	configure	/^func_echo_all ()$/;"	f
func_echo_all	libtool	/^func_echo_all ()$/;"	f
func_echo_all	ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_infix_1	libtool	/^func_echo_infix_1 ()$/;"	f
func_echo_infix_1	ltmain.sh	/^func_echo_infix_1 ()$/;"	f
func_emit_cwrapperexe_src	libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	libtool	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_enable_tag	libtool	/^func_enable_tag ()$/;"	f
func_enable_tag	ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	libtool	/^func_error ()$/;"	f
func_error	ltmain.sh	/^func_error ()$/;"	f
func_exec_program	libtool	/^func_exec_program ()$/;"	f
func_exec_program	ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program_core	libtool	/^func_exec_program_core ()$/;"	f
func_exec_program_core	ltmain.sh	/^func_exec_program_core ()$/;"	f
func_executable_p	libtool	/^func_executable_p ()$/;"	f
func_executable_p	ltmain.sh	/^func_executable_p ()$/;"	f
func_execute_cmds	libtool	/^func_execute_cmds ()$/;"	f
func_execute_cmds	ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_fallback_echo	config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	libtool	/^func_fallback_echo ()$/;"	f
func_fallback_echo	ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	libtool	/^func_fatal_error ()$/;"	f
func_fatal_error	ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	libtool	/^func_fatal_help ()$/;"	f
func_fatal_help	ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	libtool	/^func_features ()$/;"	f
func_features	ltmain.sh	/^func_features ()$/;"	f
func_file_conv	compile	/^func_file_conv ()$/;"	f
func_generate_dlsyms	libtool	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generated_by_libtool_p	libtool	/^func_generated_by_libtool_p ()$/;"	f
func_generated_by_libtool_p	ltmain.sh	/^func_generated_by_libtool_p ()$/;"	f
func_grep	libtool	/^func_grep ()$/;"	f
func_grep	ltmain.sh	/^func_grep ()$/;"	f
func_help	libtool	/^func_help ()$/;"	f
func_help	ltmain.sh	/^func_help ()$/;"	f
func_hookable	libtool	/^func_hookable ()$/;"	f
func_hookable	ltmain.sh	/^func_hookable ()$/;"	f
func_infer_tag	libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	libtool	/^func_lalib_p ()$/;"	f
func_lalib_p	ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	libtool	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	libtool	/^  func_len ()$/;"	f
func_len	ltmain.sh	/^  func_len ()$/;"	f
func_lo2o	libtool	/^  func_lo2o ()$/;"	f
func_lo2o	ltmain.sh	/^  func_lo2o ()$/;"	f
func_lt_dump_args	libtool	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_ver	libtool	/^func_lt_ver ()$/;"	f
func_lt_ver	ltmain.sh	/^func_lt_ver ()$/;"	f
func_ltwrapper_executable_p	libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	libtool	/^func_missing_arg ()$/;"	f
func_missing_arg	ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	libtool	/^func_mkdir_p ()$/;"	f
func_mkdir_p	ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	libtool	/^func_mode_compile ()$/;"	f
func_mode_compile	ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	libtool	/^func_mode_execute ()$/;"	f
func_mode_execute	ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	libtool	/^func_mode_finish ()$/;"	f
func_mode_finish	ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	libtool	/^func_mode_help ()$/;"	f
func_mode_help	ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	libtool	/^func_mode_install ()$/;"	f
func_mode_install	ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	libtool	/^func_mode_link ()$/;"	f
func_mode_link	ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	libtool	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_munge_path_list	config.status	/^func_munge_path_list ()$/;"	f
func_munge_path_list	configure	/^func_munge_path_list ()$/;"	f
func_munge_path_list	libtool	/^func_munge_path_list ()$/;"	f
func_normal_abspath	libtool	/^func_normal_abspath ()$/;"	f
func_normal_abspath	ltmain.sh	/^func_normal_abspath ()$/;"	f
func_notquiet	libtool	/^func_notquiet ()$/;"	f
func_notquiet	ltmain.sh	/^func_notquiet ()$/;"	f
func_options	libtool	/^func_options ()$/;"	f
func_options	ltmain.sh	/^func_options ()$/;"	f
func_options_prep	libtool	/^func_options_prep ()$/;"	f
func_options_prep	ltmain.sh	/^func_options_prep ()$/;"	f
func_parse_lt_options	libtool	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_options	libtool	/^func_parse_options ()$/;"	f
func_parse_options	ltmain.sh	/^func_parse_options ()$/;"	f
func_path_progs	libtool	/^func_path_progs ()$/;"	f
func_path_progs	ltmain.sh	/^func_path_progs ()$/;"	f
func_quote_for_eval	libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	libtool	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_relative_path	libtool	/^func_relative_path ()$/;"	f
func_relative_path	ltmain.sh	/^func_relative_path ()$/;"	f
func_remove_hook	libtool	/^func_remove_hook ()$/;"	f
func_remove_hook	ltmain.sh	/^func_remove_hook ()$/;"	f
func_replace_sysroot	libtool	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_require_term_colors	libtool	/^func_require_term_colors ()$/;"	f
func_require_term_colors	ltmain.sh	/^func_require_term_colors ()$/;"	f
func_resolve_sysroot	libtool	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_run_hooks	libtool	/^func_run_hooks ()$/;"	f
func_run_hooks	ltmain.sh	/^func_run_hooks ()$/;"	f
func_show_eval	libtool	/^func_show_eval ()$/;"	f
func_show_eval	ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	libtool	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_sort_ver	libtool	/^func_sort_ver ()$/;"	f
func_sort_ver	ltmain.sh	/^func_sort_ver ()$/;"	f
func_source	libtool	/^func_source ()$/;"	f
func_source	ltmain.sh	/^func_source ()$/;"	f
func_split_equals	libtool	/^  func_split_equals ()$/;"	f
func_split_equals	ltmain.sh	/^  func_split_equals ()$/;"	f
func_split_short_opt	libtool	/^  func_split_short_opt ()$/;"	f
func_split_short_opt	ltmain.sh	/^  func_split_short_opt ()$/;"	f
func_stripname	libtool	/^  func_stripname ()$/;"	f
func_stripname	ltmain.sh	/^  func_stripname ()$/;"	f
func_stripname_cnf	configure	/^func_stripname_cnf ()$/;"	f
func_suncc_cstd_abi	libtool	/^func_suncc_cstd_abi ()$/;"	f
func_suncc_cstd_abi	ltmain.sh	/^func_suncc_cstd_abi ()$/;"	f
func_to_host_file	libtool	/^func_to_host_file ()$/;"	f
func_to_host_file	ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_path	libtool	/^func_to_host_path ()$/;"	f
func_to_host_path	ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_tool_file	libtool	/^func_to_tool_file ()$/;"	f
func_to_tool_file	ltmain.sh	/^func_to_tool_file ()$/;"	f
func_tr_sh	libtool	/^func_tr_sh ()$/;"	f
func_tr_sh	ltmain.sh	/^func_tr_sh ()$/;"	f
func_usage	libtool	/^func_usage ()$/;"	f
func_usage	ltmain.sh	/^func_usage ()$/;"	f
func_usage_message	libtool	/^func_usage_message ()$/;"	f
func_usage_message	ltmain.sh	/^func_usage_message ()$/;"	f
func_validate_options	libtool	/^func_validate_options ()$/;"	f
func_validate_options	ltmain.sh	/^func_validate_options ()$/;"	f
func_verbose	libtool	/^func_verbose ()$/;"	f
func_verbose	ltmain.sh	/^func_verbose ()$/;"	f
func_version	libtool	/^func_version ()$/;"	f
func_version	ltmain.sh	/^func_version ()$/;"	f
func_warn_and_continue	libtool	/^func_warn_and_continue ()$/;"	f
func_warn_and_continue	ltmain.sh	/^func_warn_and_continue ()$/;"	f
func_warning	libtool	/^func_warning ()$/;"	f
func_warning	ltmain.sh	/^func_warning ()$/;"	f
func_win32_import_lib_p	libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	libtool	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	libtool	/^  func_xform ()$/;"	f
func_xform	ltmain.sh	/^  func_xform ()$/;"	f
function	include/pebblesdb/iterator.h	/^    CleanupFunction function;$/;"	m	struct:leveldb::Iterator::Cleanup
function	util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon13::PosixEnv::BGItem	file:
fwrite_unlocked	port/port_posix.h	78;"	d
gen	db/skiplist_test.cc	/^  static uint64_t gen(Key key) { return (key >> 8) & 0xffffffffu; }$/;"	f	class:leveldb::ConcurrentTest	file:
gen_	doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gen_	doc/bench/db_bench_tree_db.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
generation	db/skiplist_test.cc	/^    port::AtomicPointer generation[K];$/;"	m	struct:leveldb::ConcurrentTest::State	file:
generator_	util/random.h	/^  std::mt19937_64 generator_;$/;"	m	class:leveldb::Random64
getEnv	db/version_set.h	/^  Env* getEnv() {$/;"	f	class:leveldb::VersionSet
getblock32	db/murmurhash3.cc	/^FORCE_INLINE uint32_t getblock32 ( const uint32_t * p, int i )$/;"	f
getblock64	db/murmurhash3.cc	/^FORCE_INLINE uint64_t getblock64 ( const uint64_t * p, int i )$/;"	f
gettid	util/env_posix.cc	/^  static uint64_t gettid() {$/;"	f	class:leveldb::__anon13::PosixEnv
gettid_	util/posix_logger.h	/^  uint64_t (*gettid_)();  \/\/ Return the thread id for the current thread$/;"	m	class:leveldb::PosixLogger
give_advice	missing	/^give_advice ()$/;"	f
glist_	db/version_set.cc	/^  const std::vector<GuardMetaData*>* const glist_;$/;"	m	class:leveldb::Version::LevelGuardNumIterator::std	file:
grow_at_least	util/string_builder.h	/^  void grow_at_least(size_t sz, int print) {$/;"	f	struct:leveldb::StringBuilder
guard	db/version_edit.h	/^  GuardMetaData* guard;       \/\/ The guard that the file belongs to.$/;"	m	struct:leveldb::FileMetaData
guard_array_	db/db_impl.h	/^  uint64_t guard_array_[config::kNumLevels];$/;"	m	class:leveldb::DBImpl
guard_compaction_scores_	db/version_set.h	/^  std::vector<double> guard_compaction_scores_[config::kNumLevels];$/;"	m	class:leveldb::Version
guard_inputs_	db/version_set.h	/^  std::vector<GuardMetaData*> guard_inputs_[2];$/;"	m	class:leveldb::Compaction
guard_key	db/version_edit.h	/^  InternalKey guard_key; \/\/ guard key is selected before any keys are inserted$/;"	m	struct:leveldb::GuardMetaData
guards_	db/version_set.h	/^  std::vector<GuardMetaData*> guards_[config::kNumLevels];$/;"	m	class:leveldb::Version
guards_sorting_func	db/version_set.cc	/^bool guards_sorting_func(GuardMetaData* g1, GuardMetaData* g2) {$/;"	f	namespace:leveldb
has_amd_lock_mb_bug	util/atomic.h	/^  bool has_amd_lock_mb_bug; \/\/ Processor has AMD memory-barrier bug; do lfence$/;"	m	struct:LevelDB_AtomicOps_x86CPUFeatureStruct
has_cmpxchg16b	util/atomic.h	/^  bool has_cmpxchg16b;      \/\/ Processor supports cmpxchg16b instruction.$/;"	m	struct:LevelDB_AtomicOps_x86CPUFeatureStruct
has_comparator_	db/version_edit.h	/^  bool has_comparator_;$/;"	m	class:leveldb::VersionEdit
has_current_user_key_	db/replay_iterator.h	/^  bool has_current_user_key_;$/;"	m	class:leveldb::ReplayIteratorImpl
has_imm_	db/db_impl.cc	/^  bool has_imm_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
has_imm_	db/db_impl.h	/^  port::AtomicPointer has_imm_;  \/\/ So bg thread can detect non-NULL imm_$/;"	m	class:leveldb::DBImpl
has_last_sequence_	db/version_edit.h	/^  bool has_last_sequence_;$/;"	m	class:leveldb::VersionEdit
has_log_number_	db/version_edit.h	/^  bool has_log_number_;$/;"	m	class:leveldb::VersionEdit
has_next_file_number_	db/version_edit.h	/^  bool has_next_file_number_;$/;"	m	class:leveldb::VersionEdit
has_prev_log_number_	db/version_edit.h	/^  bool has_prev_log_number_;$/;"	m	class:leveldb::VersionEdit
has_sse2	util/atomic.h	/^  bool has_sse2;            \/\/ Processor has SSE2.$/;"	m	struct:LevelDB_AtomicOps_x86CPUFeatureStruct
hash	db/skiplist_test.cc	/^  static uint64_t hash(Key key) { return key & 0xff; }$/;"	f	class:leveldb::ConcurrentTest	file:
hash	util/cache.cc	/^  uint32_t hash;      \/\/ Hash of key(); used for fast sharding and comparisons$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
head_	db/skiplist.h	/^  Node* const head_;$/;"	m	class:leveldb::SkipList
heap_	table/merger.cc	/^  unsigned* heap_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
heap_allocated	table/format.h	/^  bool heap_allocated;  \/\/ True iff caller should delete[] data.data()$/;"	m	struct:leveldb::BlockContents
heap_counter_	db/db_bench.cc	/^  int heap_counter_;$/;"	m	class:leveldb::Benchmark	file:
heap_sz_	table/merger.cc	/^  size_t heap_sz_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
hist_	db/db_bench.cc	/^  Histogram hist_;$/;"	m	class:leveldb::__anon19::Stats	file:
hist_	doc/bench/db_bench_sqlite3.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
hist_	doc/bench/db_bench_tree_db.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
host	Makefile	/^host = x86_64-pc-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-pc-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = pc$/;"	m
hrecord_timer	db/version_set.h	39;"	d
hrecord_timer	db/version_set.h	42;"	d
hstart_timer	db/version_set.h	38;"	d
hstart_timer	db/version_set.h	41;"	d
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
icmp_	db/repair.cc	/^  InternalKeyComparator const icmp_;$/;"	m	class:leveldb::__anon27::Repairer	file:
icmp_	db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
icmp_	db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelGuardNumIterator	file:
icmp_	db/version_set.h	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::VersionSet
icmp_	table/merger.cc	/^  const InternalKeyComparator* icmp_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
id	db/db_test.cc	/^  int id;$/;"	m	struct:leveldb::__anon23::MTThread	file:
id_mutex_	util/cache.cc	/^  port::Mutex id_mutex_;$/;"	m	class:leveldb::__anon16::ShardedLRUCache	file:
imm	db/db_impl.cc	/^  MemTable* imm;$/;"	m	struct:leveldb::__anon21::IterState	file:
imm_	db/db_impl.h	/^  MemTable* imm_;                \/\/ Memtable being compacted$/;"	m	class:leveldb::DBImpl
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
increment_32_fullbarrier	util/atomic.h	/^increment_32_fullbarrier(volatile uint32_t* ptr, uint32_t increment)$/;"	f	namespace:leveldb::atomic
increment_32_nobarrier	util/atomic.h	/^increment_32_nobarrier(volatile uint32_t* ptr, uint32_t increment)$/;"	f	namespace:leveldb::atomic
increment_64_fullbarrier	util/atomic.h	/^increment_64_fullbarrier(volatile uint64_t* ptr, uint64_t increment)$/;"	f	namespace:leveldb::atomic
increment_64_nobarrier	util/atomic.h	/^increment_64_nobarrier(volatile uint64_t* ptr, uint64_t increment)$/;"	f	namespace:leveldb::atomic
index_	db/version_set.cc	/^  int index_; \/\/uint32 is not used because index_ can be -1 if it's pointing to sentinel files$/;"	m	class:leveldb::Version::LevelGuardNumIterator	file:
index_	db/version_set.cc	/^  uint32_t index_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
index_block	table/table.cc	/^  Block* index_block;$/;"	m	struct:leveldb::Table::Rep	file:
index_block	table/table_builder.cc	/^  BlockBuilder index_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_block_options	table/table_builder.cc	/^  Options index_block_options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_handle	table/format.h	/^  const BlockHandle& index_handle() const {$/;"	f	class:leveldb::Footer
index_handle_	table/format.h	/^  BlockHandle index_handle_;$/;"	m	class:leveldb::Footer
index_iter_	table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon4::TwoLevelIterator	file:
index_iter_	table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
info_log	include/pebblesdb/options.h	/^  Logger* info_log;$/;"	m	struct:leveldb::Options
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init	util/atomic.cc	/^static initializer init;$/;"	v	file:
init	util/timer.h	/^	void init() {$/;"	f	class:leveldb::Timer
init_buffer	util/string_builder.h	/^  void init_buffer(int size) {$/;"	f	struct:leveldb::StringBuilder
initial_offset_	db/log_reader.h	/^  uint64_t const initial_offset_;$/;"	m	class:leveldb::log::Reader
initial_offset_last_record_offsets_	db/log_test.cc	/^  static uint64_t initial_offset_last_record_offsets_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_last_record_offsets_	db/log_test.cc	/^uint64_t LogTest::initial_offset_last_record_offsets_[] =$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	db/log_test.cc	/^  static size_t initial_offset_record_sizes_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	db/log_test.cc	/^size_t LogTest::initial_offset_record_sizes_[] =$/;"	m	class:leveldb::log::LogTest	file:
initializer	util/atomic.cc	/^        initializer() { LevelDB_AtomicOps_Internalx86CPUFeaturesInit(); }$/;"	f	class:initializer
initializer	util/atomic.cc	/^class __attribute__ ((visibility ("hidden"))) initializer$/;"	c	file:
initiated_	db/db_bench.cc	/^    bool initiated_;$/;"	m	class:leveldb::Benchmark::GenerateTwoTermExpKeys	file:
input	db/version_set.h	/^  FileMetaData* input(int which, int i) const { return inputs_[which][i]; }$/;"	f	class:leveldb::Compaction
input_version_	db/version_set.h	/^  Version* input_version_;$/;"	m	class:leveldb::Compaction
inputs_	db/version_set.h	/^  std::vector<FileMetaData*> inputs_[2]; \/\/ The three sets of inputs$/;"	m	class:leveldb::Compaction
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/young\/ExperDB\/SUPE\/pebblesdb\/src\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
int16_t	port/win/stdint.h	/^typedef signed short          int16_t;$/;"	t
int32_t	port/win/stdint.h	/^typedef signed int            int32_t;$/;"	t
int64_t	port/win/stdint.h	/^typedef signed long long      int64_t;$/;"	t
int8_t	port/win/stdint.h	/^typedef signed char           int8_t;$/;"	t
internal_comparator	db/version_edit.h	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionEdit::BySmallestPair
internal_comparator	db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestGuard	file:
internal_comparator	db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestInternalKey	file:
internal_comparator	db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestKey	file:
internal_comparator	db/version_set.cc	/^  const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::BySmallestGuard	file:
internal_comparator	db/version_set.cc	/^  const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::SortBySmallestGuard	file:
internal_comparator_	db/db_impl.h	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::DBImpl
internal_comparator_	table/table_test.cc	/^  InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::MemTableConstructor	file:
internal_filter_policy_	db/db_impl.h	/^  const InternalFilterPolicy internal_filter_policy_;$/;"	m	class:leveldb::DBImpl
internal_key	db/dbformat.h	/^  Slice internal_key() const { return Slice(kstart_, end_ - kstart_); }$/;"	f	class:leveldb::LookupKey
internal_keys_to_seek_	db/version_set.h	/^  Slice internal_keys_to_seek_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
ipolicy_	db/repair.cc	/^  InternalFilterPolicy const ipolicy_;$/;"	m	class:leveldb::__anon27::Repairer	file:
is_default	db/c.cc	/^  bool is_default;$/;"	m	struct:leveldb_env_t	file:
is_horizontal_compaction	db/version_set.h	/^  bool is_horizontal_compaction;$/;"	m	class:leveldb::Compaction
is_merging_iterator_for_files_	table/merger.cc	/^  bool is_merging_iterator_for_files_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
is_valid_key_for_random_seek	db/db_test.cc	/^bool is_valid_key_for_random_seek(int n) {$/;"	f	namespace:leveldb
issue178_test_DEPENDENCIES	Makefile	/^issue178_test_DEPENDENCIES = libpebblesdb.la$/;"	m
issue178_test_LDADD	Makefile	/^issue178_test_LDADD = libpebblesdb.la -lpthread$/;"	m
issue178_test_OBJECTS	Makefile	/^issue178_test_OBJECTS = $(am_issue178_test_OBJECTS)$/;"	m
issue178_test_SOURCES	Makefile	/^issue178_test_SOURCES = issues\/issue178_test.cc $(TESTHARNESS)$/;"	m
issue200_test_DEPENDENCIES	Makefile	/^issue200_test_DEPENDENCIES = libpebblesdb.la$/;"	m
issue200_test_LDADD	Makefile	/^issue200_test_LDADD = libpebblesdb.la -lpthread$/;"	m
issue200_test_OBJECTS	Makefile	/^issue200_test_OBJECTS = $(am_issue200_test_OBJECTS)$/;"	m
issue200_test_SOURCES	Makefile	/^issue200_test_SOURCES = issues\/issue200_test.cc $(TESTHARNESS)$/;"	m
iter	table/iterator_wrapper.h	/^  Iterator* iter() const { return iter_; }$/;"	f	class:leveldb::IteratorWrapper
iter_	db/db_iter.cc	/^  Iterator* const iter_;$/;"	m	class:leveldb::__anon20::DBIter	file:
iter_	db/db_test.cc	/^    KVMap::const_iterator iter_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
iter_	db/memtable.cc	/^  MemTable::Table::Iterator iter_;$/;"	m	class:leveldb::MemTableIterator	file:
iter_	db/replay_iterator.h	/^  Iterator* iter_;$/;"	m	struct:leveldb::ReplayState
iter_	table/iterator_wrapper.h	/^  Iterator* iter_;$/;"	m	class:leveldb::IteratorWrapper
iter_	table/table_test.cc	/^  Iterator* iter_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
iterators_to_seek_	db/version_set.h	/^  IteratorWrapper* iterators_to_seek_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
kBadRecord	db/log_reader.h	/^    kBadRecord = kMaxRecordType + 2$/;"	e	enum:leveldb::log::Reader::__anon28
kBlockSize	db/log_format.h	/^static const unsigned kBlockSize = 32768;$/;"	m	namespace:leveldb::log
kBlockSize	helpers/memenv/memenv.cc	/^  enum { kBlockSize = 8 * 1024 };$/;"	e	enum:leveldb::__anon9::FileState::__anon10	file:
kBlockTrailerSize	table/format.h	/^static const size_t kBlockTrailerSize = 5;$/;"	m	namespace:leveldb
kBucketLimit	util/histogram.cc	/^const double Histogram::kBucketLimit[kNumBuckets] = {$/;"	m	class:leveldb::Histogram	file:
kBucketLimit	util/histogram.h	/^  static const double kBucketLimit[kNumBuckets];$/;"	m	class:leveldb::Histogram
kCacheSize	util/cache_test.cc	/^  static const int kCacheSize = 1000;$/;"	m	class:leveldb::CacheTest	file:
kCompactPointer	db/version_edit.cc	/^  kCompactPointer       = 5,$/;"	e	enum:leveldb::Tag	file:
kComparator	db/version_edit.cc	/^  kComparator           = 1,$/;"	e	enum:leveldb::Tag	file:
kCorrupt	db/version_set.h	/^  kCorrupt$/;"	e	enum:leveldb::SaverState
kCorruption	include/pebblesdb/status.h	/^    kCorruption = 2,$/;"	e	enum:leveldb::Status::Code
kCount	db/autocompact_test.cc	/^static const int kCount = kTotalSize \/ kValueSize;$/;"	m	namespace:leveldb	file:
kCurrentFile	db/filename.h	/^  kCurrentFile,$/;"	e	enum:leveldb::FileType
kDBLockFile	db/filename.h	/^  kDBLockFile,$/;"	e	enum:leveldb::FileType
kDefault	db/db_test.cc	/^    kDefault,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kDelayMicros	util/env_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDeleted	db/version_set.h	/^  kDeleted,$/;"	e	enum:leveldb::SaverState
kDeletedFile	db/version_edit.cc	/^  kDeletedFile          = 6,$/;"	e	enum:leveldb::Tag	file:
kDeletedGuard	db/version_edit.cc	/^  kDeletedGuard         = 10,$/;"	e	enum:leveldb::Tag	file:
kDeletedSentinelFile	db/version_edit.cc	/^  kDeletedSentinelFile  = 14,$/;"	e	enum:leveldb::Tag	file:
kDescriptorFile	db/filename.h	/^  kDescriptorFile,$/;"	e	enum:leveldb::FileType
kEncodedLength	table/format.h	/^    kEncodedLength = 2*BlockHandle::kMaxEncodedLength + 8$/;"	e	enum:leveldb::Footer::__anon2
kEnd	db/db_test.cc	/^    kEnd$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kEof	db/log_reader.h	/^    kEof = kMaxRecordType + 1,$/;"	e	enum:leveldb::log::Reader::__anon28
kFileInsideGuard	db/version_edit.cc	/^  kFileInsideGuard      = 12,$/;"	e	enum:leveldb::Tag	file:
kFilter	db/db_test.cc	/^    kFilter,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kFilterBase	table/filter_block.cc	/^static const size_t kFilterBase = 1 << kFilterBaseLg;$/;"	m	namespace:leveldb	file:
kFilterBaseLg	table/filter_block.cc	/^static const size_t kFilterBaseLg = 11;$/;"	m	namespace:leveldb	file:
kFirstType	db/log_format.h	/^  kFirstType = 2,$/;"	e	enum:leveldb::log::RecordType
kForward	db/db_iter.cc	/^    kForward,$/;"	e	enum:leveldb::__anon20::DBIter::Direction	file:
kForward	table/merger.cc	/^    kForward,$/;"	e	enum:leveldb::__anon5::MergingIterator::Direction	file:
kFound	db/version_set.h	/^  kFound,$/;"	e	enum:leveldb::SaverState
kFullType	db/log_format.h	/^  kFullType = 1,$/;"	e	enum:leveldb::log::RecordType
kHeader	db/write_batch.cc	/^static const size_t kHeader = 12;$/;"	m	namespace:leveldb	file:
kHeaderSize	db/log_format.h	/^static const unsigned kHeaderSize = 4 + 1 + 2;$/;"	m	namespace:leveldb::log
kIOError	include/pebblesdb/status.h	/^    kIOError = 5$/;"	e	enum:leveldb::Status::Code
kInfoLogFile	db/filename.h	/^  kInfoLogFile  \/\/ Either the current one, or an old one$/;"	e	enum:leveldb::FileType
kInvalidArgument	include/pebblesdb/status.h	/^    kInvalidArgument = 4,$/;"	e	enum:leveldb::Status::Code
kL0_CompactionTrigger	db/dbformat.h	/^static const unsigned kL0_CompactionTrigger = 4;$/;"	m	namespace:leveldb::config
kL0_GuardCompactionTrigger	db/dbformat.h	/^static const unsigned kL0_GuardCompactionTrigger = 2;$/;"	m	namespace:leveldb::config
kL0_SentinelCompactionTrigger	db/dbformat.h	/^static const unsigned kL0_SentinelCompactionTrigger = 2;$/;"	m	namespace:leveldb::config
kL0_SlowdownWritesTrigger	db/dbformat.h	/^static const unsigned kL0_SlowdownWritesTrigger = 8;$/;"	m	namespace:leveldb::config
kL0_StopWritesTrigger	db/dbformat.h	/^static const unsigned kL0_StopWritesTrigger = 12;$/;"	m	namespace:leveldb::config
kLastSequence	db/version_edit.cc	/^  kLastSequence         = 4,$/;"	e	enum:leveldb::Tag	file:
kLastType	db/log_format.h	/^  kLastType = 4$/;"	e	enum:leveldb::log::RecordType
kLittleEndian	port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	m	namespace:leveldb::port
kLittleEndian	port/port_posix.h	/^static const bool kLittleEndian = PLATFORM_IS_LITTLE_ENDIAN;$/;"	m	namespace:leveldb::port
kLogFile	db/filename.h	/^  kLogFile,$/;"	e	enum:leveldb::FileType
kLogNumber	db/version_edit.cc	/^  kLogNumber            = 2,$/;"	e	enum:leveldb::Tag	file:
kMajorVersion	include/pebblesdb/db.h	/^static const int kMajorVersion = 1;$/;"	m	namespace:leveldb
kMaskDelta	util/crc32c.h	/^static const uint32_t kMaskDelta = 0xa282ead8ul;$/;"	m	namespace:leveldb::crc32c
kMaxEncodedLength	table/format.h	/^  enum { kMaxEncodedLength = 10 + 10 };$/;"	e	enum:leveldb::BlockHandle::__anon1
kMaxFiles	db/version_edit.h	/^  int kMaxFiles;$/;"	m	struct:leveldb::GuardMetaData
kMaxFilesPerGuardSentinel	db/dbformat.h	/^static const unsigned kMaxFilesPerGuardSentinel = 8;$/;"	m	namespace:leveldb::config
kMaxHeight	db/skiplist.h	/^  enum { kMaxHeight = 17 };$/;"	e	enum:leveldb::SkipList::__anon25
kMaxMemCompactLevel	db/dbformat.h	/^static const unsigned kMaxMemCompactLevel = 2;$/;"	m	namespace:leveldb::config
kMaxRecordType	db/log_format.h	/^static const unsigned kMaxRecordType = kLastType;$/;"	m	namespace:leveldb::log
kMaxSequenceNumber	db/dbformat.h	/^static const SequenceNumber kMaxSequenceNumber =$/;"	m	namespace:leveldb
kMiddleType	db/log_format.h	/^  kMiddleType = 3,$/;"	e	enum:leveldb::log::RecordType
kMinorVersion	include/pebblesdb/db.h	/^static const int kMinorVersion = 17;$/;"	m	namespace:leveldb
kNewCompleteGuard	db/version_edit.cc	/^  kNewCompleteGuard     = 15,$/;"	e	enum:leveldb::Tag	file:
kNewFile	db/version_edit.cc	/^  kNewFile              = 7,$/;"	e	enum:leveldb::Tag	file:
kNewGuard	db/version_edit.cc	/^  kNewGuard             = 11,$/;"	e	enum:leveldb::Tag	file:
kNewSentinelFile	db/version_edit.cc	/^  kNewSentinelFile      = 13,$/;"	e	enum:leveldb::Tag	file:
kNewSentinelFileNo	db/version_edit.cc	/^  kNewSentinelFileNo	= 16$/;"	e	enum:leveldb::Tag	file:
kNextFileNumber	db/version_edit.cc	/^  kNextFileNumber       = 3,$/;"	e	enum:leveldb::Tag	file:
kNoCompression	include/pebblesdb/options.h	/^  kNoCompression     = 0x0,$/;"	e	enum:leveldb::CompressionType
kNotFound	db/version_set.h	/^  kNotFound,$/;"	e	enum:leveldb::SaverState
kNotFound	include/pebblesdb/status.h	/^    kNotFound = 1,$/;"	e	enum:leveldb::Status::Code
kNotSupported	include/pebblesdb/status.h	/^    kNotSupported = 3,$/;"	e	enum:leveldb::Status::Code
kNumBuckets	util/histogram.h	/^  enum { kNumBuckets = 154 };$/;"	e	enum:leveldb::Histogram::__anon17
kNumKeys	db/db_test.cc	/^static const int kNumKeys = 1000;$/;"	m	namespace:leveldb::__anon23	file:
kNumKeys	issues/issue178_test.cc	/^const int kNumKeys = 1100000;$/;"	m	namespace:__anon8	file:
kNumLevels	db/dbformat.h	/^static const unsigned kNumLevels = 7;$/;"	m	namespace:leveldb::config
kNumNonTableCacheFiles	db/db_impl.cc	/^const int kNumNonTableCacheFiles = 10;$/;"	m	namespace:leveldb	file:
kNumShardBits	util/cache.cc	/^static const unsigned kNumShardBits = 4;$/;"	m	namespace:leveldb::__anon16	file:
kNumShards	util/cache.cc	/^static const unsigned kNumShards = 1 << kNumShardBits;$/;"	m	namespace:leveldb::__anon16	file:
kNumTestArgs	table/table_test.cc	/^static const int kNumTestArgs = sizeof(kTestArgList) \/ sizeof(kTestArgList[0]);$/;"	m	namespace:leveldb	file:
kNumThreads	db/db_test.cc	/^static const int kNumThreads = 4;$/;"	m	namespace:leveldb::__anon23	file:
kOk	include/pebblesdb/status.h	/^    kOk = 0,$/;"	e	enum:leveldb::Status::Code
kPrevLogNumber	db/version_edit.cc	/^  kPrevLogNumber        = 9,$/;"	e	enum:leveldb::Tag	file:
kReadBytesPeriod	db/dbformat.h	/^static const unsigned kReadBytesPeriod = 1048576;$/;"	m	namespace:leveldb::config
kReverse	db/db_iter.cc	/^    kReverse$/;"	e	enum:leveldb::__anon20::DBIter::Direction	file:
kReverse	table/merger.cc	/^    kReverse$/;"	e	enum:leveldb::__anon5::MergingIterator::Direction	file:
kSnappyCompression	include/pebblesdb/options.h	/^  kSnappyCompression = 0x1$/;"	e	enum:leveldb::CompressionType
kStraightReads	db/db_impl.cc	/^const unsigned kStraightReads = 10;$/;"	m	namespace:leveldb	file:
kTableFile	db/filename.h	/^  kTableFile,$/;"	e	enum:leveldb::FileType
kTableMagicNumber	table/format.h	/^static const uint64_t kTableMagicNumber = 0xdb4775248b80fb57ull;$/;"	m	namespace:leveldb
kTempFile	db/filename.h	/^  kTempFile,$/;"	e	enum:leveldb::FileType
kTestArgList	table/table_test.cc	/^static const TestArgs kTestArgList[] = {$/;"	m	namespace:leveldb	file:
kTestSeconds	db/db_test.cc	/^static const int kTestSeconds = 10;$/;"	m	namespace:leveldb::__anon23	file:
kTotalSize	db/autocompact_test.cc	/^static const int kTotalSize = 100 * 1024 * 1024;$/;"	m	namespace:leveldb	file:
kTypeDeletion	db/dbformat.h	/^  kTypeDeletion = 0x0,$/;"	e	enum:leveldb::ValueType
kTypeGuard	db/dbformat.h	/^  kTypeGuard = 0x2$/;"	e	enum:leveldb::ValueType
kTypeValue	db/dbformat.h	/^  kTypeValue = 0x1,$/;"	e	enum:leveldb::ValueType
kUncompressed	db/db_test.cc	/^    kUncompressed,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kValueSize	db/autocompact_test.cc	/^static const int kValueSize = 200 * 1024;$/;"	m	namespace:leveldb	file:
kValueSize	db/corruption_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueTypeForSeek	db/dbformat.h	/^static const ValueType kValueTypeForSeek = kTypeValue;$/;"	m	namespace:leveldb
kVerbose	util/bloom_test.cc	/^static const int kVerbose = 1;$/;"	m	namespace:leveldb	file:
kZeroType	db/log_format.h	/^  kZeroType = 0,$/;"	e	enum:leveldb::log::RecordType
k_	util/bloom.cc	/^  size_t k_;$/;"	m	class:leveldb::__anon15::BloomFilterPolicy	file:
key	db/db_bench.cc	/^  	unsigned long long key;$/;"	m	struct:leveldb::Benchmark::trace_operation_t	file:
key	db/db_iter.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon20::DBIter
key	db/db_test.cc	/^    virtual Slice key() const { return iter_->first; }$/;"	f	class:leveldb::ModelDB::ModelIter
key	db/memtable.cc	/^  virtual Slice key() const { return GetLengthPrefixedSlice(iter_.key()); }$/;"	f	class:leveldb::MemTableIterator
key	db/replay_iterator.cc	/^Slice ReplayIteratorImpl::key() const {$/;"	f	class:leveldb::ReplayIteratorImpl
key	db/skiplist.h	/^  Key const key;$/;"	m	struct:leveldb::SkipList::Node
key	db/skiplist.h	/^inline const Key& SkipList<Key,Comparator,Extractor>::Iterator::key() const {$/;"	f	class:leveldb::SkipList::Iterator
key	db/skiplist_test.cc	/^  static uint64_t key(Key key) { return (key >> 40); }$/;"	f	class:leveldb::ConcurrentTest	file:
key	db/version_set.cc	/^  Slice key() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
key	db/version_set.cc	/^  Slice key() const {$/;"	f	class:leveldb::Version::LevelGuardNumIterator
key	table/block.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::Block::Iter
key	table/iterator.cc	/^  Slice key() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon3::EmptyIterator
key	table/iterator_wrapper.h	/^  Slice key() const         { assert(Valid()); return key_; }$/;"	f	class:leveldb::IteratorWrapper
key	table/merger.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon5::MergingIterator
key	table/table_test.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::KeyConvertingIterator
key	table/two_level_iterator.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
key	table/two_level_iterator.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
key	util/cache.cc	/^  Slice key() const {$/;"	f	struct:leveldb::__anon16::LRUHandle
key_	table/block.cc	/^  std::string key_;$/;"	m	class:leveldb::Block::Iter	file:
key_	table/iterator_wrapper.h	/^  Slice key_;$/;"	m	class:leveldb::IteratorWrapper
key_data	util/cache.cc	/^  char key_data[1];   \/\/ Beginning of key$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
key_length	util/cache.cc	/^  size_t key_length;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
key_match_	db/c.cc	/^  unsigned char (*key_match_)($/;"	m	struct:leveldb_filterpolicy_t	file:
key_offsets_	table/filter_block.h	/^  std::vector<size_t> key_offsets_;     \/\/ Starting index in keys_ of each key$/;"	m	class:leveldb::FileLevelFilterBuilder
key_size_	db/db_bench.cc	/^  int key_size_;$/;"	m	class:leveldb::Benchmark	file:
keyrange_access	db/db_bench.cc	/^    int64_t keyrange_access;$/;"	m	struct:leveldb::Benchmark::KeyrangeUnit	file:
keyrange_keys	db/db_bench.cc	/^    int64_t keyrange_keys;$/;"	m	struct:leveldb::Benchmark::KeyrangeUnit	file:
keyrange_num_	db/db_bench.cc	/^    int64_t keyrange_num_;$/;"	m	class:leveldb::Benchmark::GenerateTwoTermExpKeys	file:
keyrange_rand_max_	db/db_bench.cc	/^    int64_t keyrange_rand_max_;$/;"	m	class:leveldb::Benchmark::GenerateTwoTermExpKeys	file:
keyrange_set_	db/db_bench.cc	/^    std::vector<KeyrangeUnit> keyrange_set_;$/;"	m	class:leveldb::Benchmark::GenerateTwoTermExpKeys	file:
keyrange_size_	db/db_bench.cc	/^    int64_t keyrange_size_;$/;"	m	class:leveldb::Benchmark::GenerateTwoTermExpKeys	file:
keyrange_start	db/db_bench.cc	/^    int64_t keyrange_start;$/;"	m	struct:leveldb::Benchmark::KeyrangeUnit	file:
keys_	db/db_bench.cc	/^  std::vector<std::string> keys_;$/;"	m	class:leveldb::Benchmark	file:
keys_	table/filter_block.h	/^  StringBuilder keys_;            \/\/ Flattened key contents$/;"	m	class:leveldb::FileLevelFilterBuilder
keys_	table/filter_block.h	/^  StringBuilder keys_;            \/\/ Flattened key contents$/;"	m	class:leveldb::FilterBlockBuilder
keys_	util/bloom_test.cc	/^  std::vector<std::string> keys_;$/;"	m	class:leveldb::BloomTest	file:
keys_per_prefix_	db/db_bench.cc	/^  int64_t keys_per_prefix_;$/;"	m	class:leveldb::Benchmark	file:
kstart_	db/dbformat.h	/^  const char* kstart_;$/;"	m	class:leveldb::LookupKey
kv_d	db/db_bench.cc	/^  	unsigned long long kv_d;$/;"	m	struct:leveldb::Benchmark::result_t	file:
kv_g	db/db_bench.cc	/^  	unsigned long long kv_g;$/;"	m	struct:leveldb::Benchmark::result_t	file:
kv_itnext	db/db_bench.cc	/^  	unsigned long long kv_itnext;$/;"	m	struct:leveldb::Benchmark::result_t	file:
kv_itseek	db/db_bench.cc	/^  	unsigned long long kv_itseek;$/;"	m	struct:leveldb::Benchmark::result_t	file:
kv_p	db/db_bench.cc	/^  	unsigned long long kv_p;$/;"	m	struct:leveldb::Benchmark::result_t	file:
kvdata	db/db_bench.cc	/^  	unsigned long long kvdata;$/;"	m	struct:leveldb::Benchmark::result_t	file:
large_	util/arena.h	/^  Block* large_;$/;"	m	class:leveldb::Arena
largest	db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
largest	db/version_edit.h	/^  InternalKey largest;        \/\/ Largest internal key served by table$/;"	m	struct:leveldb::FileMetaData
largest	db/version_edit.h	/^  InternalKey largest;   \/\/ Largest internal key served by table$/;"	m	struct:leveldb::GuardMetaData
last_id_	util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon16::ShardedLRUCache	file:
last_key	table/table_builder.cc	/^  std::string last_key;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
last_key_	table/block_builder.h	/^  StringBuilder         last_key_;$/;"	m	class:leveldb::BlockBuilder
last_op_finish_	db/db_bench.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::__anon19::Stats	file:
last_op_finish_	doc/bench/db_bench_sqlite3.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_op_finish_	doc/bench/db_bench_tree_db.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_options_	db/db_test.cc	/^  Options last_options_;$/;"	m	class:leveldb::DBTest	file:
last_record_offset_	db/log_reader.h	/^  uint64_t last_record_offset_;$/;"	m	class:leveldb::log::Reader
last_sequence_	db/version_edit.h	/^  SequenceNumber last_sequence_;$/;"	m	class:leveldb::VersionEdit
last_sequence_	db/version_set.h	/^  uint64_t last_sequence_;$/;"	m	class:leveldb::VersionSet
length_	util/cache.cc	/^  uint32_t length_;$/;"	m	class:leveldb::__anon16::HandleTable	file:
length_	util/env_posix.cc	/^  size_t length_;$/;"	m	class:leveldb::__anon13::PosixMmapReadableFile	file:
level	db/db_impl.h	/^    unsigned level;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
level	db/version_edit.h	/^  int level;$/;"	m	struct:leveldb::GuardMetaData
level	db/version_set.h	/^  unsigned level() const { return level_; }$/;"	f	class:leveldb::Compaction
level	table/merger.cc	/^  unsigned level;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
level	table/two_level_iterator.cc	/^  unsigned level;$/;"	m	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
level_	db/version_set.h	/^  unsigned level_;$/;"	m	class:leveldb::Compaction
level_ptrs_	db/version_set.h	/^  size_t level_ptrs_[config::kNumLevels];$/;"	m	class:leveldb::Compaction
leveldb	db/autocompact_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/builder.h	/^namespace leveldb {$/;"	n
leveldb	db/corruption_test.cc	/^namespace leveldb$/;"	n	file:
leveldb	db/db_bench.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_impl.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_impl.h	/^namespace leveldb {$/;"	n
leveldb	db/db_iter.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_iter.h	/^namespace leveldb {$/;"	n
leveldb	db/db_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/dbformat.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/dbformat.h	/^namespace leveldb {$/;"	n
leveldb	db/dbformat_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/filename.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/filename.h	/^namespace leveldb {$/;"	n
leveldb	db/filename_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/leveldb_main.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_format.h	/^namespace leveldb {$/;"	n
leveldb	db/log_reader.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_reader.h	/^namespace leveldb {$/;"	n
leveldb	db/log_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_writer.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_writer.h	/^namespace leveldb {$/;"	n
leveldb	db/memtable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/memtable.h	/^namespace leveldb {$/;"	n
leveldb	db/repair.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/replay_iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/replay_iterator.h	/^namespace leveldb {$/;"	n
leveldb	db/skiplist.h	/^namespace leveldb {$/;"	n
leveldb	db/skiplist_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/snapshot.h	/^namespace leveldb {$/;"	n
leveldb	db/table_cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/table_cache.h	/^namespace leveldb {$/;"	n
leveldb	db/version_edit.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_edit.h	/^namespace leveldb {$/;"	n
leveldb	db/version_edit_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_set.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_set.h	/^namespace leveldb {$/;"	n
leveldb	db/version_set_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/write_batch.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/write_batch_internal.h	/^namespace leveldb {$/;"	n
leveldb	db/write_batch_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	doc/bench/db_bench_sqlite3.cc	/^namespace leveldb {$/;"	n	file:
leveldb	doc/bench/db_bench_tree_db.cc	/^namespace leveldb {$/;"	n	file:
leveldb	helpers/memenv/memenv.cc	/^namespace leveldb {$/;"	n	file:
leveldb	helpers/memenv/memenv.h	/^namespace leveldb {$/;"	n
leveldb	helpers/memenv/memenv_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	include/pebblesdb/cache.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/comparator.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/db.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/env.h	/^namespace leveldb$/;"	n
leveldb	include/pebblesdb/filter_policy.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/iterator.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/options.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/replay_iterator.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/slice.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/status.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/table.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/table_builder.h	/^namespace leveldb {$/;"	n
leveldb	include/pebblesdb/write_batch.h	/^namespace leveldb {$/;"	n
leveldb	issues/issue200_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb-verify.cc	/^namespace leveldb {$/;"	n	file:
leveldb	port/atomic_pointer.h	/^namespace leveldb {$/;"	n
leveldb	port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	port/port_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	port/port_posix.h	/^namespace leveldb {$/;"	n
leveldb	table/block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/block.h	/^namespace leveldb {$/;"	n
leveldb	table/block_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/block_builder.h	/^namespace leveldb {$/;"	n
leveldb	table/filter_block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/filter_block.h	/^namespace leveldb {$/;"	n
leveldb	table/filter_block_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/format.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/format.h	/^namespace leveldb {$/;"	n
leveldb	table/iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/iterator_wrapper.h	/^namespace leveldb {$/;"	n
leveldb	table/merger.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/merger.h	/^namespace leveldb {$/;"	n
leveldb	table/table.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/table_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/table_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/two_level_iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/two_level_iterator.h	/^namespace leveldb {$/;"	n
leveldb	util/arena.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/arena.h	/^namespace leveldb {$/;"	n
leveldb	util/arena_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/atomic.h	/^namespace leveldb$/;"	n
leveldb	util/bloom.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/bloom_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/cache_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/coding.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/coding.h	/^namespace leveldb {$/;"	n
leveldb	util/coding_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/comparator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/crc32c.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/crc32c.h	/^namespace leveldb {$/;"	n
leveldb	util/crc32c_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/filter_policy.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/hash.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/hash.h	/^namespace leveldb {$/;"	n
leveldb	util/histogram.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/histogram.h	/^namespace leveldb {$/;"	n
leveldb	util/logging.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/logging.h	/^namespace leveldb {$/;"	n
leveldb	util/mutexlock.h	/^namespace leveldb {$/;"	n
leveldb	util/options.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/posix_logger.h	/^namespace leveldb {$/;"	n
leveldb	util/random.h	/^namespace leveldb {$/;"	n
leveldb	util/status.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/string_builder.h	/^namespace leveldb {$/;"	n
leveldb	util/testharness.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/testharness.h	/^namespace leveldb {$/;"	n
leveldb	util/testutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/testutil.h	/^namespace leveldb {$/;"	n
leveldb	util/timer.h	/^namespace leveldb {$/;"	n
leveldb_approximate_sizes	db/c.cc	/^void leveldb_approximate_sizes($/;"	f
leveldb_atomic_h_	util/atomic.h	42;"	d
leveldb_cache_create_lru	db/c.cc	/^leveldb_cache_t* leveldb_cache_create_lru(size_t capacity) {$/;"	f
leveldb_cache_destroy	db/c.cc	/^void leveldb_cache_destroy(leveldb_cache_t* cache) {$/;"	f
leveldb_cache_t	db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	s	file:
leveldb_cache_t	include/pebblesdb/c.h	/^typedef struct leveldb_cache_t         leveldb_cache_t;$/;"	t	typeref:struct:leveldb_cache_t
leveldb_close	db/c.cc	/^void leveldb_close(leveldb_t* db) {$/;"	f
leveldb_compact_range	db/c.cc	/^void leveldb_compact_range($/;"	f
leveldb_comparator_create	db/c.cc	/^leveldb_comparator_t* leveldb_comparator_create($/;"	f
leveldb_comparator_destroy	db/c.cc	/^void leveldb_comparator_destroy(leveldb_comparator_t* cmp) {$/;"	f
leveldb_comparator_t	db/c.cc	/^struct leveldb_comparator_t : public Comparator {$/;"	s	file:
leveldb_comparator_t	include/pebblesdb/c.h	/^typedef struct leveldb_comparator_t    leveldb_comparator_t;$/;"	t	typeref:struct:leveldb_comparator_t
leveldb_create_default_env	db/c.cc	/^leveldb_env_t* leveldb_create_default_env() {$/;"	f
leveldb_create_iterator	db/c.cc	/^leveldb_iterator_t* leveldb_create_iterator($/;"	f
leveldb_create_snapshot	db/c.cc	/^const leveldb_snapshot_t* leveldb_create_snapshot($/;"	f
leveldb_delete	db/c.cc	/^void leveldb_delete($/;"	f
leveldb_destroy_db	db/c.cc	/^void leveldb_destroy_db($/;"	f
leveldb_dump_all_DEPENDENCIES	Makefile	/^leveldb_dump_all_DEPENDENCIES = libpebblesdb.la$/;"	m
leveldb_dump_all_LDADD	Makefile	/^leveldb_dump_all_LDADD = libpebblesdb.la -lpthread$/;"	m
leveldb_dump_all_OBJECTS	Makefile	/^leveldb_dump_all_OBJECTS = $(am_leveldb_dump_all_OBJECTS)$/;"	m
leveldb_dump_all_SOURCES	Makefile	/^leveldb_dump_all_SOURCES = leveldb-dump-all.cc$/;"	m
leveldb_env_destroy	db/c.cc	/^void leveldb_env_destroy(leveldb_env_t* env) {$/;"	f
leveldb_env_t	db/c.cc	/^struct leveldb_env_t {$/;"	s	file:
leveldb_env_t	include/pebblesdb/c.h	/^typedef struct leveldb_env_t           leveldb_env_t;$/;"	t	typeref:struct:leveldb_env_t
leveldb_filelock_t	db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	s	file:
leveldb_filelock_t	include/pebblesdb/c.h	/^typedef struct leveldb_filelock_t      leveldb_filelock_t;$/;"	t	typeref:struct:leveldb_filelock_t
leveldb_filterpolicy_create	db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create($/;"	f
leveldb_filterpolicy_create_bloom	db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int bits_per_key) {$/;"	f
leveldb_filterpolicy_destroy	db/c.cc	/^void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t* filter) {$/;"	f
leveldb_filterpolicy_t	db/c.cc	/^struct leveldb_filterpolicy_t : public FilterPolicy {$/;"	s	file:
leveldb_filterpolicy_t	include/pebblesdb/c.h	/^typedef struct leveldb_filterpolicy_t  leveldb_filterpolicy_t;$/;"	t	typeref:struct:leveldb_filterpolicy_t
leveldb_free	db/c.cc	/^void leveldb_free(void* ptr) {$/;"	f
leveldb_get	db/c.cc	/^char* leveldb_get($/;"	f
leveldb_iter_destroy	db/c.cc	/^void leveldb_iter_destroy(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_get_error	db/c.cc	/^void leveldb_iter_get_error(const leveldb_iterator_t* iter, char** errptr) {$/;"	f
leveldb_iter_key	db/c.cc	/^const char* leveldb_iter_key(const leveldb_iterator_t* iter, size_t* klen) {$/;"	f
leveldb_iter_next	db/c.cc	/^void leveldb_iter_next(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_prev	db/c.cc	/^void leveldb_iter_prev(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek	db/c.cc	/^void leveldb_iter_seek(leveldb_iterator_t* iter, const char* k, size_t klen) {$/;"	f
leveldb_iter_seek_to_first	db/c.cc	/^void leveldb_iter_seek_to_first(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek_to_last	db/c.cc	/^void leveldb_iter_seek_to_last(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_valid	db/c.cc	/^unsigned char leveldb_iter_valid(const leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_value	db/c.cc	/^const char* leveldb_iter_value(const leveldb_iterator_t* iter, size_t* vlen) {$/;"	f
leveldb_iterator_t	db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	s	file:
leveldb_iterator_t	include/pebblesdb/c.h	/^typedef struct leveldb_iterator_t      leveldb_iterator_t;$/;"	t	typeref:struct:leveldb_iterator_t
leveldb_logger_t	db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	s	file:
leveldb_logger_t	include/pebblesdb/c.h	/^typedef struct leveldb_logger_t        leveldb_logger_t;$/;"	t	typeref:struct:leveldb_logger_t
leveldb_major_version	db/c.cc	/^int leveldb_major_version() {$/;"	f
leveldb_minor_version	db/c.cc	/^int leveldb_minor_version() {$/;"	f
leveldb_no_compression	include/pebblesdb/c.h	/^  leveldb_no_compression = 0,$/;"	e	enum:__anon18
leveldb_open	db/c.cc	/^leveldb_t* leveldb_open($/;"	f
leveldb_options_create	db/c.cc	/^leveldb_options_t* leveldb_options_create() {$/;"	f
leveldb_options_destroy	db/c.cc	/^void leveldb_options_destroy(leveldb_options_t* options) {$/;"	f
leveldb_options_set_block_restart_interval	db/c.cc	/^void leveldb_options_set_block_restart_interval(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_block_size	db/c.cc	/^void leveldb_options_set_block_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_set_cache	db/c.cc	/^void leveldb_options_set_cache(leveldb_options_t* opt, leveldb_cache_t* c) {$/;"	f
leveldb_options_set_comparator	db/c.cc	/^void leveldb_options_set_comparator($/;"	f
leveldb_options_set_compression	db/c.cc	/^void leveldb_options_set_compression(leveldb_options_t* opt, int t) {$/;"	f
leveldb_options_set_create_if_missing	db/c.cc	/^void leveldb_options_set_create_if_missing($/;"	f
leveldb_options_set_env	db/c.cc	/^void leveldb_options_set_env(leveldb_options_t* opt, leveldb_env_t* env) {$/;"	f
leveldb_options_set_error_if_exists	db/c.cc	/^void leveldb_options_set_error_if_exists($/;"	f
leveldb_options_set_filter_policy	db/c.cc	/^void leveldb_options_set_filter_policy($/;"	f
leveldb_options_set_info_log	db/c.cc	/^void leveldb_options_set_info_log(leveldb_options_t* opt, leveldb_logger_t* l) {$/;"	f
leveldb_options_set_max_open_files	db/c.cc	/^void leveldb_options_set_max_open_files(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_paranoid_checks	db/c.cc	/^void leveldb_options_set_paranoid_checks($/;"	f
leveldb_options_set_write_buffer_size	db/c.cc	/^void leveldb_options_set_write_buffer_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_t	db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	s	file:
leveldb_options_t	include/pebblesdb/c.h	/^typedef struct leveldb_options_t       leveldb_options_t;$/;"	t	typeref:struct:leveldb_options_t
leveldb_property_value	db/c.cc	/^char* leveldb_property_value($/;"	f
leveldb_put	db/c.cc	/^void leveldb_put($/;"	f
leveldb_randomfile_t	db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	s	file:
leveldb_randomfile_t	include/pebblesdb/c.h	/^typedef struct leveldb_randomfile_t    leveldb_randomfile_t;$/;"	t	typeref:struct:leveldb_randomfile_t
leveldb_readoptions_create	db/c.cc	/^leveldb_readoptions_t* leveldb_readoptions_create() {$/;"	f
leveldb_readoptions_destroy	db/c.cc	/^void leveldb_readoptions_destroy(leveldb_readoptions_t* opt) {$/;"	f
leveldb_readoptions_set_fill_cache	db/c.cc	/^void leveldb_readoptions_set_fill_cache($/;"	f
leveldb_readoptions_set_snapshot	db/c.cc	/^void leveldb_readoptions_set_snapshot($/;"	f
leveldb_readoptions_set_verify_checksums	db/c.cc	/^void leveldb_readoptions_set_verify_checksums($/;"	f
leveldb_readoptions_t	db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	s	file:
leveldb_readoptions_t	include/pebblesdb/c.h	/^typedef struct leveldb_readoptions_t   leveldb_readoptions_t;$/;"	t	typeref:struct:leveldb_readoptions_t
leveldb_release_snapshot	db/c.cc	/^void leveldb_release_snapshot($/;"	f
leveldb_repair_db	db/c.cc	/^void leveldb_repair_db($/;"	f
leveldb_seqfile_t	db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	s	file:
leveldb_seqfile_t	include/pebblesdb/c.h	/^typedef struct leveldb_seqfile_t       leveldb_seqfile_t;$/;"	t	typeref:struct:leveldb_seqfile_t
leveldb_snappy_compression	include/pebblesdb/c.h	/^  leveldb_snappy_compression = 1$/;"	e	enum:__anon18
leveldb_snapshot_t	db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	s	file:
leveldb_snapshot_t	include/pebblesdb/c.h	/^typedef struct leveldb_snapshot_t      leveldb_snapshot_t;$/;"	t	typeref:struct:leveldb_snapshot_t
leveldb_t	db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	s	file:
leveldb_t	include/pebblesdb/c.h	/^typedef struct leveldb_t               leveldb_t;$/;"	t	typeref:struct:leveldb_t
leveldb_verify_DEPENDENCIES	Makefile	/^leveldb_verify_DEPENDENCIES = libpebblesdb.la$/;"	m
leveldb_verify_LDADD	Makefile	/^leveldb_verify_LDADD = libpebblesdb.la -lpthread$/;"	m
leveldb_verify_OBJECTS	Makefile	/^leveldb_verify_OBJECTS = $(am_leveldb_verify_OBJECTS)$/;"	m
leveldb_verify_SOURCES	Makefile	/^leveldb_verify_SOURCES = leveldb-verify.cc$/;"	m
leveldb_writablefile_t	db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	s	file:
leveldb_writablefile_t	include/pebblesdb/c.h	/^typedef struct leveldb_writablefile_t  leveldb_writablefile_t;$/;"	t	typeref:struct:leveldb_writablefile_t
leveldb_write	db/c.cc	/^void leveldb_write($/;"	f
leveldb_writebatch_clear	db/c.cc	/^void leveldb_writebatch_clear(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_create	db/c.cc	/^leveldb_writebatch_t* leveldb_writebatch_create() {$/;"	f
leveldb_writebatch_delete	db/c.cc	/^void leveldb_writebatch_delete($/;"	f
leveldb_writebatch_destroy	db/c.cc	/^void leveldb_writebatch_destroy(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_iterate	db/c.cc	/^void leveldb_writebatch_iterate($/;"	f
leveldb_writebatch_put	db/c.cc	/^void leveldb_writebatch_put($/;"	f
leveldb_writebatch_t	db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	s	file:
leveldb_writebatch_t	include/pebblesdb/c.h	/^typedef struct leveldb_writebatch_t    leveldb_writebatch_t;$/;"	t	typeref:struct:leveldb_writebatch_t
leveldb_writeoptions_create	db/c.cc	/^leveldb_writeoptions_t* leveldb_writeoptions_create() {$/;"	f
leveldb_writeoptions_destroy	db/c.cc	/^void leveldb_writeoptions_destroy(leveldb_writeoptions_t* opt) {$/;"	f
leveldb_writeoptions_set_sync	db/c.cc	/^void leveldb_writeoptions_set_sync($/;"	f
leveldb_writeoptions_t	db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	s	file:
leveldb_writeoptions_t	include/pebblesdb/c.h	/^typedef struct leveldb_writeoptions_t  leveldb_writeoptions_t;$/;"	t	typeref:struct:leveldb_writeoptions_t
leveldbutil_DEPENDENCIES	Makefile	/^leveldbutil_DEPENDENCIES = libpebblesdb.la$/;"	m
leveldbutil_LDADD	Makefile	/^leveldbutil_LDADD = libpebblesdb.la -lpthread -lsnappy$/;"	m
leveldbutil_OBJECTS	Makefile	/^leveldbutil_OBJECTS = $(am_leveldbutil_OBJECTS)$/;"	m
leveldbutil_SOURCES	Makefile	/^leveldbutil_SOURCES = db\/leveldb_main.cc$/;"	m
levels_	db/version_set.cc	/^  LevelState levels_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet::Builder	file:
levels_locked_	db/db_impl.h	/^  bool levels_locked_[leveldb::config::kNumLevels];$/;"	m	class:leveldb::DBImpl
lib_LTLIBRARIES	Makefile	/^lib_LTLIBRARIES = libpebblesdb.la$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libpebblesdb_la_DEPENDENCIES	Makefile	/^libpebblesdb_la_DEPENDENCIES = $(am__DEPENDENCIES_1)$/;"	m
libpebblesdb_la_LDFLAGS	Makefile	/^libpebblesdb_la_LDFLAGS = -lpthread -lsnappy $(AM_LDFLAGS) $(LDFLAGS)$/;"	m
libpebblesdb_la_LIBADD	Makefile	/^libpebblesdb_la_LIBADD = $(SNAPPY_LIBS) -lpthread -lsnappy$/;"	m
libpebblesdb_la_LINK	Makefile	/^libpebblesdb_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libpebblesdb_la_OBJECTS	Makefile	/^libpebblesdb_la_OBJECTS = $(am_libpebblesdb_la_OBJECTS)$/;"	m
libpebblesdb_la_SOURCES	Makefile	/^libpebblesdb_la_SOURCES = db\/builder.cc db\/c.cc db\/dbformat.cc \\$/;"	m
libtool_options_prep	libtool	/^libtool_options_prep ()$/;"	f
libtool_options_prep	ltmain.sh	/^libtool_options_prep ()$/;"	f
libtool_parse_options	libtool	/^libtool_parse_options ()$/;"	f
libtool_parse_options	ltmain.sh	/^libtool_parse_options ()$/;"	f
libtool_validate_options	libtool	/^libtool_validate_options ()$/;"	f
libtool_validate_options	ltmain.sh	/^libtool_validate_options ()$/;"	f
limit	db/version_set.cc	/^  size_t limit;$/;"	m	struct:leveldb::CompactionBoundary	file:
limit	include/pebblesdb/db.h	/^  Slice limit;          \/\/ Not included in the range$/;"	m	struct:leveldb::Range
limiter_	util/env_posix.cc	/^  MmapLimiter* limiter_;$/;"	m	class:leveldb::__anon13::PosixMmapReadableFile	file:
line_	util/testharness.h	/^  int line_;$/;"	m	class:leveldb::test::Tester
linked_	db/db_impl.cc	/^  bool linked_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
list_	db/skiplist.h	/^    const SkipList* list_;$/;"	m	class:leveldb::SkipList::Iterator
list_	db/skiplist_test.cc	/^  SkipList<Key, Comparator, Extractor> list_;$/;"	m	class:leveldb::ConcurrentTest	file:
list_	db/snapshot.h	/^  SnapshotImpl list_;$/;"	m	class:leveldb::SnapshotList
list_	db/snapshot.h	/^  SnapshotList* list_;                 \/\/ just for sanity checks$/;"	m	class:leveldb::SnapshotImpl
list_	util/cache.cc	/^  LRUHandle** list_;$/;"	m	class:leveldb::__anon16::HandleTable	file:
load_32_acquire	util/atomic.h	/^load_32_acquire(volatile const uint32_t* ptr)$/;"	f	namespace:leveldb::atomic
load_32_nobarrier	util/atomic.h	/^load_32_nobarrier(volatile const uint32_t* ptr)$/;"	f	namespace:leveldb::atomic
load_32_release	util/atomic.h	/^load_32_release(volatile const uint32_t* ptr)$/;"	f	namespace:leveldb::atomic
load_64_acquire	util/atomic.h	/^load_64_acquire(volatile const uint64_t* ptr)$/;"	f	namespace:leveldb::atomic
load_64_nobarrier	util/atomic.h	/^load_64_nobarrier(volatile const uint64_t* ptr)$/;"	f	namespace:leveldb::atomic
load_64_release	util/atomic.h	/^load_64_release(volatile const uint64_t* ptr)$/;"	f	namespace:leveldb::atomic
load_ptr_acquire	util/atomic.h	/^load_ptr_acquire(P* volatile const* ptr)$/;"	f	namespace:leveldb::atomic
load_ptr_nobarrier	util/atomic.h	/^load_ptr_nobarrier(P* volatile const* ptr)$/;"	f	namespace:leveldb::atomic
load_ptr_release	util/atomic.h	/^load_ptr_release(P* volatile const* ptr)$/;"	f	namespace:leveldb::atomic
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
locked_files_	util/env_posix.cc	/^  std::set<std::string> locked_files_;$/;"	m	class:leveldb::__anon13::PosixLockTable	file:
locks_	util/env_posix.cc	/^  PosixLockTable locks_;$/;"	m	class:leveldb::__anon13::PosixEnv	file:
log	db/log_format.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/log_reader.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_reader.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/log_test.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_writer.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_writer.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/version_set.h	/^namespace log { class Writer; }$/;"	n	namespace:leveldb
log_	db/db_impl.cc	/^  SHARED_PTR<log::Writer> log_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
log_	db/db_impl.h	/^  SHARED_PTR<log::Writer> log_;$/;"	m	class:leveldb::DBImpl
log_number_	db/version_edit.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionEdit
log_number_	db/version_set.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionSet
log_test_DEPENDENCIES	Makefile	/^log_test_DEPENDENCIES = libpebblesdb.la$/;"	m
log_test_LDADD	Makefile	/^log_test_LDADD = libpebblesdb.la -lpthread$/;"	m
log_test_OBJECTS	Makefile	/^log_test_OBJECTS = $(am_log_test_OBJECTS)$/;"	m
log_test_SOURCES	Makefile	/^log_test_SOURCES = db\/log_test.cc $(TESTHARNESS)$/;"	m
logfile_	db/db_impl.cc	/^  SHARED_PTR<WritableFile> logfile_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
logfile_	db/db_impl.h	/^  SHARED_PTR<WritableFile> logfile_;$/;"	m	class:leveldb::DBImpl
logfile_number_	db/db_impl.h	/^  uint64_t logfile_number_;$/;"	m	class:leveldb::DBImpl
logs_	db/repair.cc	/^  std::vector<uint64_t> logs_;$/;"	m	class:leveldb::__anon27::Repairer	file:
lru_	util/cache.cc	/^  LRUHandle lru_;$/;"	m	class:leveldb::__anon16::LRUCache	file:
m_buf	util/string_builder.h	/^  char* m_buf;$/;"	m	struct:leveldb::StringBuilder
m_cap	util/string_builder.h	/^  size_t m_cap;$/;"	m	struct:leveldb::StringBuilder
m_sz	util/string_builder.h	/^  size_t m_sz;$/;"	m	struct:leveldb::StringBuilder
main	benchmark.cc	/^main(int argc, const char* argv[])$/;"	f
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	db/autocompact_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/c_test.c	/^int main(int argc, char** argv) {$/;"	f
main	db/corruption_test.cc	/^main(int argc, char **argv)$/;"	f
main	db/db_bench.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/db_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/dbformat_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/filename_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/leveldb_main.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/log_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/skiplist_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/version_edit_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/version_set_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/write_batch_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	demo/installation_test.cc	/^int main(){$/;"	f
main	doc/bench/db_bench_sqlite3.cc	/^int main(int argc, char** argv) {$/;"	f
main	doc/bench/db_bench_tree_db.cc	/^int main(int argc, char** argv) {$/;"	f
main	helpers/memenv/memenv_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	issues/issue178_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	issues/issue200_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb-dump-all.cc	/^main(int argc, const char* argv[])$/;"	f
main	leveldb-verify.cc	/^int main(int argc, char** argv) {$/;"	f
main	table/filter_block_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	table/table_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/arena_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/bloom_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/cache_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/coding_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/crc32c_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/env_test.cc	/^int main(int argc, char** argv) {$/;"	f
make_dummy_depfile	depcomp	/^make_dummy_depfile ()$/;"	f
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
manifest_file_number_	db/version_set.h	/^  uint64_t manifest_file_number_;$/;"	m	class:leveldb::VersionSet
manifest_sync_error_	db/db_test.cc	/^  port::AtomicPointer manifest_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifest_write_error_	db/db_test.cc	/^  port::AtomicPointer manifest_write_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifests_	db/repair.cc	/^  std::vector<std::string> manifests_;$/;"	m	class:leveldb::__anon27::Repairer	file:
manual_compaction_	db/db_impl.h	/^  ManualCompaction* manual_compaction_;$/;"	m	class:leveldb::DBImpl
manual_garbage_collection	include/pebblesdb/options.h	/^  bool manual_garbage_collection;$/;"	m	struct:leveldb::Options
manual_garbage_cutoff_	db/db_impl.h	/^  SequenceNumber manual_garbage_cutoff_;$/;"	m	class:leveldb::DBImpl
map_	db/db_test.cc	/^    KVMap map_;$/;"	m	class:leveldb::ModelDB::ModelSnapshot	file:
map_	db/db_test.cc	/^    const KVMap* const map_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
map_	db/db_test.cc	/^  KVMap map_;$/;"	m	class:leveldb::ModelDB	file:
max_	util/histogram.h	/^  double max_;$/;"	m	class:leveldb::Histogram
max_open_files	include/pebblesdb/options.h	/^  int max_open_files;$/;"	m	struct:leveldb::Options
max_ops_	db/db_bench.cc	/^  int64_t max_ops_;$/;"	m	class:leveldb::Benchmark::Duration	file:
max_output_file_size_	db/version_set.h	/^  uint64_t max_output_file_size_;$/;"	m	class:leveldb::Compaction
max_seconds_	db/db_bench.cc	/^  uint64_t max_seconds_;$/;"	m	class:leveldb::Benchmark::Duration	file:
max_sequence	db/repair.cc	/^    SequenceNumber max_sequence;$/;"	m	struct:leveldb::__anon27::Repairer::TableInfo	file:
mean_read_count	db/version_set.h	/^  double mean_read_count;$/;"	m	class:leveldb::Version
mem	db/db_impl.cc	/^  MemTable* mem;$/;"	m	struct:leveldb::__anon21::IterState	file:
mem_	db/db_impl.cc	/^  MemTable* mem_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
mem_	db/db_impl.h	/^  MemTable* mem_;$/;"	m	class:leveldb::DBImpl
mem_	db/replay_iterator.h	/^  MemTable* mem_;$/;"	m	struct:leveldb::ReplayState
mem_	db/write_batch.cc	/^  MemTable* mem_;$/;"	m	class:leveldb::__anon29::MemTableInserter	file:
memory_barrier	util/atomic.h	/^memory_barrier()$/;"	f	namespace:leveldb::atomic
memory_usage_	util/arena.h	/^  uint64_t memory_usage_;$/;"	m	class:leveldb::Arena
mems_	db/replay_iterator.h	/^  std::list<ReplayState> mems_;$/;"	m	class:leveldb::ReplayIteratorImpl
memtable_	table/table_test.cc	/^  MemTable* memtable_;$/;"	m	class:leveldb::MemTableConstructor	file:
memtable_key	db/dbformat.h	/^  Slice memtable_key() const { return Slice(start_, end_ - start_); }$/;"	f	class:leveldb::LookupKey
message	util/timer.h	/^	std::string message[200];$/;"	m	class:leveldb::Timer
message_	db/db_bench.cc	/^  std::string message_;$/;"	m	class:leveldb::__anon19::Stats	file:
message_	db/log_test.cc	/^    std::string message_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
message_	doc/bench/db_bench_sqlite3.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
message_	doc/bench/db_bench_tree_db.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
meta	db/repair.cc	/^    FileMetaData meta;$/;"	m	struct:leveldb::__anon27::Repairer::TableInfo	file:
metaindex_handle	table/format.h	/^  const BlockHandle& metaindex_handle() const { return metaindex_handle_; }$/;"	f	class:leveldb::Footer
metaindex_handle	table/table.cc	/^  BlockHandle metaindex_handle;  \/\/ Handle to metaindex_block: saved from footer$/;"	m	struct:leveldb::Table::Rep	file:
metaindex_handle_	table/format.h	/^  BlockHandle metaindex_handle_;$/;"	m	class:leveldb::Footer
method	db/db_bench.cc	/^    void (Benchmark::*method)(ThreadState*);$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
mi_	table/merger.cc	/^  MergingIterator* mi_;$/;"	m	struct:leveldb::__anon5::HeapComparator	file:
micros	db/db_bench.cc	44;"	d	file:
micros	db/db_bench.cc	47;"	d	file:
micros	db/db_impl.h	/^    int64_t micros;$/;"	m	struct:leveldb::DBImpl::CompactionStats
micros	db/db_test.cc	/^uint64_t micros() {$/;"	f	namespace:leveldb
micros_	db/db_impl.cc	/^  uint64_t micros_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
micros_array	util/timer.h	/^	uint64_t micros_array[200];$/;"	m	class:leveldb::Timer
min_	util/histogram.h	/^  double min_;$/;"	m	class:leveldb::Histogram
min_output_file_size_	db/version_set.h	/^  uint64_t min_output_file_size_;$/;"	m	class:leveldb::Compaction
mixgraph_rand	db/db_bench.cc	/^  Random64 mixgraph_rand;$/;"	m	struct:leveldb::__anon19::ThreadState	file:
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mmap_limit_	util/env_posix.cc	/^  MmapLimiter mmap_limit_;$/;"	m	class:leveldb::__anon13::PosixEnv	file:
mmapped_region_	util/env_posix.cc	/^  void* mmapped_region_;$/;"	m	class:leveldb::__anon13::PosixMmapReadableFile	file:
mtx_	util/env_posix.cc	/^  port::Mutex mtx_;         \/\/ Protection for state$/;"	m	class:leveldb::__anon13::PosixMmapFile	file:
mu	db/db_bench.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::__anon19::SharedState	file:
mu	db/db_impl.cc	/^  port::Mutex* mu;$/;"	m	struct:leveldb::__anon21::IterState	file:
mu	util/env_test.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::State	file:
mu_	db/db_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon22::AtomicCounter	file:
mu_	db/skiplist_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::TestState	file:
mu_	port/port_posix.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	port/port_posix.h	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::port::Mutex
mu_	util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon13::MmapLimiter	file:
mu_	util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon13::PosixLockTable	file:
mu_	util/env_posix.cc	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::__anon13::PosixEnv	file:
mu_	util/env_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::EnvPosixTest	file:
mu_	util/mutexlock.h	/^  port::Mutex *const mu_;$/;"	m	class:leveldb::MutexLock::port
mutex_	db/db_impl.h	/^  port::Mutex mutex_;$/;"	m	class:leveldb::DBImpl
mutex_	db/replay_iterator.h	/^  port::Mutex* mutex_;$/;"	m	class:leveldb::ReplayIteratorImpl
mutex_	helpers/memenv/memenv.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon9::InMemoryEnv	file:
mutex_	util/cache.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon16::LRUCache	file:
n_	table/merger.cc	/^  int n_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
name	util/testharness.cc	/^  const char* name;$/;"	m	struct:leveldb::test::__anon12::Test	file:
name_	db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
name_	db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
name_	util/env_posix.cc	/^  std::string name_;$/;"	m	class:leveldb::__anon13::PosixFileLock	file:
new_batch	db/write_batch.cc	/^   WriteBatch* new_batch;$/;"	m	class:leveldb::__anon29::GuardInserter	file:
new_complete_guards_	db/version_edit.h	/^  std::vector<GuardMetaData> new_complete_guards_[config::kNumLevels];$/;"	m	class:leveldb::VersionEdit
new_files_	db/version_edit.h	/^  std::vector< std::pair<int, FileMetaData> > new_files_;$/;"	m	class:leveldb::VersionEdit
new_guards_	db/version_edit.h	/^  std::vector<GuardMetaData> new_guards_[config::kNumLevels];$/;"	m	class:leveldb::VersionEdit
newest	db/snapshot.h	/^  SnapshotImpl* newest() const { assert(!empty()); return list_.prev_; }$/;"	f	class:leveldb::SnapshotList
next	db/skiplist.h	/^    Node* next;$/;"	m	struct:leveldb::SkipList::Node::PointerHintPair
next	include/pebblesdb/iterator.h	/^    Cleanup* next;$/;"	m	struct:leveldb::Iterator::Cleanup
next	util/arena.cc	/^  Block* next;$/;"	m	struct:leveldb::Arena::Block	file:
next	util/cache.cc	/^  LRUHandle* next;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
next_	db/db_impl.cc	/^  Writer* next_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
next_	db/snapshot.h	/^  SnapshotImpl* next_;$/;"	m	class:leveldb::SnapshotImpl
next_	db/version_set.h	/^  Version* next_;               \/\/ Next version in linked list$/;"	m	class:leveldb::Version
next_file_number_	db/repair.cc	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::__anon27::Repairer	file:
next_file_number_	db/version_edit.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionEdit
next_file_number_	db/version_set.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionSet
next_hash	util/cache.cc	/^  LRUHandle* next_hash;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
next_lower	util/arena.cc	/^  char* next_lower;$/;"	m	struct:leveldb::Arena::Block	file:
next_report_	db/db_bench.cc	/^  int next_report_;$/;"	m	class:leveldb::__anon19::Stats	file:
next_report_	doc/bench/db_bench_sqlite3.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
next_report_	doc/bench/db_bench_tree_db.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
next_upper	util/arena.cc	/^  char* next_upper;$/;"	m	struct:leveldb::Arena::Block	file:
no_space_	db/db_test.cc	/^  port::AtomicPointer no_space_;$/;"	m	class:leveldb::SpecialEnv	file:
node_	db/skiplist.h	/^    Node* node_;$/;"	m	class:leveldb::SkipList::Iterator
noinst_HEADERS	Makefile	/^noinst_HEADERS = db\/builder.h db\/dbformat.h db\/db_impl.h \\$/;"	m
noinst_PROGRAMS	Makefile	/^noinst_PROGRAMS = db_bench$(EXEEXT) leveldbutil$(EXEEXT) \\$/;"	m
non_writable_	db/db_test.cc	/^  port::AtomicPointer non_writable_;$/;"	m	class:leveldb::SpecialEnv	file:
num_	db/db_bench.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	doc/bench/db_bench_sqlite3.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	doc/bench/db_bench_tree_db.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	table/filter_block.h	/^  size_t num_;          \/\/ Number of entries in offset array$/;"	m	class:leveldb::FilterBlockReader
num_	util/histogram.h	/^  double num_;$/;"	m	class:leveldb::Histogram
num_bg_compaction_threads_	db/db_impl.h	/^  int num_bg_compaction_threads_;$/;"	m	class:leveldb::DBImpl
num_bg_threads_	db/db_impl.h	/^  int num_bg_threads_;$/;"	m	class:leveldb::DBImpl
num_complete_guards_	db/version_set.h	/^  int num_complete_guards_[config::kNumLevels];$/;"	m	class:leveldb::Version
num_done	db/db_bench.cc	/^  int num_done;$/;"	m	struct:leveldb::__anon19::SharedState	file:
num_entries	db/db_impl.cc	/^    uint64_t num_entries;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
num_entries	db/memtable.h	/^  int num_entries;$/;"	m	class:leveldb::MemTable
num_entries	db/version_edit.h	/^  uint64_t num_entries;  $/;"	m	struct:leveldb::FileMetaData
num_entries	table/table_builder.cc	/^  int64_t num_entries;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
num_guards	db/write_batch.cc	/^   int num_guards[config::kNumLevels];$/;"	m	class:leveldb::__anon29::GuardInserter	file:
num_initialized	db/db_bench.cc	/^  int num_initialized;$/;"	m	struct:leveldb::__anon19::SharedState	file:
num_input_files	db/version_set.h	/^  size_t num_input_files(int which) const { return inputs_[which].size(); }$/;"	f	class:leveldb::Compaction
num_restarts_	table/block.cc	/^  uint32_t const num_restarts_; \/\/ Number of uint32_t entries in restart array$/;"	m	class:leveldb::Block::Iter	file:
num_running	util/env_test.cc	/^  int num_running;$/;"	m	struct:leveldb::State	file:
num_seek_threads_	db/version_set.h	/^  int num_seek_threads_;$/;"	m	class:leveldb::VersionSet
num_writable_file_errors_	util/testutil.h	/^  int num_writable_file_errors_;$/;"	m	class:leveldb::test::ErrorEnv
number	db/db_impl.cc	/^    uint64_t number;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
number	db/version_edit.h	/^  uint64_t number;$/;"	m	struct:leveldb::FileMetaData
number_	db/snapshot.h	/^  SequenceNumber number_;  \/\/ const after creation$/;"	m	class:leveldb::SnapshotImpl
number_	db/version_set.cc	/^  uint64_t number_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
number_	db/version_set.cc	/^  uint64_t number_;$/;"	m	class:leveldb::Version::LevelGuardNumIterator	file:
number_segments	db/version_edit.h	/^  uint64_t number_segments;$/;"	m	struct:leveldb::GuardMetaData
offset	table/format.h	/^  uint64_t offset() const { return offset_; }$/;"	f	class:leveldb::BlockHandle
offset	table/table_builder.cc	/^  uint64_t offset;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
offset_	db/leveldb_main.cc	/^  uint64_t offset_;$/;"	m	class:leveldb::__anon30::WriteBatchItemPrinter	file:
offset_	db/log_writer.h	/^  uint64_t offset_; \/\/ Current offset in file$/;"	m	class:leveldb::log::Writer
offset_	leveldb-verify.cc	/^  uint64_t offset_;$/;"	m	class:leveldb::__anon31::WriteBatchItemPrinter	file:
offset_	table/filter_block.h	/^  const char* offset_;  \/\/ Pointer to beginning of offset array (at block-end)$/;"	m	class:leveldb::FilterBlockReader
offset_	table/format.h	/^  uint64_t offset_;$/;"	m	class:leveldb::BlockHandle
ok	include/pebblesdb/status.h	/^  bool ok() const { return (state_ == NULL); }$/;"	f	class:leveldb::Status
ok	include/pebblesdb/table_builder.h	/^  bool ok() const { return status().ok(); }$/;"	f	class:leveldb::TableBuilder
ok_	util/testharness.h	/^  bool ok_;$/;"	m	class:leveldb::test::Tester
oldest	db/snapshot.h	/^  SnapshotImpl* oldest() const { assert(!empty()); return list_.next_; }$/;"	f	class:leveldb::SnapshotList
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
once	util/comparator.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	util/env_posix.cc	/^static pthread_once_t once = PTHREAD_ONCE_INIT;$/;"	m	namespace:leveldb	file:
operator !=	include/pebblesdb/slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator ()	db/memtable.cc	/^int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)$/;"	f	class:leveldb::MemTable::KeyComparator
operator ()	db/memtable.cc	/^uint64_t MemTable::KeyExtractor::operator()(const char* k)$/;"	f	class:leveldb::MemTable::KeyExtractor
operator ()	db/skiplist_test.cc	/^  int operator()(const Key& a, const Key& b) const {$/;"	f	struct:leveldb::Comparator
operator ()	db/skiplist_test.cc	/^  uint64_t operator()(const Key& k) const {$/;"	f	struct:leveldb::Extractor
operator ()	db/version_edit.h	/^    bool operator()(GuardPair p1, GuardPair p2) const {$/;"	f	struct:leveldb::VersionEdit::BySmallestPair
operator ()	db/version_set.cc	/^    bool operator()(FileMetaData* f1, FileMetaData* f2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestKey
operator ()	db/version_set.cc	/^    bool operator()(GuardMetaData* g1, GuardMetaData *g2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestGuard
operator ()	db/version_set.cc	/^    bool operator()(InternalKey k1, InternalKey k2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestInternalKey
operator ()	db/version_set.cc	/^  bool operator () (const FileMetaData* lhs, const FileMetaData* rhs) {$/;"	f	struct:leveldb::CmpByRange
operator ()	db/version_set.cc	/^  bool operator()(GuardMetaData* g1, GuardMetaData *g2) const {$/;"	f	struct:leveldb::BySmallestGuard
operator ()	db/version_set.cc	/^  bool operator()(GuardMetaData* g1, GuardMetaData *g2) const {$/;"	f	struct:leveldb::SortBySmallestGuard
operator ()	table/merger.cc	/^bool HeapComparator::operator ()(unsigned lhs, unsigned rhs) const {$/;"	f	class:leveldb::__anon5::HeapComparator
operator ()	table/table_test.cc	/^  bool operator()(const std::string& a, const std::string& b) const {$/;"	f	struct:leveldb::__anon7::STLLessThan
operator <<	util/testharness.h	/^  Tester& operator<<(const V& value) {$/;"	f	class:leveldb::test::Tester
operator =	db/dbformat.h	/^  InternalKey& operator = (const InternalKey& rhs)$/;"	f	class:leveldb::InternalKey
operator =	db/dbformat.h	/^  InternalKeyComparator& operator = (const InternalKeyComparator& rhs)$/;"	f	class:leveldb::InternalKeyComparator
operator =	include/pebblesdb/status.h	/^inline Status& Status::operator=(const Status& s) {$/;"	f	class:leveldb::Status
operator ==	include/pebblesdb/slice.h	/^inline bool operator==(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator []	include/pebblesdb/slice.h	/^  char operator[](size_t n) const {$/;"	f	class:leveldb::Slice
ops_	db/db_bench.cc	/^  int64_t ops_;$/;"	m	class:leveldb::Benchmark::Duration	file:
ops_per_stage_	db/db_bench.cc	/^  int64_t ops_per_stage_;$/;"	m	class:leveldb::Benchmark::Duration	file:
option_config_	db/db_test.cc	/^  int option_config_;$/;"	m	class:leveldb::DBTest	file:
options	table/table.cc	/^  Options options;$/;"	m	struct:leveldb::Table::Rep	file:
options	table/table_builder.cc	/^  Options options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
options_	db/autocompact_test.cc	/^  Options options_;$/;"	m	class:leveldb::AutoCompactTest	file:
options_	db/corruption_test.cc	/^    Options options_;$/;"	m	class:leveldb::CorruptionTest	file:
options_	db/db_impl.h	/^  const Options options_;  \/\/ options_.comparator == &internal_comparator_$/;"	m	class:leveldb::DBImpl
options_	db/db_test.cc	/^  const Options options_;$/;"	m	class:leveldb::ModelDB	file:
options_	db/repair.cc	/^  Options const options_;$/;"	m	class:leveldb::__anon27::Repairer	file:
options_	db/table_cache.h	/^  const Options* options_;$/;"	m	class:leveldb::TableCache
options_	db/version_set.h	/^  const Options* const options_;$/;"	m	class:leveldb::VersionSet
options_	table/block_builder.h	/^  const Options*        options_;$/;"	m	class:leveldb::BlockBuilder
options_	table/table_test.cc	/^  Options options_;$/;"	m	class:leveldb::Harness	file:
options_	table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon4::TwoLevelIterator	file:
options_	table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
or_32_nobarrier	util/atomic.h	/^or_32_nobarrier(volatile uint32_t* ptr, uint32_t orwith)$/;"	f	namespace:leveldb::atomic
or_64_nobarrier	util/atomic.h	/^or_64_nobarrier(volatile uint64_t* ptr, uint64_t orwith)$/;"	f	namespace:leveldb::atomic
outfile	db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
outputs	db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
owned_	db/db_test.cc	/^    const bool owned_;  \/\/ Do we own map_$/;"	m	class:leveldb::ModelDB::ModelIter	file:
owned_	table/block.h	/^  bool owned_;                  \/\/ Block owns data_[]$/;"	m	class:leveldb::Block
owns_cache_	db/db_impl.h	/^  bool owns_cache_;$/;"	m	class:leveldb::DBImpl
owns_cache_	db/repair.cc	/^  bool owns_cache_;$/;"	m	class:leveldb::__anon27::Repairer	file:
owns_info_log_	db/db_impl.h	/^  bool owns_info_log_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	db/repair.cc	/^  bool owns_info_log_;$/;"	m	class:leveldb::__anon27::Repairer	file:
page_size_	util/arena.h	/^  const size_t page_size_;$/;"	m	class:leveldb::Arena
page_size_	util/env_posix.cc	/^  size_t page_size_;$/;"	m	class:leveldb::__anon13::PosixEnv	file:
param	db/db_bench.cc	/^  	unsigned long param;$/;"	m	struct:leveldb::Benchmark::trace_operation_t	file:
paranoid_checks	include/pebblesdb/options.h	/^  bool paranoid_checks;$/;"	m	struct:leveldb::Options
parse_trace	db/db_bench.cc	/^  void parse_trace(const char *file, int tid) {$/;"	f	class:leveldb::Benchmark
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pending_handle	table/table_builder.cc	/^  BlockHandle pending_handle;  \/\/ Handle to add to index block$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_index_entry	table/table_builder.cc	/^  bool pending_index_entry;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_outputs_	db/db_impl.h	/^  std::set<uint64_t> pending_outputs_;$/;"	m	class:leveldb::DBImpl
perform_op	db/db_bench.cc	/^  Status perform_op(DB *db, struct trace_operation_t *op, int tid) {$/;"	f	class:leveldb::Benchmark
phase	db/c_test.c	/^const char* phase = "";$/;"	v
pkgconfig_DATA	Makefile	/^pkgconfig_DATA = libpebblesdb.pc$/;"	m
pkgconfigdir	Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/pebblesdb$/;"	m
pkginclude_HEADERS	Makefile	/^pkginclude_HEADERS = include\/pebblesdb\/cache.h include\/pebblesdb\/c.h \\$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/pebblesdb$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/pebblesdb$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/pebblesdb$/;"	m
policy_	table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FileLevelFilterBuilder
policy_	table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockBuilder
policy_	table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockReader
policy_	table/filter_block_test.cc	/^  TestHashFilter policy_;$/;"	m	class:leveldb::FilterBlockTest	file:
policy_	util/bloom_test.cc	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::BloomTest	file:
port	port/atomic_pointer.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/port_posix.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	port/port_posix.h	/^namespace port {$/;"	n	namespace:leveldb
pos_	db/db_bench.cc	/^  int pos_;$/;"	m	class:leveldb::__anon19::RandomGenerator	file:
pos_	doc/bench/db_bench_sqlite3.cc	/^  int pos_;$/;"	m	class:leveldb::__anon33::RandomGenerator	file:
pos_	doc/bench/db_bench_tree_db.cc	/^  int pos_;$/;"	m	class:leveldb::__anon32::RandomGenerator	file:
pos_	helpers/memenv/memenv.cc	/^  size_t pos_;$/;"	m	class:leveldb::__anon9::SequentialFileImpl	file:
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prefix_size_	db/db_bench.cc	/^  int prefix_size_;$/;"	m	class:leveldb::Benchmark	file:
prev	util/cache.cc	/^  LRUHandle* prev;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
prev_	db/db_impl.cc	/^  Writer* prev_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
prev_	db/snapshot.h	/^  SnapshotImpl* prev_;$/;"	m	class:leveldb::SnapshotImpl
prev_	db/version_set.h	/^  Version* prev_;               \/\/ Previous version in linked list$/;"	m	class:leveldb::Version
prev_log_number_	db/version_edit.h	/^  uint64_t prev_log_number_;$/;"	m	class:leveldb::VersionEdit
prev_log_number_	db/version_set.h	/^  uint64_t prev_log_number_;  \/\/ 0 or backing store for memtable being compacted$/;"	m	class:leveldb::VersionSet
print_all_levels	db/write_batch.cc	/^  void print_all_levels() {$/;"	f	class:leveldb::__anon29::GuardInserter
print_current_db_contents	db/db_bench.cc	/^  void print_current_db_contents() {$/;"	f	class:leveldb::Benchmark
print_current_db_contents	db/db_test.cc	/^  void print_current_db_contents() {$/;"	f	class:leveldb::DBTest
print_divider	db/db_test.cc	/^void print_divider() {$/;"	f	namespace:leveldb
print_file_counts	db/db_test.cc	/^  void print_file_counts() {$/;"	f	class:leveldb::DBTest
print_splitup	db/db_bench.cc	/^  unsigned long long print_splitup(int tid) {$/;"	f	class:leveldb::Benchmark
print_timer_info	db/db_bench.cc	45;"	d	file:
print_timer_info	db/db_bench.cc	48;"	d	file:
print_timer_info	db/db_test.cc	/^void print_timer_info(std::string msg, uint64_t a, uint64_t b) {$/;"	f	namespace:leveldb
program_details	missing	/^program_details ()$/;"	f
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
psdir	Makefile	/^psdir = ${docdir}$/;"	m
ptrs_	db/skiplist.h	/^  PointerHintPair ptrs_[1];$/;"	m	struct:leveldb::SkipList::Node
queue_	util/env_posix.cc	/^  BGQueue queue_;$/;"	m	class:leveldb::__anon13::PosixEnv	file:
quit_flag_	db/skiplist_test.cc	/^  port::AtomicPointer quit_flag_;$/;"	m	class:leveldb::TestState	file:
rand	db/db_bench.cc	/^  Random rand;         \/\/ Has different seeds for different threads$/;"	m	struct:leveldb::__anon19::ThreadState	file:
rand_	doc/bench/db_bench_sqlite3.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
rand_	doc/bench/db_bench_tree_db.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
random_read_counter_	db/db_test.cc	/^  AtomicCounter random_read_counter_;$/;"	m	class:leveldb::SpecialEnv	file:
range_	db/db_bench.cc	/^    int range_;$/;"	m	class:leveldb::Benchmark::QueryDecider	file:
ratio_	db/db_bench.cc	/^    std::vector<double> ratio_;$/;"	m	class:leveldb::Benchmark::QueryDecider	file:
read_count	db/version_edit.h	/^  uint64_t read_count;$/;"	m	struct:leveldb::GuardMetaData
read_current_time	db/version_set.h	/^  uint64_t read_current_time;$/;"	m	class:leveldb::Version
read_last_accessed_time	db/version_edit.h	/^  uint64_t read_last_accessed_time;$/;"	m	struct:leveldb::GuardMetaData
read_lifetime	db/dbformat.h	/^static const unsigned read_lifetime = 30000;$/;"	m	namespace:leveldb::config
read_random_exp_range_	db/db_bench.cc	/^  double read_random_exp_range_;$/;"	m	class:leveldb::Benchmark	file:
reader_	db/log_test.cc	/^  Reader reader_;$/;"	m	class:leveldb::log::LogTest	file:
reading_	db/log_test.cc	/^  bool reading_;$/;"	m	class:leveldb::log::LogTest	file:
reads_	db/db_bench.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	doc/bench/db_bench_sqlite3.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	doc/bench/db_bench_tree_db.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
record_timer	db/db_impl.cc	45;"	d	file:
record_timer	db/db_impl.cc	48;"	d	file:
record_timer	db/table_cache.cc	14;"	d	file:
record_timer	db/table_cache.cc	17;"	d	file:
record_timer	db/version_set.cc	42;"	d	file:
record_timer	db/version_set.cc	48;"	d	file:
record_timer	table/merger.cc	18;"	d	file:
record_timer	table/merger.cc	25;"	d	file:
record_timer	table/table.cc	22;"	d	file:
record_timer	table/table.cc	25;"	d	file:
record_timer_simple	db/db_impl.cc	53;"	d	file:
record_timer_simple	db/db_impl.cc	56;"	d	file:
refs	db/version_edit.h	/^  int refs;$/;"	m	struct:leveldb::FileMetaData
refs	db/version_edit.h	/^  int refs;$/;"	m	struct:leveldb::GuardMetaData
refs	util/cache.cc	/^  uint32_t refs;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
refs_	db/memtable.h	/^  uint64_t refs_;$/;"	m	class:leveldb::MemTable
refs_	db/version_set.h	/^  int refs_;                    \/\/ Number of live refs to this version$/;"	m	class:leveldb::Version
refs_	helpers/memenv/memenv.cc	/^  int refs_;  \/\/ Protected by refs_mutex_;$/;"	m	class:leveldb::__anon9::FileState	file:
refs_mutex_	helpers/memenv/memenv.cc	/^  port::Mutex refs_mutex_;$/;"	m	class:leveldb::__anon9::FileState	file:
rem	util/arena.cc	/^  uint32_t rem;$/;"	m	struct:leveldb::Arena::Block	file:
remove_prefix	include/pebblesdb/slice.h	/^  void remove_prefix(size_t n) {$/;"	f	class:leveldb::Slice
rep	db/c.cc	/^  Env* rep;$/;"	m	struct:leveldb_env_t	file:
rep	db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	m	struct:leveldb_cache_t	file:
rep	db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	m	struct:leveldb_filelock_t	file:
rep	db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	m	struct:leveldb_iterator_t	file:
rep	db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	m	struct:leveldb_logger_t	file:
rep	db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	m	struct:leveldb_options_t	file:
rep	db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	m	struct:leveldb_randomfile_t	file:
rep	db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	m	struct:leveldb_readoptions_t	file:
rep	db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	m	struct:leveldb_seqfile_t	file:
rep	db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	m	struct:leveldb_snapshot_t	file:
rep	db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	m	struct:leveldb_t	file:
rep	db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	m	struct:leveldb_writablefile_t	file:
rep	db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	m	struct:leveldb_writebatch_t	file:
rep	db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	m	struct:leveldb_writeoptions_t	file:
rep_	db/dbformat.h	/^  std::string rep_;$/;"	m	class:leveldb::InternalKey
rep_	include/pebblesdb/cache.h	/^  Rep* rep_;$/;"	m	class:leveldb::Cache
rep_	include/pebblesdb/table.h	/^  Rep* rep_;$/;"	m	class:leveldb::Table
rep_	include/pebblesdb/table_builder.h	/^  Rep* rep_;$/;"	m	class:leveldb::TableBuilder
rep_	include/pebblesdb/write_batch.h	/^  std::string rep_;  \/\/ See comment in write_batch.cc for the format of rep_$/;"	m	class:leveldb::WriteBatch
rep_	port/atomic_pointer.h	/^  void* rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	port/port_example.h	/^  intptr_t rep_;$/;"	m	class:leveldb::port::AtomicPointer
replay_iters_	db/db_impl.h	/^  std::list<ReplayIteratorImpl*> replay_iters_;$/;"	m	class:leveldb::DBImpl
report_	db/log_test.cc	/^  ReportCollector report_;$/;"	m	class:leveldb::log::LogTest	file:
reporter_	db/log_reader.h	/^  Reporter* const reporter_;$/;"	m	class:leveldb::log::Reader
restart_index_	table/block.cc	/^  uint32_t restart_index_;  \/\/ Index of restart block in which current_ falls$/;"	m	class:leveldb::Block::Iter	file:
restart_interval	table/table_test.cc	/^  int restart_interval;$/;"	m	struct:leveldb::TestArgs	file:
restart_offset_	table/block.h	/^  uint32_t restart_offset_;     \/\/ Offset in data_ of restart array$/;"	m	class:leveldb::Block
restarts_	table/block.cc	/^  uint32_t const restarts_;     \/\/ Offset of restart array (list of fixed32)$/;"	m	class:leveldb::Block::Iter	file:
restarts_	table/block_builder.h	/^  std::vector<uint32_t> restarts_;    \/\/ Restart points$/;"	m	class:leveldb::BlockBuilder
result_	table/filter_block.h	/^  std::string result_;            \/\/ Filter data computed so far$/;"	m	class:leveldb::FilterBlockBuilder
result_t	db/db_bench.cc	/^  struct result_t {$/;"	s	class:leveldb::Benchmark	file:
results	db/db_bench.cc	/^  struct result_t results[10];$/;"	m	class:leveldb::Benchmark	typeref:struct:leveldb::Benchmark::result_t	file:
returned_partial_	db/log_test.cc	/^    bool returned_partial_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
reverse_compare	table/table_test.cc	/^  bool reverse_compare;$/;"	m	struct:leveldb::TestArgs	file:
reverse_key_comparator	table/table_test.cc	/^static ReverseKeyComparator reverse_key_comparator;$/;"	m	namespace:leveldb	file:
rnd_	db/db_iter.cc	/^  Random rnd_;$/;"	m	class:leveldb::__anon20::DBIter	file:
rnd_	db/skiplist.h	/^  Random rnd_;$/;"	m	class:leveldb::SkipList
rnd_mutex_	db/skiplist.h	/^  port::Mutex rnd_mutex_;$/;"	m	class:leveldb::SkipList
rotl32	db/murmurhash3.cc	/^inline uint32_t rotl32 ( uint32_t x, int8_t r )$/;"	f
rotl64	db/murmurhash3.cc	/^inline uint64_t rotl64 ( uint64_t x, int8_t r )$/;"	f
rs_	db/replay_iterator.h	/^  ReplayState rs_;$/;"	m	class:leveldb::ReplayIteratorImpl
runstatedir	Makefile	/^runstatedir = ${localstatedir}\/run$/;"	m
sassert	db/db_bench.cc	41;"	d	file:
saved_key_	db/db_iter.cc	/^  std::string saved_key_;     \/\/ == current key when direction_==kReverse$/;"	m	class:leveldb::__anon20::DBIter	file:
saved_value_	db/db_iter.cc	/^  std::string saved_value_;   \/\/ == current raw value when direction_==kReverse$/;"	m	class:leveldb::__anon20::DBIter	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
seconds_	db/db_bench.cc	/^  double seconds_;$/;"	m	class:leveldb::__anon19::Stats	file:
seed_	db/db_impl.h	/^  uint32_t seed_;                \/\/ For sampling.$/;"	m	class:leveldb::DBImpl
seed_	db/skiplist_test.cc	/^  int seed_;$/;"	m	class:leveldb::TestState	file:
seed_	util/random.h	/^  uint32_t seed_;$/;"	m	class:leveldb::Random
seek_assigned_group_id_	db/version_set.h	/^  int seek_assigned_group_id_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_file	db/version_set.h	/^    FileMetaData* seek_file;$/;"	m	struct:leveldb::Version::GetStats
seek_file_level	db/version_set.h	/^    int seek_file_level;$/;"	m	struct:leveldb::Version::GetStats
seek_group_num_pending_	db/version_set.h	/^  int seek_group_num_pending_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_group_occupied_	db/version_set.h	/^  int seek_group_occupied_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_group_return_status_	db/version_set.h	/^  SeekReturnStatus seek_group_return_status_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_group_threads_cv_	db/version_set.h	/^  port::CondVar seek_group_threads_cv_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_group_threads_mutex_	db/version_set.h	/^  port::Mutex seek_group_threads_mutex_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_mutex_	db/version_set.h	/^  port::Mutex seek_mutex_;$/;"	m	class:leveldb::VersionSet
seek_pthread_index_map_	db/version_set.h	/^  std::map<pthread_t, int> seek_pthread_index_map_;$/;"	m	class:leveldb::VersionSet
seek_thread_status_	db/version_set.h	/^  ThreadStatus seek_thread_status_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_thread_timers_	db/version_set.h	/^  Timer* seek_thread_timers_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_threads_current_workload	db/version_set.h	/^  pthread_t seek_threads_current_workload[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_threads_cv_	db/version_set.h	/^  port::CondVar seek_threads_cv_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_threads_mutex_	db/version_set.h	/^  port::Mutex seek_threads_mutex_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_assigned_group_id_	db/version_set.h	/^  int seek_titerator_assigned_group_id_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_file_numbers_	db/version_set.h	/^  uint64_t seek_titerator_file_numbers_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_file_sizes_	db/version_set.h	/^  uint64_t seek_titerator_file_sizes_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_group_num_pending_	db/version_set.h	/^  int seek_titerator_group_num_pending_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_group_occupied_	db/version_set.h	/^  int seek_titerator_group_occupied_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_group_return_status_	db/version_set.h	/^  SeekReturnStatus seek_titerator_group_return_status_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_group_threads_cv_	db/version_set.h	/^  port::CondVar seek_titerator_group_threads_cv_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_group_threads_mutex_	db/version_set.h	/^  port::Mutex seek_titerator_group_threads_mutex_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_mutex_	db/version_set.h	/^  port::Mutex seek_titerator_mutex_;$/;"	m	class:leveldb::VersionSet
seek_titerator_pthread_index_map_	db/version_set.h	/^  std::map<pthread_t, int> seek_titerator_pthread_index_map_;$/;"	m	class:leveldb::VersionSet
seek_titerator_read_options_	db/version_set.h	/^  ReadOptions seek_titerator_read_options_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_result_iterators_	db/version_set.h	/^  Iterator** seek_titerator_result_iterators_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_thread_status_	db/version_set.h	/^  ThreadStatus seek_titerator_thread_status_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_threads_current_workload	db/version_set.h	/^  pthread_t seek_titerator_threads_current_workload[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_threads_cv_	db/version_set.h	/^  port::CondVar seek_titerator_threads_cv_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
seek_titerator_threads_mutex_	db/version_set.h	/^  port::Mutex seek_titerator_threads_mutex_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::VersionSet
segments_	util/env_posix.cc	/^  MmapSegment* segments_;   \/\/ mmap'ed regions of memory$/;"	m	class:leveldb::__anon13::PosixMmapFile	file:
segments_sz_	util/env_posix.cc	/^  size_t segments_sz_;      \/\/ number of segments that are truncated$/;"	m	class:leveldb::__anon13::PosixMmapFile	file:
sentinel_compaction_scores_	db/version_set.h	/^  double sentinel_compaction_scores_[config::kNumLevels];$/;"	m	class:leveldb::Version
sentinel_file_nos_	db/version_edit.h	/^  std::vector<uint64_t> sentinel_file_nos_[config::kNumLevels];$/;"	m	class:leveldb::VersionEdit
sentinel_file_nos_	db/version_set.h	/^  std::vector<uint64_t> sentinel_file_nos_[config::kNumLevels];$/;"	m	class:leveldb::Version
sentinel_files_	db/version_edit.h	/^  std::vector<FileMetaData> sentinel_files_[config::kNumLevels];$/;"	m	class:leveldb::VersionEdit
sentinel_files_	db/version_set.h	/^  std::vector<FileMetaData*> sentinel_files_[config::kNumLevels];$/;"	m	class:leveldb::Version
sentinel_inputs_	db/version_set.h	/^  std::vector<FileMetaData*> sentinel_inputs_[2]; \/\/ inputs_ = guard_inputs_ + sentinel_inputs_$/;"	m	class:leveldb::Compaction
sentinel_list_	db/version_set.cc	/^  const std::vector<FileMetaData*>* const sentinel_list_;$/;"	m	class:leveldb::Version::LevelGuardNumIterator::std	file:
seq_limit_	db/replay_iterator.h	/^  SequenceNumber seq_limit_;$/;"	m	struct:leveldb::ReplayState
seq_start_	db/replay_iterator.h	/^  SequenceNumber seq_start_;$/;"	m	struct:leveldb::ReplayState
sequence	db/dbformat.h	/^  SequenceNumber sequence;$/;"	m	struct:leveldb::ParsedInternalKey
sequence_	db/db_iter.cc	/^  SequenceNumber const sequence_;$/;"	m	class:leveldb::__anon20::DBIter	file:
sequence_	db/leveldb_main.cc	/^  uint64_t sequence_;$/;"	m	class:leveldb::__anon30::WriteBatchItemPrinter	file:
sequence_	db/write_batch.cc	/^   SequenceNumber sequence_;$/;"	m	class:leveldb::__anon29::GuardInserter	file:
sequence_	db/write_batch.cc	/^  SequenceNumber sequence_;$/;"	m	class:leveldb::__anon29::MemTableInserter	file:
sequence_	leveldb-verify.cc	/^  uint64_t sequence_;$/;"	m	class:leveldb::__anon31::WriteBatchItemPrinter	file:
set_base_from	depcomp	/^set_base_from ()$/;"	f
set_data	include/pebblesdb/slice.h	/^  void set_data(const std::string &s) {$/;"	f	class:leveldb::Slice
set_dir_from	depcomp	/^set_dir_from ()$/;"	f
set_index_handle	table/format.h	/^  void set_index_handle(const BlockHandle& h) {$/;"	f	class:leveldb::Footer
set_mask	db/write_batch.cc	/^   void set_mask(unsigned num_bits) {$/;"	f	class:leveldb::__anon29::GuardInserter	file:
set_metaindex_handle	table/format.h	/^  void set_metaindex_handle(const BlockHandle& h) { metaindex_handle_ = h; }$/;"	f	class:leveldb::Footer
set_offset	table/format.h	/^  void set_offset(uint64_t _offset) { offset_ = _offset; }$/;"	f	class:leveldb::BlockHandle
set_size	table/format.h	/^  void set_size(uint64_t _size) { size_ = _size; }$/;"	f	class:leveldb::BlockHandle
shard_	util/cache.cc	/^  LRUCache shard_[kNumShards];$/;"	m	class:leveldb::__anon16::ShardedLRUCache	file:
shared	db/db_bench.cc	/^    SharedState* shared;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
shared	db/db_bench.cc	/^  SharedState* shared;$/;"	m	struct:leveldb::__anon19::ThreadState	file:
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shrink	util/string_builder.h	/^  void shrink(size_t sz) {$/;"	f	struct:leveldb::StringBuilder
shutting_down_	db/db_impl.h	/^  port::AtomicPointer shutting_down_;$/;"	m	class:leveldb::DBImpl
size	include/pebblesdb/slice.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Slice
size	table/block.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Block
size	table/format.h	/^  uint64_t size() const { return size_; }$/;"	f	class:leveldb::BlockHandle
size	util/arena.cc	/^  uint32_t size;$/;"	m	struct:leveldb::Arena::Block	file:
size	util/string_builder.h	/^  size_t size() const { return m_sz; }$/;"	f	struct:leveldb::StringBuilder
size_	helpers/memenv/memenv.cc	/^  uint64_t size_;$/;"	m	class:leveldb::__anon9::FileState	file:
size_	include/pebblesdb/slice.h	/^  size_t size_;$/;"	m	class:leveldb::Slice
size_	table/block.h	/^  size_t size_;$/;"	m	class:leveldb::Block
size_	table/format.h	/^  uint64_t size_;$/;"	m	class:leveldb::BlockHandle
skiplist_test_DEPENDENCIES	Makefile	/^skiplist_test_DEPENDENCIES = libpebblesdb.la$/;"	m
skiplist_test_LDADD	Makefile	/^skiplist_test_LDADD = libpebblesdb.la -lpthread$/;"	m
skiplist_test_OBJECTS	Makefile	/^skiplist_test_OBJECTS = $(am_skiplist_test_OBJECTS)$/;"	m
skiplist_test_SOURCES	Makefile	/^skiplist_test_SOURCES = db\/skiplist_test.cc $(TESTHARNESS)$/;"	m
slice	util/string_builder.h	/^  Slice slice() const { return Slice(m_buf, m_sz); }$/;"	f	struct:leveldb::StringBuilder
smallest	db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
smallest	db/version_edit.h	/^  InternalKey smallest;       \/\/ Smallest internal key served by table$/;"	m	struct:leveldb::FileMetaData
smallest	db/version_edit.h	/^  InternalKey smallest; $/;"	m	struct:leveldb::GuardMetaData
smallest_snapshot	db/db_impl.cc	/^  SequenceNumber smallest_snapshot;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
snapshot	include/pebblesdb/options.h	/^  const Snapshot* snapshot;$/;"	m	struct:leveldb::ReadOptions
snapshots_	db/db_impl.h	/^  SnapshotList snapshots_;$/;"	m	class:leveldb::DBImpl
source_	db/log_test.cc	/^  StringSource source_;$/;"	m	class:leveldb::log::LogTest	file:
source_	table/table_test.cc	/^  StringSource* source_;$/;"	m	class:leveldb::TableConstructor	file:
space_	db/dbformat.h	/^  char space_[200];      \/\/ Avoid allocation for short keys$/;"	m	class:leveldb::LookupKey
split_file_names	db/db_bench.cc	/^  int split_file_names(const char *file, char file_names[20][100]) {$/;"	f	class:leveldb::Benchmark
srcdir	Makefile	/^srcdir = .$/;"	m
srecord_timer	table/table.cc	30;"	d	file:
srecord_timer	table/table.cc	33;"	d	file:
ss_	util/testharness.h	/^  std::stringstream ss_;$/;"	m	class:leveldb::test::Tester
sstart_timer	table/table.cc	29;"	d	file:
sstart_timer	table/table.cc	32;"	d	file:
start	db/db_bench.cc	/^  bool start;$/;"	m	struct:leveldb::__anon19::SharedState	file:
start	db/version_set.cc	/^  size_t start;$/;"	m	struct:leveldb::CompactionBoundary	file:
start	include/pebblesdb/db.h	/^  Slice start;          \/\/ Included in the range$/;"	m	struct:leveldb::Range
start_	db/db_bench.cc	/^  double start_;$/;"	m	class:leveldb::__anon19::Stats	file:
start_	db/dbformat.h	/^  const char* start_;$/;"	m	class:leveldb::LookupKey
start_	doc/bench/db_bench_sqlite3.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	doc/bench/db_bench_tree_db.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	table/filter_block.h	/^  std::vector<size_t> start_;     \/\/ Starting index in keys_ of each key$/;"	m	class:leveldb::FilterBlockBuilder
start_at_	db/db_bench.cc	/^  uint64_t start_at_;$/;"	m	class:leveldb::Benchmark::Duration	file:
start_at_	db/replay_iterator.h	/^  SequenceNumber const start_at_;$/;"	m	class:leveldb::ReplayIteratorImpl
start_sequence_	db/db_impl.cc	/^  uint64_t start_sequence_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
start_timer	db/db_impl.cc	44;"	d	file:
start_timer	db/db_impl.cc	47;"	d	file:
start_timer	db/table_cache.cc	13;"	d	file:
start_timer	db/table_cache.cc	16;"	d	file:
start_timer	db/version_set.cc	39;"	d	file:
start_timer	db/version_set.cc	45;"	d	file:
start_timer	table/merger.cc	15;"	d	file:
start_timer	table/merger.cc	22;"	d	file:
start_timer	table/table.cc	21;"	d	file:
start_timer	table/table.cc	24;"	d	file:
start_timer_simple	db/db_impl.cc	52;"	d	file:
start_timer_simple	db/db_impl.cc	55;"	d	file:
started_bgthread_	util/env_posix.cc	/^  bool started_bgthread_;$/;"	m	class:leveldb::__anon13::PosixEnv	file:
starts_with	include/pebblesdb/slice.h	/^  bool starts_with(const Slice& x) const {$/;"	f	class:leveldb::Slice
state	db/db_test.cc	/^  MTState* state;$/;"	m	struct:leveldb::__anon23::MTThread	file:
state	db/version_set.h	/^  SaverState state;$/;"	m	struct:leveldb::Saver
state_	db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_comparator_t	file:
state_	db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_filterpolicy_t	file:
state_	db/skiplist_test.cc	/^  ReaderState state_;$/;"	m	class:leveldb::TestState	file:
state_	include/pebblesdb/status.h	/^  const char* state_;$/;"	m	class:leveldb::Status
state_cv_	db/skiplist_test.cc	/^  port::CondVar state_cv_;$/;"	m	class:leveldb::TestState	file:
static_timers_	db/table_cache.h	/^  Timer* static_timers_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::TableCache
static_timers_	include/pebblesdb/table.h	/^  Timer* static_timers_[NUM_SEEK_THREADS];$/;"	m	class:leveldb::Table
stats	db/db_bench.cc	/^  Stats stats;$/;"	m	struct:leveldb::__anon19::ThreadState	file:
stats_	db/db_impl.h	/^  CompactionStats stats_[config::kNumLevels];$/;"	m	class:leveldb::DBImpl
status	db/db_iter.cc	/^  virtual const Status& status() const {$/;"	f	class:leveldb::__anon20::DBIter
status	db/db_test.cc	/^    virtual const Status& status() const { return status_; }$/;"	f	class:leveldb::ModelDB::ModelIter
status	db/memtable.cc	/^  virtual const Status& status() const { return status_; }$/;"	f	class:leveldb::MemTableIterator
status	db/replay_iterator.cc	/^Status ReplayIteratorImpl::status() const {$/;"	f	class:leveldb::ReplayIteratorImpl
status	db/version_set.cc	/^  virtual const Status& status() const { return status_; }$/;"	f	class:leveldb::Version::LevelFileNumIterator
status	db/version_set.cc	/^  virtual const Status& status() const { return status_; }$/;"	f	class:leveldb::Version::LevelGuardNumIterator
status	table/block.cc	/^  virtual const Status& status() const { return status_; }$/;"	f	class:leveldb::Block::Iter
status	table/iterator.cc	/^  virtual const Status& status() const { return status_; }$/;"	f	class:leveldb::__anon3::EmptyIterator
status	table/iterator_wrapper.h	/^  const Status& status() const { assert(iter_); return iter_->status(); }$/;"	f	class:leveldb::IteratorWrapper
status	table/merger.cc	/^  virtual const Status& status() const {$/;"	f	class:leveldb::__anon5::MergingIterator
status	table/table.cc	/^  Status status;$/;"	m	struct:leveldb::Table::Rep	file:
status	table/table_builder.cc	/^  Status status;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
status	table/table_builder.cc	/^Status TableBuilder::status() const {$/;"	f	class:leveldb::TableBuilder
status	table/table_test.cc	/^  virtual const Status& status() const {$/;"	f	class:leveldb::KeyConvertingIterator
status	table/two_level_iterator.cc	/^  virtual const Status& status() const {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
status	table/two_level_iterator.cc	/^  virtual const Status& status() const {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
status_	db/db_iter.cc	/^  Status status_;$/;"	m	class:leveldb::__anon20::DBIter	file:
status_	db/db_test.cc	/^    Status status_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
status_	db/memtable.cc	/^  Status status_;$/;"	m	class:leveldb::MemTableIterator	file:
status_	db/replay_iterator.h	/^  Status status_;$/;"	m	class:leveldb::ReplayIteratorImpl
status_	db/version_set.cc	/^  Status status_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
status_	db/version_set.cc	/^  Status status_;$/;"	m	class:leveldb::Version::LevelGuardNumIterator	file:
status_	table/block.cc	/^  Status status_;$/;"	m	class:leveldb::Block::Iter	file:
status_	table/iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon3::EmptyIterator	file:
status_	table/merger.cc	/^  Status status_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
status_	table/table_test.cc	/^  mutable Status status_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
status_	table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon4::TwoLevelIterator	file:
status_	table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon4::TwoLevelIteratorGuards	file:
stop	db/db_test.cc	/^  port::AtomicPointer stop;$/;"	m	struct:leveldb::__anon23::MTState	file:
stop_seek_threads_	db/version_set.h	/^  int stop_seek_threads_;$/;"	m	class:leveldb::VersionSet
store_32_acquire	util/atomic.h	/^store_32_acquire(volatile uint32_t* ptr, uint32_t value)$/;"	f	namespace:leveldb::atomic
store_32_nobarrier	util/atomic.h	/^store_32_nobarrier(volatile uint32_t* ptr, uint32_t value)$/;"	f	namespace:leveldb::atomic
store_32_release	util/atomic.h	/^store_32_release(volatile uint32_t* ptr, uint32_t value)$/;"	f	namespace:leveldb::atomic
store_64_acquire	util/atomic.h	/^store_64_acquire(volatile uint64_t* ptr, uint64_t value)$/;"	f	namespace:leveldb::atomic
store_64_nobarrier	util/atomic.h	/^store_64_nobarrier(volatile uint64_t* ptr, uint64_t value)$/;"	f	namespace:leveldb::atomic
store_64_release	util/atomic.h	/^store_64_release(volatile uint64_t* ptr, uint64_t value)$/;"	f	namespace:leveldb::atomic
store_ptr_acquire	util/atomic.h	/^store_ptr_acquire(P* volatile* ptr, P* value)$/;"	f	namespace:leveldb::atomic
store_ptr_fullbarrier	util/atomic.h	/^store_ptr_fullbarrier(P* volatile* ptr, P* value)$/;"	f	namespace:leveldb::atomic
store_ptr_nobarrier	util/atomic.h	/^store_ptr_nobarrier(P* volatile* ptr, P* value)$/;"	f	namespace:leveldb::atomic
store_ptr_release	util/atomic.h	/^store_ptr_release(P* volatile* ptr, P* value)$/;"	f	namespace:leveldb::atomic
straight_reads_	db/db_impl.h	/^  uint64_t straight_reads_;$/;"	m	class:leveldb::DBImpl
subdir	Makefile	/^subdir = .$/;"	m
sum_	util/histogram.h	/^  double sum_;$/;"	m	class:leveldb::Histogram
sum_squares_	util/histogram.h	/^  double sum_squares_;$/;"	m	class:leveldb::Histogram
sync	include/pebblesdb/options.h	/^  bool sync;$/;"	m	struct:leveldb::WriteOptions
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
t_	db/skiplist_test.cc	/^  ConcurrentTest t_;$/;"	m	class:leveldb::TestState	file:
table	db/table_cache.cc	/^  Table* table;$/;"	m	struct:leveldb::TableAndFile	file:
table_	db/memtable.h	/^  Table table_;$/;"	m	class:leveldb::MemTable
table_	table/table_test.cc	/^  Table* table_;$/;"	m	class:leveldb::TableConstructor	file:
table_	util/cache.cc	/^  HandleTable table_;$/;"	m	class:leveldb::__anon16::LRUCache	file:
table_cache_	db/db_impl.h	/^  TableCache* table_cache_;$/;"	m	class:leveldb::DBImpl
table_cache_	db/repair.cc	/^  TableCache* table_cache_;$/;"	m	class:leveldb::__anon27::Repairer	file:
table_cache_	db/version_set.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::VersionSet
table_numbers_	db/repair.cc	/^  std::vector<uint64_t> table_numbers_;$/;"	m	class:leveldb::__anon27::Repairer	file:
table_test_DEPENDENCIES	Makefile	/^table_test_DEPENDENCIES = libpebblesdb.la$/;"	m
table_test_LDADD	Makefile	/^table_test_LDADD = libpebblesdb.la -lpthread$/;"	m
table_test_OBJECTS	Makefile	/^table_test_OBJECTS = $(am_table_test_OBJECTS)$/;"	m
table_test_SOURCES	Makefile	/^table_test_SOURCES = table\/table_test.cc $(TESTHARNESS)$/;"	m
tables_	db/repair.cc	/^  std::vector<TableInfo> tables_;$/;"	m	class:leveldb::__anon27::Repairer	file:
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target	include/pebblesdb/env.h	/^    target() const$/;"	f	class:leveldb::EnvWrapper
target_	include/pebblesdb/env.h	/^    Env *target_;$/;"	m	class:leveldb::EnvWrapper
target_alias	Makefile	/^target_alias = $/;"	m
test	db/db_test.cc	/^  DBTest* test;$/;"	m	struct:leveldb::__anon23::MTState	file:
test	util/testharness.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	util/testharness.h	/^namespace test {$/;"	n	namespace:leveldb
test	util/testutil.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	util/testutil.h	/^namespace test {$/;"	n	namespace:leveldb
tests	util/testharness.cc	/^std::vector<Test>* tests;$/;"	m	namespace:leveldb::test::__anon12	file:
thread	db/db_bench.cc	/^    ThreadState* thread;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
thread_done	db/db_test.cc	/^  port::AtomicPointer thread_done[kNumThreads];$/;"	m	struct:leveldb::__anon23::MTState	file:
tid	db/db_bench.cc	/^  int tid;             \/\/ 0..n-1 when running in n threads$/;"	m	struct:leveldb::__anon19::ThreadState	file:
timer	db/db_impl.h	/^  Timer* timer;$/;"	m	class:leveldb::DBImpl
timer	db/version_set.cc	/^  Timer* timer;$/;"	m	class:leveldb::Version::LevelGuardNumIterator	file:
timer	db/version_set.h	/^  Timer* timer;$/;"	m	class:leveldb::VersionSet
timer_count	util/timer.h	/^	uint64_t timer_count[200];$/;"	m	class:leveldb::Timer
timer_count_additional	util/timer.h	/^	uint64_t timer_count_additional[200];$/;"	m	class:leveldb::Timer
timer_micros	util/timer.h	/^	uint64_t timer_micros[200];$/;"	m	class:leveldb::Timer
tiny_cache_	db/autocompact_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::AutoCompactTest	file:
tiny_cache_	db/corruption_test.cc	/^    Cache *tiny_cache_;$/;"	m	class:leveldb::CorruptionTest	file:
tmp_	db/memtable.cc	/^  std::string tmp_;       \/\/ For passing to EncodeKey$/;"	m	class:leveldb::MemTableIterator	file:
tmp_keys_	table/filter_block.h	/^  std::vector<Slice> tmp_keys_;   \/\/ policy_->CreateFilter() argument$/;"	m	class:leveldb::FileLevelFilterBuilder
tmp_keys_	table/filter_block.h	/^  std::vector<Slice> tmp_keys_;   \/\/ policy_->CreateFilter() argument$/;"	m	class:leveldb::FilterBlockBuilder
tmp_storage	db/db_impl.h	/^    InternalKey tmp_storage;    \/\/ Used to keep track of compaction progress$/;"	m	struct:leveldb::DBImpl::ManualCompaction
tombstones_counter_	db/db_iter.cc	/^  ssize_t tombstones_counter_;$/;"	m	class:leveldb::__anon20::DBIter	file:
top_build_prefix	Makefile	/^top_build_prefix = $/;"	m
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_level_bits	db/write_batch.cc	/^   const static unsigned top_level_bits = 27;$/;"	m	class:leveldb::__anon29::GuardInserter	file:
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
total	db/db_bench.cc	/^  int total;$/;"	m	struct:leveldb::__anon19::SharedState	file:
total_bytes	db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
total_files_read	include/pebblesdb/db.h	/^    int total_files_read = 0;$/;"	m	class:leveldb::DB
total_write_count	db/version_set.h	/^  uint64_t total_write_count;$/;"	m	class:leveldb::Version
trace_operation_t	db/db_bench.cc	/^  struct trace_operation_t {$/;"	s	class:leveldb::Benchmark	file:
trace_ops	db/db_bench.cc	/^  struct trace_operation_t *trace_ops[10]; \/\/ Assuming maximum of 10 concurrent threads$/;"	m	class:leveldb::Benchmark	typeref:struct:leveldb::Benchmark::trace_operation_t	file:
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
trunc_in_progress_	util/env_posix.cc	/^  bool trunc_in_progress_;  \/\/ is there an ongoing truncate operation?$/;"	m	class:leveldb::__anon13::PosixMmapFile	file:
trunc_waiters_	util/env_posix.cc	/^  uint64_t trunc_waiters_;  \/\/ number of threads waiting for truncate$/;"	m	class:leveldb::__anon13::PosixMmapFile	file:
type	db/dbformat.h	/^  ValueType type;$/;"	m	struct:leveldb::ParsedInternalKey
type	table/table_test.cc	/^  TestType type;$/;"	m	struct:leveldb::TestArgs	file:
type_	db/db_bench.cc	/^    std::vector<int> type_;$/;"	m	class:leveldb::Benchmark::QueryDecider	file:
type_crc_	db/log_writer.h	/^  uint32_t type_crc_[kMaxRecordType + 1];$/;"	m	class:leveldb::log::Writer
ucmp	db/version_set.h	/^  const Comparator* ucmp;$/;"	m	struct:leveldb::Saver
uint16_t	port/win/stdint.h	/^typedef unsigned short        uint16_t;$/;"	t
uint32_t	db/murmurhash3.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_t	port/win/stdint.h	/^typedef unsigned int          uint32_t;$/;"	t
uint64_t	db/murmurhash3.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	port/win/stdint.h	/^typedef unsigned long long    uint64_t;$/;"	t
uint8_t	db/murmurhash3.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	port/win/stdint.h	/^typedef unsigned char         uint8_t;$/;"	t
usage_	util/cache.cc	/^  size_t usage_;$/;"	m	class:leveldb::__anon16::LRUCache	file:
user_comparator	db/db_impl.h	/^  const Comparator* user_comparator() const {$/;"	f	class:leveldb::DBImpl
user_comparator	db/dbformat.h	/^  const Comparator* user_comparator() const { return user_comparator_; }$/;"	f	class:leveldb::InternalKeyComparator
user_comparator_	db/db_iter.cc	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::__anon20::DBIter	file:
user_comparator_	db/dbformat.h	/^  const Comparator* user_comparator_;$/;"	m	class:leveldb::InternalKeyComparator
user_comparator_	db/replay_iterator.h	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::ReplayIteratorImpl
user_function	util/env_posix.cc	/^  void (*user_function)(void*);$/;"	m	struct:leveldb::__anon13::__anon14::StartThreadState	file:
user_key	db/dbformat.h	/^  Slice user_key() const { return ExtractUserKey(rep_); }$/;"	f	class:leveldb::InternalKey
user_key	db/dbformat.h	/^  Slice user_key() const { return Slice(kstart_, end_ - kstart_ - 8); }$/;"	f	class:leveldb::LookupKey
user_key	db/dbformat.h	/^  Slice user_key;$/;"	m	struct:leveldb::ParsedInternalKey
user_key	db/version_set.h	/^  Slice user_key;$/;"	m	struct:leveldb::Saver
user_policy_	db/dbformat.h	/^  const FilterPolicy* const user_policy_;$/;"	m	class:leveldb::InternalFilterPolicy
val	util/env_test.cc	/^  int val;$/;"	m	struct:leveldb::State	file:
valid_	db/db_iter.cc	/^  bool valid_;$/;"	m	class:leveldb::__anon20::DBIter	file:
valid_	db/replay_iterator.h	/^  bool valid_;$/;"	m	class:leveldb::ReplayIteratorImpl
valid_	table/iterator_wrapper.h	/^  bool valid_;$/;"	m	class:leveldb::IteratorWrapper
value	db/db_iter.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon20::DBIter
value	db/db_test.cc	/^    virtual Slice value() const { return iter_->second; }$/;"	f	class:leveldb::ModelDB::ModelIter
value	db/memtable.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::MemTableIterator
value	db/replay_iterator.cc	/^Slice ReplayIteratorImpl::value() const {$/;"	f	class:leveldb::ReplayIteratorImpl
value	db/version_set.cc	/^  Slice value() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
value	db/version_set.cc	/^  Slice value() const {$/;"	f	class:leveldb::Version::LevelGuardNumIterator
value	db/version_set.h	/^  std::string *value;$/;"	m	struct:leveldb::Saver
value	table/block.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::Block::Iter
value	table/iterator.cc	/^  Slice value() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon3::EmptyIterator
value	table/iterator_wrapper.h	/^  Slice value() const       { assert(Valid()); return iter_->value(); }$/;"	f	class:leveldb::IteratorWrapper
value	table/merger.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon5::MergingIterator
value	table/table_test.cc	/^  virtual Slice value() const { return iter_->value(); }$/;"	f	class:leveldb::KeyConvertingIterator
value	table/two_level_iterator.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
value	table/two_level_iterator.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
value	util/cache.cc	/^  void* value;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
value_	table/block.cc	/^  Slice value_;$/;"	m	class:leveldb::Block::Iter	file:
value_buf_	db/version_set.cc	/^  mutable char value_buf_[16384];$/;"	m	class:leveldb::Version::LevelGuardNumIterator	file:
value_buf_	db/version_set.cc	/^  mutable char value_buf_[16];$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
value_size_	db/db_bench.cc	/^  int value_size_;$/;"	m	class:leveldb::Benchmark	file:
valuebuf	db/db_bench.cc	/^  char valuebuf[MAX_VALUE_SIZE];$/;"	m	class:leveldb::Benchmark	file:
verify_checksums	include/pebblesdb/options.h	/^  bool verify_checksums;$/;"	m	struct:leveldb::ReadOptions
version	db/db_impl.cc	/^  Version* version;$/;"	m	struct:leveldb::__anon21::IterState	file:
version_	db/write_batch.cc	/^  Version* version_;$/;"	m	class:leveldb::__anon29::MemTableInserter	file:
version_edit_test_DEPENDENCIES	Makefile	/^version_edit_test_DEPENDENCIES = libpebblesdb.la$/;"	m
version_edit_test_LDADD	Makefile	/^version_edit_test_LDADD = libpebblesdb.la -lpthread$/;"	m
version_edit_test_OBJECTS	Makefile	/^version_edit_test_OBJECTS = $(am_version_edit_test_OBJECTS)$/;"	m
version_edit_test_SOURCES	Makefile	/^version_edit_test_SOURCES = db\/version_edit_test.cc $(TESTHARNESS)$/;"	m
version_set_test_DEPENDENCIES	Makefile	/^version_set_test_DEPENDENCIES = libpebblesdb.la$/;"	m
version_set_test_LDADD	Makefile	/^version_set_test_LDADD = libpebblesdb.la -lpthread$/;"	m
version_set_test_OBJECTS	Makefile	/^version_set_test_OBJECTS = $(am_version_set_test_OBJECTS)$/;"	m
version_set_test_SOURCES	Makefile	/^version_set_test_SOURCES = db\/version_set_test.cc $(TESTHARNESS)$/;"	m
versions_	db/db_impl.h	/^  VersionSet* versions_;$/;"	m	class:leveldb::DBImpl
vrecord_timer	db/version_set.cc	43;"	d	file:
vrecord_timer	db/version_set.cc	49;"	d	file:
vrecord_timer	table/merger.cc	19;"	d	file:
vrecord_timer	table/merger.cc	26;"	d	file:
vrecord_timer2	table/merger.cc	20;"	d	file:
vrecord_timer2	table/merger.cc	27;"	d	file:
vset_	db/version_set.cc	/^  VersionSet* vset_;$/;"	m	class:leveldb::VersionSet::Builder	file:
vset_	db/version_set.h	/^  VersionSet* vset_;            \/\/ VersionSet to which this Version belongs$/;"	m	class:leveldb::Version
vset_	table/merger.cc	/^  VersionSet* vset_;$/;"	m	class:leveldb::__anon5::MergingIterator	file:
vstart_timer	db/version_set.cc	40;"	d	file:
vstart_timer	db/version_set.cc	46;"	d	file:
vstart_timer	table/merger.cc	16;"	d	file:
vstart_timer	table/merger.cc	23;"	d	file:
vvrecord_timer	db/version_set.cc	30;"	d	file:
vvrecord_timer	db/version_set.cc	34;"	d	file:
vvrecord_timer2	db/version_set.cc	31;"	d	file:
vvrecord_timer2	db/version_set.cc	35;"	d	file:
vvstart_timer	db/version_set.cc	29;"	d	file:
vvstart_timer	db/version_set.cc	33;"	d	file:
wake_me_when_head_	db/db_impl.cc	/^  bool wake_me_when_head_;$/;"	m	struct:leveldb::DBImpl::Writer	file:
worker_thread	benchmark.cc	/^worker_thread(leveldb::DB* db,$/;"	f
writable_file_error_	util/testutil.h	/^  bool writable_file_error_;$/;"	m	class:leveldb::test::ErrorEnv
write_batch_test_DEPENDENCIES	Makefile	/^write_batch_test_DEPENDENCIES = libpebblesdb.la$/;"	m
write_batch_test_LDADD	Makefile	/^write_batch_test_LDADD = libpebblesdb.la -lpthread$/;"	m
write_batch_test_OBJECTS	Makefile	/^write_batch_test_OBJECTS = $(am_write_batch_test_OBJECTS)$/;"	m
write_batch_test_SOURCES	Makefile	/^write_batch_test_SOURCES = db\/write_batch_test.cc $(TESTHARNESS)$/;"	m
write_buffer_size	include/pebblesdb/options.h	/^  size_t write_buffer_size;$/;"	m	struct:leveldb::Options
write_count	db/version_edit.h	/^  uint64_t write_count;$/;"	m	struct:leveldb::GuardMetaData
write_options_	db/db_bench.cc	/^  WriteOptions write_options_;$/;"	m	class:leveldb::Benchmark	file:
writer_	db/log_test.cc	/^  Writer writer_;$/;"	m	class:leveldb::log::LogTest	file:
writers_mutex_	db/db_impl.h	/^  port::Mutex writers_mutex_;$/;"	m	class:leveldb::DBImpl
writers_tail_	db/db_impl.h	/^  Writer* writers_tail_;$/;"	m	class:leveldb::DBImpl
writers_upper_	db/db_impl.h	/^  uint64_t writers_upper_;$/;"	m	class:leveldb::DBImpl
ycsb_d	db/db_bench.cc	/^  	unsigned long long ycsb_d;$/;"	m	struct:leveldb::Benchmark::result_t	file:
ycsb_i	db/db_bench.cc	/^  	unsigned long long ycsb_i;$/;"	m	struct:leveldb::Benchmark::result_t	file:
ycsb_r	db/db_bench.cc	/^  	unsigned long long ycsb_r;$/;"	m	struct:leveldb::Benchmark::result_t	file:
ycsb_s	db/db_bench.cc	/^  	unsigned long long ycsb_s;$/;"	m	struct:leveldb::Benchmark::result_t	file:
ycsb_u	db/db_bench.cc	/^  	unsigned long long ycsb_u;$/;"	m	struct:leveldb::Benchmark::result_t	file:
ycsbdata	db/db_bench.cc	/^  	unsigned long long ycsbdata;$/;"	m	struct:leveldb::Benchmark::result_t	file:
~Arena	util/arena.cc	/^Arena::~Arena() throw () {$/;"	f	class:leveldb::Arena
~AutoCompactTest	db/autocompact_test.cc	/^  ~AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
~Benchmark	db/db_bench.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	doc/bench/db_bench_sqlite3.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	doc/bench/db_bench_tree_db.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Block	table/block.cc	/^Block::~Block() {$/;"	f	class:leveldb::Block
~Block	util/arena.cc	/^  ~Block() throw () {$/;"	f	struct:leveldb::Arena::Block
~BlockConstructor	table/table_test.cc	/^  ~BlockConstructor() {$/;"	f	class:leveldb::BlockConstructor
~BloomTest	util/bloom_test.cc	/^  ~BloomTest() {$/;"	f	class:leveldb::BloomTest
~Builder	db/version_set.cc	/^  ~Builder() {$/;"	f	class:leveldb::VersionSet::Builder
~Cache	util/cache.cc	/^Cache::~Cache() {$/;"	f	class:leveldb::Cache
~CacheTest	util/cache_test.cc	/^  ~CacheTest() {$/;"	f	class:leveldb::CacheTest
~Compaction	db/version_set.cc	/^Compaction::~Compaction() {$/;"	f	class:leveldb::Compaction
~Comparator	util/comparator.cc	/^Comparator::~Comparator() { }$/;"	f	class:leveldb::Comparator
~ConcurrentWritableFile	util/env.cc	/^ConcurrentWritableFile::~ConcurrentWritableFile() {$/;"	f	class:leveldb::ConcurrentWritableFile
~CondVar	port/port_posix.cc	/^CondVar::~CondVar() { PthreadCall("destroy cv", pthread_cond_destroy(&cv_)); }$/;"	f	class:leveldb::port::CondVar
~Constructor	table/table_test.cc	/^  virtual ~Constructor() { }$/;"	f	class:leveldb::Constructor
~CorruptionTest	db/corruption_test.cc	/^    ~CorruptionTest()$/;"	f	class:leveldb::CorruptionTest
~DB	db/db_impl.cc	/^DB::~DB() { }$/;"	f	class:leveldb::DB
~DBConstructor	table/table_test.cc	/^  ~DBConstructor() {$/;"	f	class:leveldb::DBConstructor
~DBImpl	db/db_impl.cc	/^DBImpl::~DBImpl() {$/;"	f	class:leveldb::DBImpl
~DBIter	db/db_iter.cc	/^  virtual ~DBIter() {$/;"	f	class:leveldb::__anon20::DBIter
~DBTest	db/db_test.cc	/^  ~DBTest() {$/;"	f	class:leveldb::DBTest
~Env	util/env.cc	/^Env::~Env() {$/;"	f	class:leveldb::Env
~EnvWrapper	util/env.cc	/^EnvWrapper::~EnvWrapper() {$/;"	f	class:leveldb::EnvWrapper
~FileLevelFilterBuilder	table/filter_block.cc	/^FileLevelFilterBuilder::~FileLevelFilterBuilder() {$/;"	f	class:leveldb::FileLevelFilterBuilder
~FileLock	util/env.cc	/^FileLock::~FileLock() {$/;"	f	class:leveldb::FileLock
~FileState	helpers/memenv/memenv.cc	/^  ~FileState() {$/;"	f	class:leveldb::__anon9::FileState	file:
~FilterPolicy	util/filter_policy.cc	/^FilterPolicy::~FilterPolicy() { }$/;"	f	class:leveldb::FilterPolicy
~FindFileTest	db/version_set_test.cc	/^  ~FindFileTest() {$/;"	f	class:leveldb::FindFileTest
~GenerateTwoTermExpKeys	db/db_bench.cc	/^    ~GenerateTwoTermExpKeys() {}$/;"	f	class:leveldb::Benchmark::GenerateTwoTermExpKeys
~HandleTable	util/cache.cc	/^  ~HandleTable() { delete[] list_; }$/;"	f	class:leveldb::__anon16::HandleTable
~Handler	db/write_batch.cc	/^WriteBatch::Handler::~Handler() { }$/;"	f	class:leveldb::WriteBatch::Handler
~Harness	table/table_test.cc	/^  ~Harness() {$/;"	f	class:leveldb::Harness
~Histogram	util/histogram.h	/^  ~Histogram() throw () { }$/;"	f	class:leveldb::Histogram
~InMemoryEnv	helpers/memenv/memenv.cc	/^  virtual ~InMemoryEnv() {$/;"	f	class:leveldb::__anon9::InMemoryEnv
~Iterator	table/iterator.cc	/^Iterator::~Iterator() {$/;"	f	class:leveldb::Iterator
~IteratorWrapper	table/iterator_wrapper.h	/^  ~IteratorWrapper() { delete iter_; }$/;"	f	class:leveldb::IteratorWrapper
~KeyConvertingIterator	table/table_test.cc	/^  virtual ~KeyConvertingIterator() { delete iter_; }$/;"	f	class:leveldb::KeyConvertingIterator
~LRUCache	util/cache.cc	/^LRUCache::~LRUCache() {$/;"	f	class:leveldb::__anon16::LRUCache
~LevelGuardNumIterator	db/version_set.cc	/^  ~LevelGuardNumIterator() { }$/;"	f	class:leveldb::Version::LevelGuardNumIterator
~Logger	util/env.cc	/^Logger::~Logger() {$/;"	f	class:leveldb::Logger
~LookupKey	db/dbformat.h	/^inline LookupKey::~LookupKey() {$/;"	f	class:leveldb::LookupKey
~MemEnvTest	helpers/memenv/memenv_test.cc	/^  ~MemEnvTest() {$/;"	f	class:leveldb::MemEnvTest
~MemTable	db/memtable.cc	/^MemTable::~MemTable() {$/;"	f	class:leveldb::MemTable
~MemTableConstructor	table/table_test.cc	/^  ~MemTableConstructor() {$/;"	f	class:leveldb::MemTableConstructor
~MergingIterator	table/merger.cc	/^  virtual ~MergingIterator() {$/;"	f	class:leveldb::__anon5::MergingIterator
~ModelDB	db/db_test.cc	/^  ~ModelDB() { }$/;"	f	class:leveldb::ModelDB
~ModelIter	db/db_test.cc	/^    ~ModelIter() {$/;"	f	class:leveldb::ModelDB::ModelIter
~Mutex	port/port_posix.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~PosixEnv	util/env_posix.cc	/^  virtual ~PosixEnv() {$/;"	f	class:leveldb::__anon13::PosixEnv
~PosixLogger	util/posix_logger.h	/^  virtual ~PosixLogger() {$/;"	f	class:leveldb::PosixLogger
~PosixMmapFile	util/env_posix.cc	/^  ~PosixMmapFile() {$/;"	f	class:leveldb::__anon13::PosixMmapFile
~PosixMmapReadableFile	util/env_posix.cc	/^  virtual ~PosixMmapReadableFile() {$/;"	f	class:leveldb::__anon13::PosixMmapReadableFile
~PosixRandomAccessFile	util/env_posix.cc	/^  virtual ~PosixRandomAccessFile() { close(fd_); }$/;"	f	class:leveldb::__anon13::PosixRandomAccessFile
~PosixSequentialFile	util/env_posix.cc	/^  virtual ~PosixSequentialFile() { fclose(file_); }$/;"	f	class:leveldb::__anon13::PosixSequentialFile
~PosixWritableFile	util/env_posix.cc	/^  ~PosixWritableFile() {$/;"	f	class:leveldb::__anon13::PosixWritableFile
~QueryDecider	db/db_bench.cc	/^    ~QueryDecider() {}$/;"	f	class:leveldb::Benchmark::QueryDecider
~RandomAccessFile	util/env.cc	/^RandomAccessFile::~RandomAccessFile() {$/;"	f	class:leveldb::RandomAccessFile
~RandomAccessFileImpl	helpers/memenv/memenv.cc	/^  ~RandomAccessFileImpl() {$/;"	f	class:leveldb::__anon9::RandomAccessFileImpl
~Reader	db/log_reader.cc	/^Reader::~Reader() {$/;"	f	class:leveldb::log::Reader
~Rep	table/table.cc	/^  ~Rep() {$/;"	f	struct:leveldb::Table::Rep
~Repairer	db/repair.cc	/^  ~Repairer() {$/;"	f	class:leveldb::__anon27::Repairer
~ReplayIterator	db/replay_iterator.cc	/^ReplayIterator::~ReplayIterator() {$/;"	f	class:leveldb::ReplayIterator
~ReplayIteratorImpl	db/replay_iterator.cc	/^ReplayIteratorImpl::~ReplayIteratorImpl() {$/;"	f	class:leveldb::ReplayIteratorImpl
~Reporter	db/log_reader.cc	/^Reader::Reporter::~Reporter() {$/;"	f	class:leveldb::log::Reader::Reporter
~SequentialFile	util/env.cc	/^SequentialFile::~SequentialFile() {$/;"	f	class:leveldb::SequentialFile
~SequentialFileImpl	helpers/memenv/memenv.cc	/^  ~SequentialFileImpl() {$/;"	f	class:leveldb::__anon9::SequentialFileImpl
~ShardedLRUCache	util/cache.cc	/^  virtual ~ShardedLRUCache() { }$/;"	f	class:leveldb::__anon16::ShardedLRUCache
~Snapshot	db/db_impl.cc	/^Snapshot::~Snapshot() {$/;"	f	class:leveldb::Snapshot
~Status	include/pebblesdb/status.h	/^  ~Status() { delete[] state_; }$/;"	f	class:leveldb::Status
~StringBuilder	util/string_builder.h	/^  ~StringBuilder() throw () { if (m_buf) free(m_buf); }$/;"	f	struct:leveldb::StringBuilder
~StringSink	table/table_test.cc	/^  ~StringSink() { }$/;"	f	class:leveldb::StringSink
~StringSource	table/table_test.cc	/^  virtual ~StringSource() { }$/;"	f	class:leveldb::StringSource
~Table	table/table.cc	/^Table::~Table() {$/;"	f	class:leveldb::Table
~TableBuilder	table/table_builder.cc	/^TableBuilder::~TableBuilder() {$/;"	f	class:leveldb::TableBuilder
~TableCache	db/table_cache.cc	/^TableCache::~TableCache() {$/;"	f	class:leveldb::TableCache
~TableConstructor	table/table_test.cc	/^  ~TableConstructor() {$/;"	f	class:leveldb::TableConstructor
~Tester	util/testharness.h	/^  ~Tester() {$/;"	f	class:leveldb::test::Tester
~Timer	util/timer.h	/^	~Timer() {$/;"	f	class:leveldb::Timer
~TwoLevelIterator	table/two_level_iterator.cc	/^TwoLevelIterator::~TwoLevelIterator() {$/;"	f	class:leveldb::__anon4::TwoLevelIterator
~TwoLevelIteratorGuards	table/two_level_iterator.cc	/^TwoLevelIteratorGuards::~TwoLevelIteratorGuards() {$/;"	f	class:leveldb::__anon4::TwoLevelIteratorGuards
~Version	db/version_set.cc	/^Version::~Version() {$/;"	f	class:leveldb::Version
~VersionEdit	db/version_edit.h	/^  ~VersionEdit() { }$/;"	f	class:leveldb::VersionEdit
~VersionSet	db/version_set.cc	/^VersionSet::~VersionSet() {$/;"	f	class:leveldb::VersionSet
~WritableFile	util/env.cc	/^WritableFile::~WritableFile() {$/;"	f	class:leveldb::WritableFile
~WritableFileImpl	helpers/memenv/memenv.cc	/^  ~WritableFileImpl() {$/;"	f	class:leveldb::__anon9::WritableFileImpl
~WriteBatch	db/write_batch.cc	/^WriteBatch::~WriteBatch() { }$/;"	f	class:leveldb::WriteBatch
~Writer	db/db_impl.cc	/^  ~Writer() throw () {$/;"	f	struct:leveldb::DBImpl::Writer
~Writer	db/log_writer.cc	/^Writer::~Writer() {$/;"	f	class:leveldb::log::Writer
~leveldb_comparator_t	db/c.cc	/^  virtual ~leveldb_comparator_t() {$/;"	f	struct:leveldb_comparator_t
~leveldb_filterpolicy_t	db/c.cc	/^  virtual ~leveldb_filterpolicy_t() {$/;"	f	struct:leveldb_filterpolicy_t
